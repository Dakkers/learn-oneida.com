{
  "version": 3,
  "sources": ["../../../app/components/practice/EnglishToOneidaQuiz.tsx"],
  "sourcesContent": ["// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app/components/practice/EnglishToOneidaQuiz.tsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nvar _s = $RefreshSig$(),\n  _s2 = $RefreshSig$(),\n  _s3 = $RefreshSig$(),\n  _s4 = $RefreshSig$(),\n  _s5 = $RefreshSig$();\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app/components/practice/EnglishToOneidaQuiz.tsx\");\n  import.meta.hot.lastModified = \"1716730031927.084\";\n}\n// REMIX HMR END\n\nimport { Flex } from \"@/design/components/flex\";\nimport { AnswerMultipleChoiceButtons, QuizContainerContext, AnswerText, NextBtn, Settings } from \"./QuizContainer\";\nimport { Quiz, useQuizContext } from \"./Quiz\";\nimport { Text } from \"@/design/components/text\";\nimport React from \"react\";\nimport { Box } from \"@/design/components/box\";\nimport { Button } from \"@/design/primitives/button\";\nimport _ from \"lodash\";\nimport { sanitizeIrregularCharacters } from \"~/utils/words\";\nexport function EnglishToOneidaQuiz({\n  englishOptions,\n  oneidaOptions\n}) {\n  _s();\n  const [languageSetting, setLanguageSetting] = React.useState(\"both\");\n  const [answerSetting, setAnswerSetting] = React.useState(\"text\");\n  const [questionCountSetting, setQuestionCountSetting] = React.useState(\"5\");\n  return <QuizContainerContext.Provider value={{\n    answerSetting,\n    languageSetting,\n    questionCountSetting,\n    setAnswerSetting,\n    setLanguageSetting,\n    setQuestionCountSetting\n  }}>\n      <Content englishOptions={englishOptions} oneidaOptions={oneidaOptions} />\n    </QuizContainerContext.Provider>;\n}\n_s(EnglishToOneidaQuiz, \"m50+a9FJAG6P4uH79+Gm6Y83w68=\");\n_c = EnglishToOneidaQuiz;\nfunction Content({\n  englishOptions,\n  oneidaOptions\n}) {\n  _s2();\n  const [hasStarted, setHasStarted] = React.useState(false);\n  const questions = useEnglishToOneidaQuestions({\n    englishOptions,\n    hasStarted,\n    oneidaOptions\n  });\n  const getResultForQuestion = useEnglishToOneidaResultChecker({\n    englishOptions,\n    oneidaOptions,\n    questions\n  });\n  const context = React.useContext(QuizContainerContext);\n  if (!context) {\n    throw new Error(\"Missing QuizContainerContext\");\n  }\n  return <>\n      {hasStarted ? <Quiz getResultForQuestion={getResultForQuestion} numberOfQuestions={Number(context.questionCountSetting)} onReset={() => setHasStarted(false)}>\n          <Flex align=\"center\" direction=\"column\" justify=\"center\" gap={8}>\n            <Quiz.Questions>\n              {questions.map(q => <StandardQuestion key={q.key} options={q.options} questionKey={q.key} text={q.text} />)}\n            </Quiz.Questions>\n\n            <Box>\n              <NextBtn />\n            </Box>\n          </Flex>\n        </Quiz> : <Flex direction=\"column\" gap={4}>\n          <Settings />\n\n          <Box>\n            <Button onClick={() => setHasStarted(true)}>Start</Button>\n          </Box>\n        </Flex>}\n    </>;\n}\n_s2(Content, \"+iFfLskDMXwFwPqtJa3J1U6i314=\", false, function () {\n  return [useEnglishToOneidaQuestions, useEnglishToOneidaResultChecker];\n});\n_c2 = Content;\nexport function StandardQuestion({\n  options,\n  questionKey,\n  text\n}) {\n  _s3();\n  const context = React.useContext(QuizContainerContext);\n  const quizContext = useQuizContext();\n  return <Flex align=\"center\" direction=\"column\" gap={8}>\n      <Text variant=\"headlineS\">{text}</Text>\n\n      <div className=\"w-[600px]\">\n        <Flex align=\"center\" direction=\"column\" gap={4}>\n          {context?.answerSetting === \"multipleChoice\" ? <AnswerMultipleChoiceButtons isCorrect={quizContext.answer === questionKey} questionKey={questionKey} options={options} /> : <AnswerText />}\n        </Flex>\n      </div>\n    </Flex>;\n}\n_s3(StandardQuestion, \"54BeTlEy1MwzC842zOeihY5n+8c=\", false, function () {\n  return [useQuizContext];\n});\n_c3 = StandardQuestion;\nexport function useEnglishToOneidaQuestions({\n  englishOptions,\n  hasStarted = false,\n  oneidaOptions\n}) {\n  _s4();\n  const context = React.useContext(QuizContainerContext);\n  const questions = React.useMemo(() => {\n    if (!context || !hasStarted) {\n      return [];\n    }\n    const numOptions = context.languageSetting === \"both\" ? englishOptions.length + oneidaOptions.length : context.languageSetting === \"en\" ? englishOptions.length : oneidaOptions.length;\n    const result = new Array(Math.min(Number(context.questionCountSetting), numOptions));\n    for (let i = 0; i < result.length; i++) {\n      const langKey = determineLangKey(context.languageSetting);\n      const list = langKey === \"en\" ? englishOptions : oneidaOptions;\n      const oppositeList = langKey === \"en\" ? oneidaOptions : englishOptions;\n      const questionDatum = _.sample(list.filter(datum => !result.find(existingEntry => existingEntry?.key === datum.key))) ?? list[0];\n      const answerDatum = oppositeList.find(opt => opt.key === questionDatum.key);\n      const optionsForQuestion = [];\n      if (answerDatum) {\n        optionsForQuestion.push({\n          key: answerDatum.key,\n          text: answerDatum.text\n        });\n      }\n      const sampledOptions = _.sampleSize(oppositeList, 5);\n      for (const item of sampledOptions) {\n        if (item.key !== questionDatum.key) {\n          optionsForQuestion.push({\n            key: item.key,\n            text: item.text\n          });\n        }\n        if (optionsForQuestion.length >= 4) {\n          break;\n        }\n      }\n      result[i] = {\n        answer: answerDatum?.text ?? \"\",\n        key: questionDatum.key,\n        options: _.shuffle(optionsForQuestion),\n        text: questionDatum.text,\n        type: langKey === \"en\" ? \"english_to_oneida\" : \"oneida_to_english\"\n      };\n    }\n    return result;\n  }, [context, hasStarted, englishOptions, oneidaOptions]);\n  return questions;\n}\n_s4(useEnglishToOneidaQuestions, \"OPrbGAbYsPnizC6Y6RQTDN/13ao=\");\nexport function useEnglishToOneidaResultChecker({\n  englishOptions,\n  oneidaOptions,\n  questions\n}) {\n  _s5();\n  const context = React.useContext(QuizContainerContext);\n  if (!context) {\n    throw new Error(\"Missing QuizContainerContext\");\n  }\n  return (index, userAnswer) => {\n    const q = questions[index];\n    const listToUse = q.type === \"english_to_oneida\" ? oneidaOptions : englishOptions;\n    const correctAnswerObj = listToUse.find(obj => obj.key === q.key);\n    let isCorrect = false;\n    let selectedAnswer = userAnswer;\n    if (context.answerSetting === \"text\") {\n      isCorrect = sanitizeIrregularCharacters(userAnswer) === sanitizeIrregularCharacters(correctAnswerObj?.text ?? \"\");\n    } else {\n      const selectedAnswerObj = listToUse.find(obj => obj.key === userAnswer);\n      isCorrect = q.key === selectedAnswer;\n      selectedAnswer = selectedAnswerObj?.text ?? \"\";\n    }\n    return {\n      correctAnswer: correctAnswerObj?.text ?? \"\",\n      isCorrect,\n      question: q.text,\n      selectedAnswer\n    };\n  };\n}\n_s5(useEnglishToOneidaResultChecker, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nfunction determineLangKey(languageSetting) {\n  if (languageSetting === \"en\" || languageSetting === \"on\") {\n    return languageSetting;\n  }\n  return Math.random() < 0.5 ? \"en\" : \"on\";\n}\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"EnglishToOneidaQuiz\");\n$RefreshReg$(_c2, \"Content\");\n$RefreshReg$(_c3, \"StandardQuestion\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6BA,mBAAkB;AAGlB,oBAAc;AAkBR;AAjDN,IAAI,CAAC,OAAO,gBAAgB,CAAC,OAAO,gBAAgB,CAAC,OAAO,kBAAkB;AAC5E,UAAQ,KAAK,kGAAkG;AACjH,OAAO;AACD,mBAAiB,OAAO;AACxB,mBAAiB,OAAO;AAC5B,SAAO,eAAe,CAAC,MAAM,OAAO;AAClC,WAAO,iBAAiB,SAAS,MAAM,sDAAwD,EAAE;AAAA,EACnG;AACA,SAAO,eAAe,OAAO,iBAAiB;AAChD;AANM;AACA;AAMN,IAAI,KAAK,aAAa;AAAtB,IACE,MAAM,aAAa;AADrB,IAEE,MAAM,aAAa;AAFrB,IAGE,MAAM,aAAa;AAHrB,IAIE,MAAM,aAAa;AAErB,IAAI,aAAa;AACf,cAAY,MAAc;AAAA;AAAA,IAE1B;AAAA,EAAiD;AACjD,cAAY,IAAI,eAAe;AACjC;AAYO,SAAS,oBAAoB;AAAA,EAClC;AAAA,EACA;AACF,GAAG;AACD,KAAG;AACH,QAAM,CAAC,iBAAiB,kBAAkB,IAAI,aAAAA,QAAM,SAAS,MAAM;AACnE,QAAM,CAAC,eAAe,gBAAgB,IAAI,aAAAA,QAAM,SAAS,MAAM;AAC/D,QAAM,CAAC,sBAAsB,uBAAuB,IAAI,aAAAA,QAAM,SAAS,GAAG;AAC1E,SAAO,mDAAC,qBAAqB,UAArB,EAA8B,OAAO;AAAA,IAC3C;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACF,GACI,6DAAC,WAAQ,gBAAgC,iBAAzC;AAAA;AAAA;AAAA;AAAA,SAAuE,KARpE;AAAA;AAAA;AAAA;AAAA,SASL;AACJ;AACA,GAAG,qBAAqB,8BAA8B;AACtD,KAAK;AACL,SAAS,QAAQ;AAAA,EACf;AAAA,EACA;AACF,GAAG;AACD,MAAI;AACJ,QAAM,CAAC,YAAY,aAAa,IAAI,aAAAA,QAAM,SAAS,KAAK;AACxD,QAAM,YAAY,4BAA4B;AAAA,IAC5C;AAAA,IACA;AAAA,IACA;AAAA,EACF,CAAC;AACD,QAAM,uBAAuB,gCAAgC;AAAA,IAC3D;AAAA,IACA;AAAA,IACA;AAAA,EACF,CAAC;AACD,QAAM,UAAU,aAAAA,QAAM,WAAW,oBAAoB;AACrD,MAAI,CAAC,SAAS;AACZ,UAAM,IAAI,MAAM,8BAA8B;AAAA,EAChD;AACA,SAAO,sFACF,uBAAa,mDAAC,QAAK,sBAA4C,mBAAmB,OAAO,QAAQ,oBAAoB,GAAG,SAAS,MAAM,cAAc,KAAK,GACvJ,6DAAC,QAAK,OAAM,UAAS,WAAU,UAAS,SAAQ,UAAS,KAAK,GAC5D;AAAA,uDAAC,KAAK,WAAL,EACE,oBAAU,IAAI,OAAK,mDAAC,oBAA6B,SAAS,EAAE,SAAS,aAAa,EAAE,KAAK,MAAM,EAAE,QAAvD,EAAE,KAAzB;AAAA;AAAA;AAAA;AAAA,WAAoF,CAAE,KAD5G;AAAA;AAAA;AAAA;AAAA,WAEA;AAAA,IAEA,mDAAC,OACC,6DAAC,aAAD;AAAA;AAAA;AAAA;AAAA,WAAS,KADX;AAAA;AAAA;AAAA;AAAA,WAEA;AAAA,OAPF;AAAA;AAAA;AAAA;AAAA,SAQA,KATU;AAAA;AAAA;AAAA;AAAA,SAUZ,IAAU,mDAAC,QAAK,WAAU,UAAS,KAAK,GACtC;AAAA,uDAAC,cAAD;AAAA;AAAA;AAAA;AAAA,WAAU;AAAA,IAEV,mDAAC,OACC,6DAAC,UAAO,SAAS,MAAM,cAAc,IAAI,GAAG,qBAA5C;AAAA;AAAA;AAAA;AAAA,WAAiD,KADnD;AAAA;AAAA;AAAA;AAAA,WAEA;AAAA,OALQ;AAAA;AAAA;AAAA;AAAA,SAMV,KAjBC;AAAA;AAAA;AAAA;AAAA,SAkBL;AACJ;AACA,IAAI,SAAS,gCAAgC,OAAO,WAAY;AAC9D,SAAO,CAAC,6BAA6B,+BAA+B;AACtE,CAAC;AACD,MAAM;AACC,SAAS,iBAAiB;AAAA,EAC/B;AAAA,EACA;AAAA,EACA;AACF,GAAG;AACD,MAAI;AACJ,QAAM,UAAU,aAAAA,QAAM,WAAW,oBAAoB;AACrD,QAAM,cAAc,eAAe;AACnC,SAAO,mDAAC,QAAK,OAAM,UAAS,WAAU,UAAS,KAAK,GAChD;AAAA,uDAAC,QAAK,SAAQ,aAAa,kBAA3B;AAAA;AAAA;AAAA;AAAA,WAAgC;AAAA,IAEhC,mDAAC,SAAI,WAAU,aACb,6DAAC,QAAK,OAAM,UAAS,WAAU,UAAS,KAAK,GAC1C,mBAAS,kBAAkB,mBAAmB,mDAAC,+BAA4B,WAAW,YAAY,WAAW,aAAa,aAA0B,WAAtG;AAAA;AAAA;AAAA;AAAA,WAAwH,IAAK,mDAAC,gBAAD;AAAA;AAAA;AAAA;AAAA,WAAY,KAD1L;AAAA;AAAA;AAAA;AAAA,WAEA,KAHF;AAAA;AAAA;AAAA;AAAA,WAIA;AAAA,OAPG;AAAA;AAAA;AAAA;AAAA,SAQL;AACJ;AACA,IAAI,kBAAkB,gCAAgC,OAAO,WAAY;AACvE,SAAO,CAAC,cAAc;AACxB,CAAC;AACD,MAAM;AACC,SAAS,4BAA4B;AAAA,EAC1C;AAAA,EACA,aAAa;AAAA,EACb;AACF,GAAG;AACD,MAAI;AACJ,QAAM,UAAU,aAAAA,QAAM,WAAW,oBAAoB;AACrD,QAAM,YAAY,aAAAA,QAAM,QAAQ,MAAM;AACpC,QAAI,CAAC,WAAW,CAAC,YAAY;AAC3B,aAAO,CAAC;AAAA,IACV;AACA,UAAM,aAAa,QAAQ,oBAAoB,SAAS,eAAe,SAAS,cAAc,SAAS,QAAQ,oBAAoB,OAAO,eAAe,SAAS,cAAc;AAChL,UAAM,SAAS,IAAI,MAAM,KAAK,IAAI,OAAO,QAAQ,oBAAoB,GAAG,UAAU,CAAC;AACnF,aAAS,IAAI,GAAG,IAAI,OAAO,QAAQ,KAAK;AACtC,YAAM,UAAU,iBAAiB,QAAQ,eAAe;AACxD,YAAM,OAAO,YAAY,OAAO,iBAAiB;AACjD,YAAM,eAAe,YAAY,OAAO,gBAAgB;AACxD,YAAM,gBAAgB,cAAAC,QAAE,OAAO,KAAK,OAAO,WAAS,CAAC,OAAO,KAAK,mBAAiB,eAAe,QAAQ,MAAM,GAAG,CAAC,CAAC,KAAK,KAAK,CAAC;AAC/H,YAAM,cAAc,aAAa,KAAK,SAAO,IAAI,QAAQ,cAAc,GAAG;AAC1E,YAAM,qBAAqB,CAAC;AAC5B,UAAI,aAAa;AACf,2BAAmB,KAAK;AAAA,UACtB,KAAK,YAAY;AAAA,UACjB,MAAM,YAAY;AAAA,QACpB,CAAC;AAAA,MACH;AACA,YAAM,iBAAiB,cAAAA,QAAE,WAAW,cAAc,CAAC;AACnD,iBAAW,QAAQ,gBAAgB;AACjC,YAAI,KAAK,QAAQ,cAAc,KAAK;AAClC,6BAAmB,KAAK;AAAA,YACtB,KAAK,KAAK;AAAA,YACV,MAAM,KAAK;AAAA,UACb,CAAC;AAAA,QACH;AACA,YAAI,mBAAmB,UAAU,GAAG;AAClC;AAAA,QACF;AAAA,MACF;AACA,aAAO,CAAC,IAAI;AAAA,QACV,QAAQ,aAAa,QAAQ;AAAA,QAC7B,KAAK,cAAc;AAAA,QACnB,SAAS,cAAAA,QAAE,QAAQ,kBAAkB;AAAA,QACrC,MAAM,cAAc;AAAA,QACpB,MAAM,YAAY,OAAO,sBAAsB;AAAA,MACjD;AAAA,IACF;AACA,WAAO;AAAA,EACT,GAAG,CAAC,SAAS,YAAY,gBAAgB,aAAa,CAAC;AACvD,SAAO;AACT;AACA,IAAI,6BAA6B,8BAA8B;AACxD,SAAS,gCAAgC;AAAA,EAC9C;AAAA,EACA;AAAA,EACA;AACF,GAAG;AACD,MAAI;AACJ,QAAM,UAAU,aAAAD,QAAM,WAAW,oBAAoB;AACrD,MAAI,CAAC,SAAS;AACZ,UAAM,IAAI,MAAM,8BAA8B;AAAA,EAChD;AACA,SAAO,CAAC,OAAO,eAAe;AAC5B,UAAM,IAAI,UAAU,KAAK;AACzB,UAAM,YAAY,EAAE,SAAS,sBAAsB,gBAAgB;AACnE,UAAM,mBAAmB,UAAU,KAAK,SAAO,IAAI,QAAQ,EAAE,GAAG;AAChE,QAAI,YAAY;AAChB,QAAI,iBAAiB;AACrB,QAAI,QAAQ,kBAAkB,QAAQ;AACpC,kBAAY,4BAA4B,UAAU,MAAM,4BAA4B,kBAAkB,QAAQ,EAAE;AAAA,IAClH,OAAO;AACL,YAAM,oBAAoB,UAAU,KAAK,SAAO,IAAI,QAAQ,UAAU;AACtE,kBAAY,EAAE,QAAQ;AACtB,uBAAiB,mBAAmB,QAAQ;AAAA,IAC9C;AACA,WAAO;AAAA,MACL,eAAe,kBAAkB,QAAQ;AAAA,MACzC;AAAA,MACA,UAAU,EAAE;AAAA,MACZ;AAAA,IACF;AAAA,EACF;AACF;AACA,IAAI,iCAAiC,8BAA8B;AACnE,SAAS,iBAAiB,iBAAiB;AACzC,MAAI,oBAAoB,QAAQ,oBAAoB,MAAM;AACxD,WAAO;AAAA,EACT;AACA,SAAO,KAAK,OAAO,IAAI,MAAM,OAAO;AACtC;AACA,IAAI;AAAJ,IAAQ;AAAR,IAAa;AACb,aAAa,IAAI,qBAAqB;AACtC,aAAa,KAAK,SAAS;AAC3B,aAAa,KAAK,kBAAkB;AAEpC,OAAO,eAAe;AACtB,OAAO,eAAe;",
  "names": ["React", "_"]
}
