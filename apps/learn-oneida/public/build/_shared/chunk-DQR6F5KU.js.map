{
  "version": 3,
  "sources": ["../../../@/design/primitives/separator.tsx", "../../../node_modules/@radix-ui/react-separator/dist/packages/react/separator/src/index.ts", "../../../node_modules/@radix-ui/react-separator/dist/packages/react/separator/src/Separator.tsx"],
  "sourcesContent": ["import * as React from \"react\";\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref,\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className,\n      )}\n      {...props}\n    />\n  ),\n);\nSeparator.displayName = SeparatorPrimitive.Root.displayName;\n\nexport { Separator };\n", "export {\n  Separator,\n  //\n  Root,\n} from './Separator';\nexport type { SeparatorProps } from './Separator';\n", "import * as React from 'react';\nimport { Primitive } from '@radix-ui/react-primitive';\n\nimport type * as Radix from '@radix-ui/react-primitive';\n\n/* -------------------------------------------------------------------------------------------------\n *  Separator\n * -----------------------------------------------------------------------------------------------*/\n\nconst NAME = 'Separator';\nconst DEFAULT_ORIENTATION = 'horizontal';\nconst ORIENTATIONS = ['horizontal', 'vertical'] as const;\n\ntype Orientation = typeof ORIENTATIONS[number];\ntype SeparatorElement = React.ElementRef<typeof Primitive.div>;\ntype PrimitiveDivProps = Radix.ComponentPropsWithoutRef<typeof Primitive.div>;\ninterface SeparatorProps extends PrimitiveDivProps {\n  /**\n   * Either `vertical` or `horizontal`. Defaults to `horizontal`.\n   */\n  orientation?: Orientation;\n  /**\n   * Whether or not the component is purely decorative. When true, accessibility-related attributes\n   * are updated so that that the rendered element is removed from the accessibility tree.\n   */\n  decorative?: boolean;\n}\n\nconst Separator = React.forwardRef<SeparatorElement, SeparatorProps>((props, forwardedRef) => {\n  const { decorative, orientation: orientationProp = DEFAULT_ORIENTATION, ...domProps } = props;\n  const orientation = isValidOrientation(orientationProp) ? orientationProp : DEFAULT_ORIENTATION;\n  // `aria-orientation` defaults to `horizontal` so we only need it if `orientation` is vertical\n  const ariaOrientation = orientation === 'vertical' ? orientation : undefined;\n  const semanticProps = decorative\n    ? { role: 'none' }\n    : { 'aria-orientation': ariaOrientation, role: 'separator' };\n\n  return (\n    <Primitive.div\n      data-orientation={orientation}\n      {...semanticProps}\n      {...domProps}\n      ref={forwardedRef}\n    />\n  );\n});\n\nSeparator.displayName = NAME;\n\nSeparator.propTypes = {\n  orientation(props, propName, componentName) {\n    const propValue = props[propName];\n    const strVal = String(propValue);\n    if (propValue && !isValidOrientation(propValue)) {\n      return new Error(getInvalidOrientationError(strVal, componentName));\n    }\n    return null;\n  },\n};\n\n/* -----------------------------------------------------------------------------------------------*/\n\n// Split this out for clearer readability of the error message.\nfunction getInvalidOrientationError(value: string, componentName: string) {\n  return `Invalid prop \\`orientation\\` of value \\`${value}\\` supplied to \\`${componentName}\\`, expected one of:\n  - horizontal\n  - vertical\n\nDefaulting to \\`${DEFAULT_ORIENTATION}\\`.`;\n}\n\nfunction isValidOrientation(orientation: any): orientation is Orientation {\n  return ORIENTATIONS.includes(orientation);\n}\n\nconst Root = Separator;\n\nexport {\n  Separator,\n  //\n  Root,\n};\nexport type { SeparatorProps };\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA,YAAuB;;;;AEUvB,IAAMA,4CAAsB;AAC5B,IAAMC,qCAAe;EAAC;EAAc;;AAiBpC,IAAMC,4CAAYC,iCAAAA,YAAmD,CAACC,OAAOC,iBAAiB;AAC5F,QAAM,EAAA,YAAcC,aAAaC,kBAAkBP,2CAAqB,GAAGQ,SAAH,IAAgBJ;AACxF,QAAME,cAAcG,yCAAmBF,eAAD,IAAoBA,kBAAkBP;AAE5E,QAAMU,kBAAkBJ,gBAAgB,aAAaA,cAAcK;AACnE,QAAMC,gBAAgBC,aAClB;IAAEC,MAAM;MACR;IAAE,oBAAoBJ;IAAiBI,MAAM;;AAEjD,SACE,iCAAAC,eAAC,0CAAU,KADb,SAAA;IAEI,oBAAkBT;KACdM,eACAJ,UAHN;IAIE,KAAKH;GAJP,CAAA;CAVc;AAqBlBW,0CAAUC,YAAY;EACpBC,YAAYC,OAAOC,UAAUC,eAAe;AAC1C,UAAMC,YAAYH,MAAMC,QAAD;AACvB,UAAMG,SAASC,OAAOF,SAAD;AACrB,QAAIA,aAAa,CAACG,yCAAmBH,SAAD;AAClC,aAAO,IAAII,MAAMC,iDAA2BJ,QAAQF,aAAT,CAApC;AAET,WAAO;;;AAOX,SAASM,iDAA2BC,OAAeP,eAAuB;AACxE,SAAQ,2CAA0CO,yBAAyBP;;;;kBAI3DQ;;AAGlB,SAASJ,yCAAmBP,aAA8C;AACxE,SAAOY,mCAAaC,SAASb,WAAtB;;AAGT,IAAMc,4CAAOhB;;;AF9DT;AARJ,IAAM,YAAkB;AAAA,EAItB,CACE,EAAE,WAAW,cAAc,cAAc,aAAa,MAAM,GAAG,MAAM,GACrE,QAEA;AAAA,IAAoB;AAAA,IAAnB;AAAA,MACC;AAAA,MACA;AAAA,MACA;AAAA,MACA,WAAW;AAAA,QACT;AAAA,QACA,gBAAgB,eAAe,mBAAmB;AAAA,QAClD;AAAA,MACF;AAAA,MACC,GAAG;AAAA;AAAA,IATN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA;AAEJ;AACA,UAAU,cAAiC,0CAAK;",
  "names": ["DEFAULT_ORIENTATION", "ORIENTATIONS", "Separator", "React", "props", "forwardedRef", "orientation", "orientationProp", "domProps", "isValidOrientation", "ariaOrientation", "undefined", "semanticProps", "decorative", "role", "$5WXm8$createElement", "Separator", "propTypes", "orientation", "props", "propName", "componentName", "propValue", "strVal", "String", "isValidOrientation", "Error", "getInvalidOrientationError", "value", "DEFAULT_ORIENTATION", "ORIENTATIONS", "includes", "Root"]
}
