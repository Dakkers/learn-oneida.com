{
  "version": 3,
  "sources": ["../../../app/components/articles/Months.tsx"],
  "sourcesContent": ["// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app/components/articles/Months.tsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app/components/articles/Months.tsx\");\n  import.meta.hot.lastModified = \"1711838251925.8784\";\n}\n// REMIX HMR END\n\nimport { Flex } from \"@/design/components/flex\";\nimport { TableWrapper } from \"@/design/components/tableWrapper\";\nimport { SectionHeading } from \"../SectionHeading\";\nexport const DATA_MONTHS = [{\n  en: \"January\",\n  on: \"Teyakoh\u00FAhtya\u0294ks\",\n  translation: \"Their ears are freezing\",\n  key: \"jan\"\n}, {\n  en: \"February\",\n  on: \"Tsha\u0294tekohs\u00E9lha\u0294\",\n  translation: \"Half of winter\",\n  key: \"feb\"\n}, {\n  en: \"March\",\n  on: \"Tew\u028Chn\u00EDslya\u0294ks\",\n  translation: \"The day is cut in two\",\n  key: \"mar\"\n}, {\n  en: \"April\",\n  on: \"Wahsakayu\u00B7t\u00E9\u00B7se\u0294\",\n  translation: \"It's thundering\",\n  key: \"apr\"\n}, {\n  en: \"May\",\n  on: \"Latiy\u028C\u0301thos\",\n  translation: \"They plant\",\n  key: \"may\"\n}, {\n  en: \"June\",\n  on: \"Aw\u028Chihte\u0294\",\n  translation: \" Strawberry\",\n  key: \"jun\"\n}, {\n  en: \"July\",\n  on: \"Ohy\u00F3tsheli\u0294\",\n  translation: \"Green string bean\",\n  key: \"jul\"\n}, {\n  en: \"August\",\n  on: \"On\u028C\u0301stase\u0294\",\n  translation: \"New corn\",\n  key: \"aug\"\n}, {\n  en: \"September\",\n  on: \"Yey\u028Cth\u00F3kwas\",\n  translation: \"Someone harvests\",\n  key: \"sep\"\n}, {\n  en: \"October\",\n  on: \"Yut\u00E9khway\u028Che\u0294\",\n  translation: \"Someone stores food\",\n  key: \"oct\"\n}, {\n  en: \"November\",\n  on: \"Tehut\u028Cnuhela\u00B7t\u00FAhe\u0294\",\n  translation: \"They give thanks\",\n  key: \"nov\"\n}, {\n  en: \"December\",\n  on: \"Wahsu\u00B7t\u00E9s\",\n  translation: \"It's a long night\",\n  key: \"dec\"\n}];\nexport function MonthsArticle({\n  level = 1\n}) {\n  const monthsNext = [{\n    en: \"next January\",\n    on: \"T\u028Cyakoh\u00FAhtya\u0294ks\"\n  }, {\n    en: \"next February\",\n    on: \"Tsha\u0294t\u028Ckohs\u00E9lha\u0294\"\n  }];\n  const monthsLast = [{\n    en: \"last January\",\n    on: \"Tsha\u0294teyakoh\u00FAhtya\u0294ksk\u028C\u0301\"\n  }, {\n    en: \"last February\",\n    on: \"Tsha\u0294tekohselha\u0294k\u028C\u0301\"\n  }];\n  return <Flex direction=\"column\" gap={4}>\n      <SectionHeading id=\"months\" level={level}>\n        Months\n      </SectionHeading>\n      <TableWrapper columns={[...TableWrapper.columnsEnglishOneida, {\n      accessorKey: \"translation\",\n      header: \"Literal translation\"\n    }]} data={DATA_MONTHS} />\n\n      <SectionHeading id=\"months-last\" level={level + 1}>\n        Last month\n      </SectionHeading>\n      <TableWrapper columns={TableWrapper.columnsEnglishOneida} data={monthsLast} />\n\n      <SectionHeading id=\"months-next\" level={level + 1}>\n        Next month\n      </SectionHeading>\n      <TableWrapper columns={TableWrapper.columnsEnglishOneida} data={monthsNext} />\n    </Flex>;\n}\n_c = MonthsArticle;\nvar _c;\n$RefreshReg$(_c, \"MonthsArticle\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;"],
  "mappings": "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",
  "names": []
}
