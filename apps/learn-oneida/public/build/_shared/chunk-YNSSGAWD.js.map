{
  "version": 3,
  "sources": ["../../../app/utils/words.ts"],
  "sourcesContent": ["// REMIX HMR BEGIN\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\nimport.meta.hot = __hmr__.createHotContext(\n//@ts-expect-error\n\"app/utils/words.ts\"\n);\nimport.meta.hot.lastModified = \"1718240757475.7546\";\n}\n// REMIX HMR END\n\nconst WHISPER_CHAR = \"\u0332\";\nconst WHISPER_REGEX = new RegExp(WHISPER_CHAR, \"g\");\n\nexport function whisperizeWord(word: string | undefined, shouldWhisper = true) {\n  if (!word) {\n    return \"\";\n  }\n\n  const vowels = [\"a\", \"e\", \"i\", \"o\", \"u\", \"\u028C\"];\n  const vowelsAccented = [\"\u00E1\", \"\u00E9\", \"\u00ED\", \"\u00F3\", \"\u00FA\", \"\u028C\u0301\"];\n  const vowelsWhispered = [\"a\u0332\", \"e\u0332\", \"i\u0332\", \"o\u0332\", \"u\u0332\", \"\u028C\u0332\"];\n  const vowelsWhisperedAccented = [\"\u00E1\u0332\", \"\u00E9\u0332\", \"\u00ED\u0332\", \"\u00F3\u0332\", \"\u00FA\u0332\", \"\u028C\u0332\u0332\u0301\"];\n  const reversedIndex = word\n    .split(\"\")\n    .reverse()\n    .findIndex(\n      (char) =>\n        vowels.includes(char) ||\n        vowelsAccented.includes(char) ||\n        char === WHISPER_CHAR,\n    );\n  const index = word.length - reversedIndex - 1;\n  const char = word.charAt(index);\n\n  if (shouldWhisper) {\n    if (\n      vowelsWhispered.includes(char) ||\n      vowelsWhisperedAccented.includes(char)\n    ) {\n      return word;\n    }\n    const index1 = vowels.indexOf(char);\n    const index2 = vowelsAccented.indexOf(char);\n    const lookupIndex = Math.max(index1, index2);\n    const result = word.split(\"\");\n    result[index] =\n      index1 >= 0\n        ? vowelsWhispered[lookupIndex]\n        : vowelsWhisperedAccented[lookupIndex];\n\n    return result.join(\"\");\n  } else {\n    return word.replace(WHISPER_REGEX, \"\");\n  }\n}\n\nexport function unwhisperWord(word: string | undefined) {\n  return whisperizeWord(word, false);\n}\n\nexport function removeAccents(value: string) {\n  return value\n    .replaceAll(\"\u00E1\", \"a\")\n    .replaceAll(\"\u00E9\", \"e\")\n    .replaceAll(\"\u00ED\", \"i\")\n    .replaceAll(\"\u00F3\", \"o\")\n    .replaceAll(\"\u00FA\", \"u\")\n    .replaceAll(\"\u028C\u0301\", \"\u028C\");\n}\n\nexport function removeWhisper(value: string) {\n  return value\n    .replaceAll(\"a\u0332\", \"a\")\n    .replaceAll(\"e\u0332\", \"e\")\n    .replaceAll(\"i\u0332\", \"i\")\n    .replaceAll(\"o\u0332\", \"o\")\n    .replaceAll(\"u\u0332\", \"u\")\n    .replaceAll(\"\u028C\u0332\", \"\u028C\")\n    .replaceAll(\"\u02CD\", \"\");\n}\n\nexport function removeLongStress(value: string) {\n  return value.replaceAll(\"\u00B7\", \"\").replaceAll(\":\", \"\");\n}\n\nexport function sanitizeIrregularCharacters(value: string) {\n  return [removeAccents, removeWhisper, removeLongStress].reduce(\n    (result, fn) => fn(result),\n    value.toLowerCase(),\n  );\n}\n\nfunction replaceForCaret(value: string) {\n  let result = value;\n  for (const char of [\"v\", \"^\"]) {\n    result = result.replaceAll(char, \"\u028C\");\n  }\n  return result;\n}\n\nfunction replaceForGlottal(value: string) {\n  let result = value;\n  for (const char of [\"\u02BC\", \"'\", \"\u2019\"]) {\n    result = result.replaceAll(char, \"\u0294\");\n  }\n  return result;\n}\n\nexport function standardizeCharacters(value: string) {\n  return [replaceForCaret, replaceForGlottal].reduce(\n    (result, fn) => fn(result),\n    value.toLowerCase(),\n  );\n}\n"],
  "mappings": ";;;;;AAEA,IAAI,aAAa;AACjB,cAAY,MAAc;AAAA;AAAA,IAE1B;AAAA,EACA;AACA,cAAY,IAAI,eAAe;AAC/B;AAGA,IAAM,eAAe;AACrB,IAAM,gBAAgB,IAAI,OAAO,cAAc,GAAG;AAE3C,SAAS,eAAe,MAA0B,gBAAgB,MAAM;AAC7E,MAAI,CAAC,MAAM;AACT,WAAO;AAAA,EACT;AAEA,QAAM,SAAS,CAAC,KAAK,KAAK,KAAK,KAAK,KAAK,QAAG;AAC5C,QAAM,iBAAiB,CAAC,QAAK,QAAK,QAAK,QAAK,QAAK,cAAI;AACrD,QAAM,kBAAkB,CAAC,WAAM,WAAM,WAAM,WAAM,WAAM,cAAI;AAC3D,QAAM,0BAA0B,CAAC,cAAM,cAAM,cAAM,cAAM,cAAM,0BAAM;AACrE,QAAM,gBAAgB,KACnB,MAAM,EAAE,EACR,QAAQ,EACR;AAAA,IACC,CAACA,UACC,OAAO,SAASA,KAAI,KACpB,eAAe,SAASA,KAAI,KAC5BA,UAAS;AAAA,EACb;AACF,QAAM,QAAQ,KAAK,SAAS,gBAAgB;AAC5C,QAAM,OAAO,KAAK,OAAO,KAAK;AAE9B,MAAI,eAAe;AACjB,QACE,gBAAgB,SAAS,IAAI,KAC7B,wBAAwB,SAAS,IAAI,GACrC;AACA,aAAO;AAAA,IACT;AACA,UAAM,SAAS,OAAO,QAAQ,IAAI;AAClC,UAAM,SAAS,eAAe,QAAQ,IAAI;AAC1C,UAAM,cAAc,KAAK,IAAI,QAAQ,MAAM;AAC3C,UAAM,SAAS,KAAK,MAAM,EAAE;AAC5B,WAAO,KAAK,IACV,UAAU,IACN,gBAAgB,WAAW,IAC3B,wBAAwB,WAAW;AAEzC,WAAO,OAAO,KAAK,EAAE;AAAA,EACvB,OAAO;AACL,WAAO,KAAK,QAAQ,eAAe,EAAE;AAAA,EACvC;AACF;AAEO,SAAS,cAAc,MAA0B;AACtD,SAAO,eAAe,MAAM,KAAK;AACnC;AAEO,SAAS,cAAc,OAAe;AAC3C,SAAO,MACJ,WAAW,QAAK,GAAG,EACnB,WAAW,QAAK,GAAG,EACnB,WAAW,QAAK,GAAG,EACnB,WAAW,QAAK,GAAG,EACnB,WAAW,QAAK,GAAG,EACnB,WAAW,gBAAM,QAAG;AACzB;AAEO,SAAS,cAAc,OAAe;AAC3C,SAAO,MACJ,WAAW,WAAM,GAAG,EACpB,WAAW,WAAM,GAAG,EACpB,WAAW,WAAM,GAAG,EACpB,WAAW,WAAM,GAAG,EACpB,WAAW,WAAM,GAAG,EACpB,WAAW,gBAAM,QAAG,EACpB,WAAW,UAAK,EAAE;AACvB;AAEO,SAAS,iBAAiB,OAAe;AAC9C,SAAO,MAAM,WAAW,QAAK,EAAE,EAAE,WAAW,KAAK,EAAE;AACrD;AAEO,SAAS,4BAA4B,OAAe;AACzD,SAAO,CAAC,eAAe,eAAe,gBAAgB,EAAE;AAAA,IACtD,CAAC,QAAQ,OAAO,GAAG,MAAM;AAAA,IACzB,MAAM,YAAY;AAAA,EACpB;AACF;AAEA,SAAS,gBAAgB,OAAe;AACtC,MAAI,SAAS;AACb,aAAW,QAAQ,CAAC,KAAK,GAAG,GAAG;AAC7B,aAAS,OAAO,WAAW,MAAM,QAAG;AAAA,EACtC;AACA,SAAO;AACT;AAEA,SAAS,kBAAkB,OAAe;AACxC,MAAI,SAAS;AACb,aAAW,QAAQ,CAAC,UAAK,KAAK,QAAG,GAAG;AAClC,aAAS,OAAO,WAAW,MAAM,QAAG;AAAA,EACtC;AACA,SAAO;AACT;AAEO,SAAS,sBAAsB,OAAe;AACnD,SAAO,CAAC,iBAAiB,iBAAiB,EAAE;AAAA,IAC1C,CAAC,QAAQ,OAAO,GAAG,MAAM;AAAA,IACzB,MAAM,YAAY;AAAA,EACpB;AACF;",
  "names": ["char"]
}
