{
  "version": 3,
  "sources": ["../../../app/components/practice/Quiz.tsx", "../../../app/components/practice/QuizContainer.tsx", "../../../@/design/components/RadioGroup.tsx", "../../../@/design/primitives/radio-group.tsx", "../../../node_modules/@radix-ui/react-radio-group/dist/packages/react/radio-group/src/index.ts", "../../../node_modules/@radix-ui/react-radio-group/dist/packages/react/radio-group/src/RadioGroup.tsx", "../../../node_modules/@radix-ui/react-radio-group/dist/packages/react/radio-group/src/Radio.tsx"],
  "sourcesContent": ["// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app/components/practice/Quiz.tsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nvar _s = $RefreshSig$(),\n  _s2 = $RefreshSig$(),\n  _s3 = $RefreshSig$();\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app/components/practice/Quiz.tsx\");\n  import.meta.hot.lastModified = \"1709498159479.4778\";\n}\n// REMIX HMR END\n\nimport { Box } from \"@/design/components/box\";\nimport { Flex } from \"@/design/components/flex\";\nimport { TableWrapper } from \"@/design/components/tableWrapper\";\nimport { Text } from \"@/design/components/text\";\nimport { Button } from \"@/design/primitives/button\";\nimport { CheckCircle2Icon, XCircleIcon } from \"lucide-react\";\nimport React from \"react\";\nconst QuizContext = React.createContext({\n  answer: \"\",\n  changeAnswer: value => console.log(value),\n  hasAnswer: false,\n  isFinalQuestion: false,\n  index: 0,\n  nextQuestion: () => console.log(\"nextQuestion()\"),\n  previousQuestion: () => console.log(\"previousQuestion()\")\n});\nexport function Quiz({\n  children,\n  getResultForQuestion,\n  numberOfQuestions = 10,\n  onReset\n}) {\n  _s();\n  const [index, setIndex] = React.useState(0);\n  const [currentAnswer, setCurrentAnswer] = React.useState(\"\");\n  const [results, setResults] = React.useState([]);\n  const isComplete = index >= numberOfQuestions;\n  return <QuizContext.Provider value={{\n    answer: currentAnswer,\n    hasAnswer: !!currentAnswer,\n    index,\n    isFinalQuestion: index === numberOfQuestions - 1,\n    nextQuestion: () => {\n      const result = getResultForQuestion(index, currentAnswer);\n      let newResults = [];\n      if (index >= results.length) {\n        newResults = [...results, result];\n      }\n      newResults[index] = result;\n      setResults(newResults);\n      setIndex(index + 1);\n      setCurrentAnswer(\"\");\n    },\n    previousQuestion: () => {\n      setIndex(index - 1);\n      setCurrentAnswer(\"\");\n    },\n    numberOfQuestions,\n    changeAnswer: setCurrentAnswer\n  }}>\n      {isComplete ? <ResultsScreen onReset={onReset} results={results} /> : <>{children}</>}\n    </QuizContext.Provider>;\n}\n_s(Quiz, \"F7hYFMT+ehTfPaSDQGrVQQy4k5w=\");\n_c = Quiz;\nQuiz.Questions = _s2(function QuizQuestions({\n  children\n}) {\n  _s2();\n  const context = useQuizContext();\n  const childrenArray = React.Children.toArray(children);\n  return childrenArray[context.index];\n}, \"Pl8mufWNvzcdPtPpwfmoCTLttCM=\", false, function () {\n  return [useQuizContext];\n});\nexport function useQuizContext() {\n  _s3();\n  return React.useContext(QuizContext);\n}\n\n// -- Utilities\n_s3(useQuizContext, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nfunction ResultsScreen({\n  onReset,\n  results\n}) {\n  const numCorrect = results.filter(result => result.isCorrect).length;\n  return <Flex direction=\"column\" gap={2}>\n      <Text>\n        You answered <b>{numCorrect}</b> out of {results.length} questions\n        correctly.\n      </Text>\n\n      <TableWrapper columns={[{\n      accessorKey: \"question\",\n      header: \"Question\"\n    }, {\n      accessorKey: \"selectedAnswer\",\n      // @ts-expect-error To be addressed in LO-12\n      cell: (selectedAnswer, row) => <Flex align=\"center\" gap={4}>\n                {row.isCorrect ? <>\n                    <CheckCircle2Icon color=\"green\" />\n                    <Text as=\"span\" intent=\"positive\">\n                      <b>{selectedAnswer}</b>\n                    </Text>\n                  </> : <>\n                    <XCircleIcon color=\"red\" />\n                    <Flex direction=\"column\" gap={2}>\n                      <Text>\n                        Correct answer: <b>{row.correctAnswer}</b>\n                      </Text>\n                      <Text>\n                        Your answer:{\" \"}\n                        <Text as=\"span\" intent=\"negative\">\n                          <b>{selectedAnswer}</b>\n                        </Text>\n                      </Text>\n                    </Flex>\n                  </>}\n              </Flex>,\n      header: \"Answer\"\n    }]}\n    // @ts-expect-error To be addressed in LO-12\n    data={results} />\n\n      <Box>\n        <Button onClick={onReset}>Go back</Button>\n      </Box>\n    </Flex>;\n}\n_c2 = ResultsScreen;\nvar _c, _c2;\n$RefreshReg$(_c, \"Quiz\");\n$RefreshReg$(_c2, \"ResultsScreen\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;", "// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app/components/practice/QuizContainer.tsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nvar _s = $RefreshSig$(),\n  _s2 = $RefreshSig$(),\n  _s3 = $RefreshSig$(),\n  _s4 = $RefreshSig$();\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app/components/practice/QuizContainer.tsx\");\n  import.meta.hot.lastModified = \"1718240764405.0884\";\n}\n// REMIX HMR END\n\nimport { Button } from \"@/design/primitives/button\";\nimport { useQuizContext } from \"./Quiz\";\nimport { cn } from \"@/lib/utils\";\nimport React from \"react\";\nimport { Flex } from \"@/design/components/flex\";\nimport { Input } from \"@/design/primitives/input\";\nimport { RadioGroup } from \"@/design/components/RadioGroup\";\nimport { Select } from \"@/design/components/select\";\nexport const QuizContainerContext = React.createContext(null);\nexport function Settings({\n  enableLanguageSetting = true,\n  enableAnswerTypeSetting = true,\n  enableQuestionCountSetting = true\n}) {\n  _s();\n  const context = React.useContext(QuizContainerContext);\n  if (!context) {\n    throw new Error(\"Missing QuizContainerContext.\");\n  }\n  return <Flex align={{\n    sm: \"start\"\n  }} direction={{\n    xs: \"column\",\n    sm: \"row\"\n  }} gap={2}>\n      {enableLanguageSetting && <RadioGroup label=\"Translate\" onChange={context.setLanguageSetting} value={context.languageSetting}>\n          <RadioGroup.Option value=\"en\">English to Oneida</RadioGroup.Option>\n          <RadioGroup.Option value=\"on\">Oneida to English</RadioGroup.Option>\n          <RadioGroup.Option value=\"both\">Both</RadioGroup.Option>\n        </RadioGroup>}\n\n      {enableAnswerTypeSetting && <RadioGroup label=\"Answer with\" onChange={context.setAnswerSetting} value={context.answerSetting}>\n          <RadioGroup.Option value=\"multipleChoice\">\n            Multiple choice\n          </RadioGroup.Option>\n          <RadioGroup.Option value=\"text\">Text</RadioGroup.Option>\n        </RadioGroup>}\n\n      {enableQuestionCountSetting && <Select label=\"Number of questions\" onChange={context.setQuestionCountSetting} options={[1, 2, 5, 10].map(value => value.toString()).map(value => ({\n      label: value,\n      value\n    }))} value={context.questionCountSetting} />}\n    </Flex>;\n}\n_s(Settings, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\n_c = Settings;\nexport function AnswerMultipleChoiceButtons({\n  questionKey,\n  isCorrect,\n  options\n}) {\n  _s2();\n  const quizContext = useQuizContext();\n  const hasSelected = !!quizContext.hasAnswer;\n  const showCorrectState = !!questionKey;\n  return <div className=\"grid gap-2 grid-cols-2\">\n      {options.map(option => <button className={cn(\"rounded border border-solid border-slate-500 p-2\", option.key === questionKey && !isCorrect && hasSelected && showCorrectState && \"bg-green-400 text-white\", showCorrectState && option.key === quizContext.answer && isCorrect && \"bg-green-700 text-white\", showCorrectState && option.key === quizContext.answer && !isCorrect && \"bg-red-700 text-white\")} disabled={hasSelected} key={option.key} onClick={() => quizContext.changeAnswer?.(option.key)}>\n          {option.text}\n        </button>)}\n    </div>;\n}\n_s2(AnswerMultipleChoiceButtons, \"Wd2GdEunSwOA6L0piZdlRPYBdTo=\", false, function () {\n  return [useQuizContext];\n});\n_c2 = AnswerMultipleChoiceButtons;\nexport function AnswerText() {\n  _s3();\n  const [value, setValue] = React.useState(\"\");\n  const quizContext = useQuizContext();\n  return <>\n      <Flex gap={2}>\n        <Flex.Item grow={1}>\n          <Input onBlur={() => quizContext.changeAnswer?.(value)} onChange={e => setValue(e.target.value)} value={value} />\n        </Flex.Item>\n      </Flex>\n    </>;\n}\n_s3(AnswerText, \"eD1jibI4O4KvWxDfGV4KXSwmvag=\", false, function () {\n  return [useQuizContext];\n});\n_c3 = AnswerText;\nexport function NextBtn() {\n  _s4();\n  const context = useQuizContext();\n  return <Button onClick={() => {\n    context.nextQuestion?.();\n  }}>\n      {context.isFinalQuestion ? \"Finish\" : \"Next\"}\n    </Button>;\n}\n_s4(NextBtn, \"Pl8mufWNvzcdPtPpwfmoCTLttCM=\", false, function () {\n  return [useQuizContext];\n});\n_c4 = NextBtn;\nvar _c, _c2, _c3, _c4;\n$RefreshReg$(_c, \"Settings\");\n$RefreshReg$(_c2, \"AnswerMultipleChoiceButtons\");\n$RefreshReg$(_c3, \"AnswerText\");\n$RefreshReg$(_c4, \"NextBtn\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;", "import React from \"react\";\nimport { Label } from \"../primitives/label\";\nimport {\n  RadioGroup as RadioGroupPrimitive,\n  RadioGroupItem,\n} from \"../primitives/radio-group\";\nimport { FormElement } from \"./FormElement\";\nimport { Flex } from \"./flex\";\n\nexport function RadioGroup({\n  children,\n  label,\n  onChange,\n  value,\n}: {\n  children: React.ReactNode;\n  label?: string;\n  onChange: (value: string) => void;\n  value: string;\n}) {\n  return (\n    <FormElement label={label}>\n      <RadioGroupPrimitive onValueChange={onChange} value={value}>\n        {children}\n      </RadioGroupPrimitive>\n    </FormElement>\n  );\n}\n\nRadioGroup.Option = function RadioGroupOption({\n  children,\n  value,\n}: {\n  children: string;\n  value: string;\n}) {\n  const id = React.useId();\n  return (\n    <Flex gap={2}>\n      <RadioGroupItem value={value} id={id} />\n      <Label htmlFor={id}>{children}</Label>\n    </Flex>\n  );\n};\n", "import * as React from \"react\";\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\";\nimport { Circle } from \"lucide-react\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  );\n});\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName;\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className,\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  );\n});\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName;\n\nexport { RadioGroup, RadioGroupItem };\n", "export {\n  createRadioGroupScope,\n  //\n  RadioGroup,\n  RadioGroupItem,\n  RadioGroupIndicator,\n  //\n  Root,\n  Item,\n  Indicator,\n} from './RadioGroup';\nexport type { RadioGroupProps, RadioGroupItemProps, RadioGroupIndicatorProps } from './RadioGroup';\n", "import * as React from 'react';\nimport { composeEventHandlers } from '@radix-ui/primitive';\nimport { useComposedRefs } from '@radix-ui/react-compose-refs';\nimport { createContextScope } from '@radix-ui/react-context';\nimport { Primitive } from '@radix-ui/react-primitive';\nimport * as RovingFocusGroup from '@radix-ui/react-roving-focus';\nimport { createRovingFocusGroupScope } from '@radix-ui/react-roving-focus';\nimport { useControllableState } from '@radix-ui/react-use-controllable-state';\nimport { useDirection } from '@radix-ui/react-direction';\nimport { Radio, RadioIndicator, createRadioScope } from './Radio';\n\nimport type * as Radix from '@radix-ui/react-primitive';\nimport type { Scope } from '@radix-ui/react-context';\n\nconst ARROW_KEYS = ['ArrowUp', 'ArrowDown', 'ArrowLeft', 'ArrowRight'];\n\n/* -------------------------------------------------------------------------------------------------\n * RadioGroup\n * -----------------------------------------------------------------------------------------------*/\nconst RADIO_GROUP_NAME = 'RadioGroup';\n\ntype ScopedProps<P> = P & { __scopeRadioGroup?: Scope };\nconst [createRadioGroupContext, createRadioGroupScope] = createContextScope(RADIO_GROUP_NAME, [\n  createRovingFocusGroupScope,\n  createRadioScope,\n]);\nconst useRovingFocusGroupScope = createRovingFocusGroupScope();\nconst useRadioScope = createRadioScope();\n\ntype RadioGroupContextValue = {\n  name?: string;\n  required: boolean;\n  disabled: boolean;\n  value?: string;\n  onValueChange(value: string): void;\n};\n\nconst [RadioGroupProvider, useRadioGroupContext] =\n  createRadioGroupContext<RadioGroupContextValue>(RADIO_GROUP_NAME);\n\ntype RadioGroupElement = React.ElementRef<typeof Primitive.div>;\ntype RovingFocusGroupProps = Radix.ComponentPropsWithoutRef<typeof RovingFocusGroup.Root>;\ntype PrimitiveDivProps = Radix.ComponentPropsWithoutRef<typeof Primitive.div>;\ninterface RadioGroupProps extends PrimitiveDivProps {\n  name?: RadioGroupContextValue['name'];\n  required?: Radix.ComponentPropsWithoutRef<typeof Radio>['required'];\n  disabled?: Radix.ComponentPropsWithoutRef<typeof Radio>['disabled'];\n  dir?: RovingFocusGroupProps['dir'];\n  orientation?: RovingFocusGroupProps['orientation'];\n  loop?: RovingFocusGroupProps['loop'];\n  defaultValue?: string;\n  value?: RadioGroupContextValue['value'];\n  onValueChange?: RadioGroupContextValue['onValueChange'];\n}\n\nconst RadioGroup = React.forwardRef<RadioGroupElement, RadioGroupProps>(\n  (props: ScopedProps<RadioGroupProps>, forwardedRef) => {\n    const {\n      __scopeRadioGroup,\n      name,\n      defaultValue,\n      value: valueProp,\n      required = false,\n      disabled = false,\n      orientation,\n      dir,\n      loop = true,\n      onValueChange,\n      ...groupProps\n    } = props;\n    const rovingFocusGroupScope = useRovingFocusGroupScope(__scopeRadioGroup);\n    const direction = useDirection(dir);\n    const [value, setValue] = useControllableState({\n      prop: valueProp,\n      defaultProp: defaultValue,\n      onChange: onValueChange,\n    });\n\n    return (\n      <RadioGroupProvider\n        scope={__scopeRadioGroup}\n        name={name}\n        required={required}\n        disabled={disabled}\n        value={value}\n        onValueChange={setValue}\n      >\n        <RovingFocusGroup.Root\n          asChild\n          {...rovingFocusGroupScope}\n          orientation={orientation}\n          dir={direction}\n          loop={loop}\n        >\n          <Primitive.div\n            role=\"radiogroup\"\n            aria-required={required}\n            aria-orientation={orientation}\n            data-disabled={disabled ? '' : undefined}\n            dir={direction}\n            {...groupProps}\n            ref={forwardedRef}\n          />\n        </RovingFocusGroup.Root>\n      </RadioGroupProvider>\n    );\n  }\n);\n\nRadioGroup.displayName = RADIO_GROUP_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * RadioGroupItem\n * -----------------------------------------------------------------------------------------------*/\n\nconst ITEM_NAME = 'RadioGroupItem';\n\ntype RadioGroupItemElement = React.ElementRef<typeof Radio>;\ntype RadioProps = Radix.ComponentPropsWithoutRef<typeof Radio>;\ninterface RadioGroupItemProps extends Omit<RadioProps, 'onCheck' | 'name'> {\n  value: string;\n}\n\nconst RadioGroupItem = React.forwardRef<RadioGroupItemElement, RadioGroupItemProps>(\n  (props: ScopedProps<RadioGroupItemProps>, forwardedRef) => {\n    const { __scopeRadioGroup, disabled, ...itemProps } = props;\n    const context = useRadioGroupContext(ITEM_NAME, __scopeRadioGroup);\n    const isDisabled = context.disabled || disabled;\n    const rovingFocusGroupScope = useRovingFocusGroupScope(__scopeRadioGroup);\n    const radioScope = useRadioScope(__scopeRadioGroup);\n    const ref = React.useRef<React.ElementRef<typeof Radio>>(null);\n    const composedRefs = useComposedRefs(forwardedRef, ref);\n    const checked = context.value === itemProps.value;\n    const isArrowKeyPressedRef = React.useRef(false);\n\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (ARROW_KEYS.includes(event.key)) {\n          isArrowKeyPressedRef.current = true;\n        }\n      };\n      const handleKeyUp = () => (isArrowKeyPressedRef.current = false);\n      document.addEventListener('keydown', handleKeyDown);\n      document.addEventListener('keyup', handleKeyUp);\n      return () => {\n        document.removeEventListener('keydown', handleKeyDown);\n        document.removeEventListener('keyup', handleKeyUp);\n      };\n    }, []);\n\n    return (\n      <RovingFocusGroup.Item\n        asChild\n        {...rovingFocusGroupScope}\n        focusable={!isDisabled}\n        active={checked}\n      >\n        <Radio\n          disabled={isDisabled}\n          required={context.required}\n          checked={checked}\n          {...radioScope}\n          {...itemProps}\n          name={context.name}\n          ref={composedRefs}\n          onCheck={() => context.onValueChange(itemProps.value)}\n          onKeyDown={composeEventHandlers((event) => {\n            // According to WAI ARIA, radio groups don't activate items on enter keypress\n            if (event.key === 'Enter') event.preventDefault();\n          })}\n          onFocus={composeEventHandlers(itemProps.onFocus, () => {\n            /**\n             * Our `RovingFocusGroup` will focus the radio when navigating with arrow keys\n             * and we need to \"check\" it in that case. We click it to \"check\" it (instead\n             * of updating `context.value`) so that the radio change event fires.\n             */\n            if (isArrowKeyPressedRef.current) ref.current?.click();\n          })}\n        />\n      </RovingFocusGroup.Item>\n    );\n  }\n);\n\nRadioGroupItem.displayName = ITEM_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * RadioGroupIndicator\n * -----------------------------------------------------------------------------------------------*/\n\nconst INDICATOR_NAME = 'RadioGroupIndicator';\n\ntype RadioGroupIndicatorElement = React.ElementRef<typeof RadioIndicator>;\ntype RadioIndicatorProps = Radix.ComponentPropsWithoutRef<typeof RadioIndicator>;\ninterface RadioGroupIndicatorProps extends RadioIndicatorProps {}\n\nconst RadioGroupIndicator = React.forwardRef<RadioGroupIndicatorElement, RadioGroupIndicatorProps>(\n  (props: ScopedProps<RadioGroupIndicatorProps>, forwardedRef) => {\n    const { __scopeRadioGroup, ...indicatorProps } = props;\n    const radioScope = useRadioScope(__scopeRadioGroup);\n    return <RadioIndicator {...radioScope} {...indicatorProps} ref={forwardedRef} />;\n  }\n);\n\nRadioGroupIndicator.displayName = INDICATOR_NAME;\n\n/* ---------------------------------------------------------------------------------------------- */\n\nconst Root = RadioGroup;\nconst Item = RadioGroupItem;\nconst Indicator = RadioGroupIndicator;\n\nexport {\n  createRadioGroupScope,\n  //\n  RadioGroup,\n  RadioGroupItem,\n  RadioGroupIndicator,\n  //\n  Root,\n  Item,\n  Indicator,\n};\nexport type { RadioGroupProps, RadioGroupItemProps, RadioGroupIndicatorProps };\n", "import * as React from 'react';\nimport { composeEventHandlers } from '@radix-ui/primitive';\nimport { useComposedRefs } from '@radix-ui/react-compose-refs';\nimport { createContextScope } from '@radix-ui/react-context';\nimport { useSize } from '@radix-ui/react-use-size';\nimport { usePrevious } from '@radix-ui/react-use-previous';\nimport { Presence } from '@radix-ui/react-presence';\nimport { Primitive } from '@radix-ui/react-primitive';\n\nimport type * as Radix from '@radix-ui/react-primitive';\nimport type { Scope } from '@radix-ui/react-context';\n\n/* -------------------------------------------------------------------------------------------------\n * Radio\n * -----------------------------------------------------------------------------------------------*/\n\nconst RADIO_NAME = 'Radio';\n\ntype ScopedProps<P> = P & { __scopeRadio?: Scope };\nconst [createRadioContext, createRadioScope] = createContextScope(RADIO_NAME);\n\ntype RadioContextValue = { checked: boolean; disabled?: boolean };\nconst [RadioProvider, useRadioContext] = createRadioContext<RadioContextValue>(RADIO_NAME);\n\ntype RadioElement = React.ElementRef<typeof Primitive.button>;\ntype PrimitiveButtonProps = Radix.ComponentPropsWithoutRef<typeof Primitive.button>;\ninterface RadioProps extends PrimitiveButtonProps {\n  checked?: boolean;\n  required?: boolean;\n  onCheck?(): void;\n}\n\nconst Radio = React.forwardRef<RadioElement, RadioProps>(\n  (props: ScopedProps<RadioProps>, forwardedRef) => {\n    const {\n      __scopeRadio,\n      name,\n      checked = false,\n      required,\n      disabled,\n      value = 'on',\n      onCheck,\n      ...radioProps\n    } = props;\n    const [button, setButton] = React.useState<HTMLButtonElement | null>(null);\n    const composedRefs = useComposedRefs(forwardedRef, (node) => setButton(node));\n    const hasConsumerStoppedPropagationRef = React.useRef(false);\n    // We set this to true by default so that events bubble to forms without JS (SSR)\n    const isFormControl = button ? Boolean(button.closest('form')) : true;\n\n    return (\n      <RadioProvider scope={__scopeRadio} checked={checked} disabled={disabled}>\n        <Primitive.button\n          type=\"button\"\n          role=\"radio\"\n          aria-checked={checked}\n          data-state={getState(checked)}\n          data-disabled={disabled ? '' : undefined}\n          disabled={disabled}\n          value={value}\n          {...radioProps}\n          ref={composedRefs}\n          onClick={composeEventHandlers(props.onClick, (event) => {\n            // radios cannot be unchecked so we only communicate a checked state\n            if (!checked) onCheck?.();\n            if (isFormControl) {\n              hasConsumerStoppedPropagationRef.current = event.isPropagationStopped();\n              // if radio is in a form, stop propagation from the button so that we only propagate\n              // one click event (from the input). We propagate changes from an input so that native\n              // form validation works and form events reflect radio updates.\n              if (!hasConsumerStoppedPropagationRef.current) event.stopPropagation();\n            }\n          })}\n        />\n        {isFormControl && (\n          <BubbleInput\n            control={button}\n            bubbles={!hasConsumerStoppedPropagationRef.current}\n            name={name}\n            value={value}\n            checked={checked}\n            required={required}\n            disabled={disabled}\n            // We transform because the input is absolutely positioned but we have\n            // rendered it **after** the button. This pulls it back to sit on top\n            // of the button.\n            style={{ transform: 'translateX(-100%)' }}\n          />\n        )}\n      </RadioProvider>\n    );\n  }\n);\n\nRadio.displayName = RADIO_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * RadioIndicator\n * -----------------------------------------------------------------------------------------------*/\n\nconst INDICATOR_NAME = 'RadioIndicator';\n\ntype RadioIndicatorElement = React.ElementRef<typeof Primitive.span>;\ntype PrimitiveSpanProps = Radix.ComponentPropsWithoutRef<typeof Primitive.span>;\nexport interface RadioIndicatorProps extends PrimitiveSpanProps {\n  /**\n   * Used to force mounting when more control is needed. Useful when\n   * controlling animation with React animation libraries.\n   */\n  forceMount?: true;\n}\n\nconst RadioIndicator = React.forwardRef<RadioIndicatorElement, RadioIndicatorProps>(\n  (props: ScopedProps<RadioIndicatorProps>, forwardedRef) => {\n    const { __scopeRadio, forceMount, ...indicatorProps } = props;\n    const context = useRadioContext(INDICATOR_NAME, __scopeRadio);\n    return (\n      <Presence present={forceMount || context.checked}>\n        <Primitive.span\n          data-state={getState(context.checked)}\n          data-disabled={context.disabled ? '' : undefined}\n          {...indicatorProps}\n          ref={forwardedRef}\n        />\n      </Presence>\n    );\n  }\n);\n\nRadioIndicator.displayName = INDICATOR_NAME;\n\n/* ---------------------------------------------------------------------------------------------- */\n\ntype InputProps = Radix.ComponentPropsWithoutRef<'input'>;\ninterface BubbleInputProps extends Omit<InputProps, 'checked'> {\n  checked: boolean;\n  control: HTMLElement | null;\n  bubbles: boolean;\n}\n\nconst BubbleInput = (props: BubbleInputProps) => {\n  const { control, checked, bubbles = true, ...inputProps } = props;\n  const ref = React.useRef<HTMLInputElement>(null);\n  const prevChecked = usePrevious(checked);\n  const controlSize = useSize(control);\n\n  // Bubble checked change to parents (e.g form change event)\n  React.useEffect(() => {\n    const input = ref.current!;\n    const inputProto = window.HTMLInputElement.prototype;\n    const descriptor = Object.getOwnPropertyDescriptor(inputProto, 'checked') as PropertyDescriptor;\n    const setChecked = descriptor.set;\n    if (prevChecked !== checked && setChecked) {\n      const event = new Event('click', { bubbles });\n      setChecked.call(input, checked);\n      input.dispatchEvent(event);\n    }\n  }, [prevChecked, checked, bubbles]);\n\n  return (\n    <input\n      type=\"radio\"\n      aria-hidden\n      defaultChecked={checked}\n      {...inputProps}\n      tabIndex={-1}\n      ref={ref}\n      style={{\n        ...props.style,\n        ...controlSize,\n        position: 'absolute',\n        pointerEvents: 'none',\n        opacity: 0,\n        margin: 0,\n      }}\n    />\n  );\n};\n\nfunction getState(checked: boolean) {\n  return checked ? 'checked' : 'unchecked';\n}\n\nexport {\n  createRadioScope,\n  //\n  Radio,\n  RadioIndicator,\n};\nexport type { RadioProps };\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6BA,mBAAkB;AA4CE;AAxEpB,IAAI,CAAC,OAAO,gBAAgB,CAAC,OAAO,gBAAgB,CAAC,OAAO,kBAAkB;AAC5E,UAAQ,KAAK,kGAAkG;AACjH,OAAO;AACD,mBAAiB,OAAO;AACxB,mBAAiB,OAAO;AAC5B,SAAO,eAAe,CAAC,MAAM,OAAO;AAClC,WAAO,iBAAiB,SAAS,MAAM,uCAAyC,EAAE;AAAA,EACpF;AACA,SAAO,eAAe,OAAO,iBAAiB;AAChD;AANM;AACA;AAMN,IAAI,KAAK,aAAa;AAAtB,IACE,MAAM,aAAa;AADrB,IAEE,MAAM,aAAa;AAErB,IAAI,aAAa;AACf,cAAY,MAAc;AAAA;AAAA,IAE1B;AAAA,EAAkC;AAClC,cAAY,IAAI,eAAe;AACjC;AAUA,IAAM,cAAc,aAAAA,QAAM,cAAc;AAAA,EACtC,QAAQ;AAAA,EACR,cAAc,WAAS,QAAQ,IAAI,KAAK;AAAA,EACxC,WAAW;AAAA,EACX,iBAAiB;AAAA,EACjB,OAAO;AAAA,EACP,cAAc,MAAM,QAAQ,IAAI,gBAAgB;AAAA,EAChD,kBAAkB,MAAM,QAAQ,IAAI,oBAAoB;AAC1D,CAAC;AACM,SAAS,KAAK;AAAA,EACnB;AAAA,EACA;AAAA,EACA,oBAAoB;AAAA,EACpB;AACF,GAAG;AACD,KAAG;AACH,QAAM,CAAC,OAAO,QAAQ,IAAI,aAAAA,QAAM,SAAS,CAAC;AAC1C,QAAM,CAAC,eAAe,gBAAgB,IAAI,aAAAA,QAAM,SAAS,EAAE;AAC3D,QAAM,CAAC,SAAS,UAAU,IAAI,aAAAA,QAAM,SAAS,CAAC,CAAC;AAC/C,QAAM,aAAa,SAAS;AAC5B,SAAO,mDAAC,YAAY,UAAZ,EAAqB,OAAO;AAAA,IAClC,QAAQ;AAAA,IACR,WAAW,CAAC,CAAC;AAAA,IACb;AAAA,IACA,iBAAiB,UAAU,oBAAoB;AAAA,IAC/C,cAAc,MAAM;AAClB,YAAM,SAAS,qBAAqB,OAAO,aAAa;AACxD,UAAI,aAAa,CAAC;AAClB,UAAI,SAAS,QAAQ,QAAQ;AAC3B,qBAAa,CAAC,GAAG,SAAS,MAAM;AAAA,MAClC;AACA,iBAAW,KAAK,IAAI;AACpB,iBAAW,UAAU;AACrB,eAAS,QAAQ,CAAC;AAClB,uBAAiB,EAAE;AAAA,IACrB;AAAA,IACA,kBAAkB,MAAM;AACtB,eAAS,QAAQ,CAAC;AAClB,uBAAiB,EAAE;AAAA,IACrB;AAAA,IACA;AAAA,IACA,cAAc;AAAA,EAChB,GACK,uBAAa,mDAAC,iBAAc,SAAkB,WAAjC;AAAA;AAAA;AAAA;AAAA,SAAmD,IAAK,sFAAG,YAAH;AAAA;AAAA;AAAA;AAAA,SAAY,KAvB/E;AAAA;AAAA;AAAA;AAAA,SAwBL;AACJ;AACA,GAAG,MAAM,8BAA8B;AACvC,KAAK;AACL,KAAK,YAAY,IAAI,SAAS,cAAc;AAAA,EAC1C;AACF,GAAG;AACD,MAAI;AACJ,QAAM,UAAU,eAAe;AAC/B,QAAM,gBAAgB,aAAAA,QAAM,SAAS,QAAQ,QAAQ;AACrD,SAAO,cAAc,QAAQ,KAAK;AACpC,GAAG,gCAAgC,OAAO,WAAY;AACpD,SAAO,CAAC,cAAc;AACxB,CAAC;AACM,SAAS,iBAAiB;AAC/B,MAAI;AACJ,SAAO,aAAAA,QAAM,WAAW,WAAW;AACrC;AAGA,IAAI,gBAAgB,8BAA8B;AAClD,SAAS,cAAc;AAAA,EACrB;AAAA,EACA;AACF,GAAG;AACD,QAAM,aAAa,QAAQ,OAAO,YAAU,OAAO,SAAS,EAAE;AAC9D,SAAO,mDAAC,QAAK,WAAU,UAAS,KAAK,GACjC;AAAA,uDAAC,QAAK;AAAA;AAAA,MACS,mDAAC,OAAG,wBAAJ;AAAA;AAAA;AAAA;AAAA,aAAe;AAAA,MAAI;AAAA,MAAS,QAAQ;AAAA,MAAO;AAAA,SAD1D;AAAA;AAAA;AAAA;AAAA,WAGA;AAAA,IAEA;AAAA,MAAC;AAAA;AAAA,QAAa,SAAS,CAAC;AAAA,UACxB,aAAa;AAAA,UACb,QAAQ;AAAA,QACV,GAAG;AAAA,UACD,aAAa;AAAA;AAAA,UAEb,MAAM,CAAC,gBAAgB,QAAQ,mDAAC,QAAK,OAAM,UAAS,KAAK,GAC9C,cAAI,YAAY,sFACb;AAAA,+DAAC,gBAAiB,OAAM,WAAxB;AAAA;AAAA;AAAA;AAAA,mBAAgC;AAAA,YAChC,mDAAC,QAAK,IAAG,QAAO,QAAO,YACrB,6DAAC,OAAG,4BAAJ;AAAA;AAAA;AAAA;AAAA,mBAAmB,KADrB;AAAA;AAAA;AAAA;AAAA,mBAEA;AAAA,eAJa;AAAA;AAAA;AAAA;AAAA,iBAKf,IAAM,sFACJ;AAAA,+DAAC,WAAY,OAAM,SAAnB;AAAA;AAAA;AAAA;AAAA,mBAAyB;AAAA,YACzB,mDAAC,QAAK,WAAU,UAAS,KAAK,GAC5B;AAAA,iEAAC,QAAK;AAAA;AAAA,gBACY,mDAAC,OAAG,cAAI,iBAAR;AAAA;AAAA;AAAA;AAAA,uBAAsB;AAAA,mBADxC;AAAA;AAAA;AAAA;AAAA,qBAEA;AAAA,cACA,mDAAC,QAAK;AAAA;AAAA,gBACS;AAAA,gBACb,mDAAC,QAAK,IAAG,QAAO,QAAO,YACrB,6DAAC,OAAG,4BAAJ;AAAA;AAAA;AAAA;AAAA,uBAAmB,KADrB;AAAA;AAAA;AAAA;AAAA,uBAEA;AAAA,mBAJF;AAAA;AAAA;AAAA;AAAA,qBAKA;AAAA,iBATF;AAAA;AAAA;AAAA;AAAA,mBAUA;AAAA,eAZI;AAAA;AAAA;AAAA;AAAA,iBAaN,KAnBmB;AAAA;AAAA;AAAA;AAAA,iBAoBvB;AAAA,UACR,QAAQ;AAAA,QACV,CAAC;AAAA,QAED,MAAM;AAAA;AAAA,MA9BJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IA8Ba;AAAA,IAEb,mDAAC,OACC,6DAAC,UAAO,SAAS,SAAS,uBAA1B;AAAA;AAAA;AAAA;AAAA,WAAiC,KADnC;AAAA;AAAA;AAAA;AAAA,WAEA;AAAA,OAxCG;AAAA;AAAA;AAAA;AAAA,SAyCL;AACJ;AACA,MAAM;AACN,IAAI;AAAJ,IAAQ;AACR,aAAa,IAAI,MAAM;AACvB,aAAa,KAAK,eAAe;AAEjC,OAAO,eAAe;AACtB,OAAO,eAAe;;;AC1HtB,IAAAC,gBAAkB;;;AC3BlB,IAAAC,gBAAkB;;;ACAlB,IAAAC,SAAuB;;;;AGgBvB,IAAMC,mCAAa;AAGnB,IAAM,CAACC,0CAAoBC,yCAArB,IAAyCC,yCAAmBH,gCAAD;AAGjE,IAAM,CAACI,qCAAeC,qCAAhB,IAAmCJ,yCAAsCD,gCAApB;AAU3D,IAAMM,4CAAQC,kCAAAA,YACZ,CAACC,OAAgCC,iBAAiB;AAChD,QAAM,EAAA,cAAA,MAAA,UAGM,OAHN,UAAA,UAAA,QAMI,MANJ,SAQJ,GAAGC,WAAH,IACEF;AACJ,QAAM,CAACG,QAAQC,SAAT,QAAsBL,cAAAA,UAAyC,IAAzC;AAC5B,QAAMM,eAAeC;IAAgBL;IAAeM,CAAAA,SAASH,UAAUG,IAAD;EAAlC;AACpC,QAAMC,uCAAmCT,cAAAA,QAAa,KAAb;AAEzC,QAAMU,gBAAgBN,SAASO,QAAQP,OAAOQ,QAAQ,MAAf,CAAD,IAA2B;AAEjE,SACE,kCAAAC,eAAC,qCADH;IACiB,OAAOC;IAAc;IAAkB;KACpD,kCAAAD,eAAC,0CAAU,QADb,SAAA;IAEI,MAAK;IACL,MAAK;IACL,gBAAcE;IACd,cAAYC,+BAASD,OAAD;IACpB,iBAAeE,WAAW,KAAKC;IAC/B;IACA;KACIf,YARN;IASE,KAAKG;IACL,SAASa,0CAAqBlB,MAAMmB,SAAUC,CAAAA,UAAU;AAEtD,UAAI,CAACN;AAASO,oBAAO,QAAPA,YAAO,UAAPA,QAAO;AACrB,UAAIZ,eAAe;AACjBD,yCAAiCc,UAAUF,MAAMG,qBAAN;AAI3C,YAAI,CAACf,iCAAiCc;AAASF,gBAAMI,gBAAN;;KARtB;GAV/B,CAAA,GAsBCf,iBACC,kCAAAG,eAAC,mCAvBH;IAwBI,SAAST;IACT,SAAS,CAACK,iCAAiCc;IAC3C;IACA;IACA;IACA;IACA;IAIA,OAAO;MAAEG,WAAW;;GAXtB,CAxBJ;CAnBQ;AAoEd,IAAMC,uCAAiB;AAYvB,IAAMC,4CAAiBC,kCAAAA,YACrB,CAACC,OAAyCC,iBAAiB;AACzD,QAAM,EAAA,cAAA,YAA4B,GAAGC,eAAH,IAAsBF;AACxD,QAAMG,UAAUC,sCAAgBP,sCAAgBQ,YAAjB;AAC/B,SACE,kCAAAC,eAAC,2CADH;IACY,SAASC,cAAcJ,QAAQK;KACvC,kCAAAF,eAAC,0CAAU,MADb,SAAA;IAEI,cAAYG,+BAASN,QAAQK,OAAT;IACpB,iBAAeL,QAAQO,WAAW,KAAKC;KACnCT,gBAHN;IAIE,KAAKD;GAJP,CAAA,CADF;CALiB;AA4BvB,IAAMW,oCAAeC,CAAAA,UAA4B;AAC/C,QAAM,EAAA,SAAA,SAAA,UAA8B,MAAM,GAAGC,WAAH,IAAkBD;AAC5D,QAAME,UAAMC,cAAAA,QAA+B,IAA/B;AACZ,QAAMC,cAAcC,0CAAYC,OAAD;AAC/B,QAAMC,cAAcC,0CAAQC,OAAD;AAG3BN,oBAAAA,WAAgB,MAAM;AACpB,UAAMO,QAAQR,IAAIS;AAClB,UAAMC,aAAaC,OAAOC,iBAAiBC;AAC3C,UAAMC,aAAaC,OAAOC,yBAAyBN,YAAY,SAA5C;AACnB,UAAMO,aAAaH,WAAWI;AAC9B,QAAIhB,gBAAgBE,WAAWa,YAAY;AACzC,YAAME,QAAQ,IAAIC,MAAM,SAAS;;OAAnB;AACdH,iBAAWI,KAAKb,OAAOJ,OAAvB;AACAI,YAAMc,cAAcH,KAApB;;KAED;IAACjB;IAAaE;IAASmB;GAV1B;AAYA,SACE,kCAAAC,eADF,SAAA,SAAA;IAEI,MAAK;IACL,eAAA;IACA,gBAAgBpB;KACZL,YAJN;IAKE,UAAU;IACV;IACA,OAAO;MACL,GAAGD,MAAM2B;MACT,GAAGpB;MACHqB,UAAU;MACVC,eAAe;MACfC,SAAS;MACTC,QAAQ;;GAbZ,CAAA;;AAmBJ,SAASC,+BAAS1B,SAAkB;AAClC,SAAOA,UAAU,YAAY;;ADtK/B,IAAM2B,mCAAa;EAAC;EAAW;EAAa;EAAa;;AAKzD,IAAMC,yCAAmB;AAGzB,IAAM,CAACC,+CAAyBC,yCAA1B,IAAmDC,yCAAmBH,wCAAkB;EAC5FI;EACAC;CAFyE;AAI3E,IAAMC,iDAA2BF,yCAA2B;AAC5D,IAAMG,sCAAgBF,0CAAgB;AAUtC,IAAM,CAACG,0CAAoBC,0CAArB,IACJR,8CAAgDD,sCAAzB;AAiBzB,IAAMU,4CAAazC,kCAAAA,YACjB,CAACH,OAAqC6C,iBAAiB;AACrD,QAAM,EAAA,mBAAA,MAAA,cAIJC,OAAOC,WAJH,WAKO,OALP,WAMO,OANP,aAAA,KAAA,OASG,MATH,eAWJ,GAAGC,WAAH,IACEhD;AACJ,QAAMiD,wBAAwBT,+CAAyBU,iBAAD;AACtD,QAAMC,YAAYC,0CAAaC,GAAD;AAC9B,QAAM,CAACP,OAAOQ,QAAR,IAAoBC,yCAAqB;IAC7CC,MAAMT;IACNU,aAAaC;IACbC,UAAUC;GAHkC;AAM9C,SACE,kCAAAlC,eAAC,0CADH;IAEI,OAAOwB;IACP;IACA;IACA;IACA;IACA,eAAeI;KAEf,kCAAA5B,eAAC,2CARH,SAAA;IASI,SAAA;KACIuB,uBAFN;IAGE;IACA,KAAKE;IACL;GALF,GAOE,kCAAAzB,eAAC,0CAAU,KAPb,SAAA;IAQI,MAAK;IACL,iBAAemC;IACf,oBAAkBC;IAClB,iBAAeC,WAAW,KAAKC;IAC/B,KAAKb;KACDH,YANN;IAOE,KAAKH;GAPP,CAAA,CAPF,CARF;CAxBa;AA4DnB,IAAMoB,kCAAY;AAQlB,IAAMC,4CAAiBC,kCAAAA,YACrB,CAACC,OAAyCC,iBAAiB;AACzD,QAAM,EAAA,mBAAA,UAA+B,GAAGC,UAAH,IAAiBF;AACtD,QAAMG,UAAUC,2CAAqBP,iCAAWQ,iBAAZ;AACpC,QAAMC,aAAaH,QAAQI,YAAYA;AACvC,QAAMC,wBAAwBC,+CAAyBJ,iBAAD;AACtD,QAAMK,aAAaC,oCAAcN,iBAAD;AAChC,QAAMO,UAAMb,cAAAA,QAA6C,IAA7C;AACZ,QAAMc,eAAeC,0CAAgBb,cAAcW,GAAf;AACpC,QAAMG,UAAUZ,QAAQa,UAAUd,UAAUc;AAC5C,QAAMC,2BAAuBlB,cAAAA,QAAa,KAAb;AAE7BA,oBAAAA,WAAgB,MAAM;AACpB,UAAMmB,gBAAiBC,CAAAA,UAAyB;AAC9C,UAAIC,iCAAWC,SAASF,MAAMG,GAA1B;AACFL,6BAAqBM,UAAU;;AAGnC,UAAMC,cAAc,MAAOP,qBAAqBM,UAAU;AAC1DE,aAASC,iBAAiB,WAAWR,aAArC;AACAO,aAASC,iBAAiB,SAASF,WAAnC;AACA,WAAO,MAAM;AACXC,eAASE,oBAAoB,WAAWT,aAAxC;AACAO,eAASE,oBAAoB,SAASH,WAAtC;;KAED,CAAA,CAbH;AAeA,SACE,kCAAAI,eAAC,2CADH,SAAA;IAEI,SAAA;KACIpB,uBAFN;IAGE,WAAW,CAACF;IACZ,QAAQS;GAJV,GAME,kCAAAa,eAAC,2CANH,SAAA;IAOI,UAAUtB;IACV,UAAUH,QAAQ0B;IAClB;KACInB,YACAR,WALN;IAME,MAAMC,QAAQ2B;IACd,KAAKjB;IACL,SAAS,MAAMV,QAAQ4B,cAAc7B,UAAUc,KAAhC;IACf,WAAWgB,0CAAsBb,CAAAA,UAAU;AAEzC,UAAIA,MAAMG,QAAQ;AAASH,cAAMc,eAAN;KAFE;IAI/B,SAASD,0CAAqB9B,UAAUgC,SAAS,MAAM;AAAA,UAAA;AAMrD,UAAIjB,qBAAqBM;AAAS,SAAA,eAAAX,IAAIW,aAAJ,QAAA,iBAAA,UAAA,aAAaY,MAAb;KANP;GAb/B,CAAA,CANF;CA5BiB;AAyEvB,IAAMC,2CAAsBC,kCAAAA,YAC1B,CAACC,OAA8CC,iBAAiB;AAC9D,QAAM,EAAA,mBAAqB,GAAGC,eAAH,IAAsBF;AACjD,QAAMG,aAAaC,oCAAcC,iBAAD;AAChC,SAAO,kCAAAC,eAAC,2CAAD,SAAA,CAAA,GAAoBH,YAAgBD,gBAA3C;IAA2D,KAAKD;GAAzD,CAAA;CAJiB;AAY5B,IAAMM,4CAAOC;AACb,IAAMC,4CAAOC;AACb,IAAMC,4CAAYC;;;AFvMd,IAAAC,0BAAA;AALJ,IAAM,aAAmB,kBAGvB,CAAC,EAAE,WAAW,GAAG,MAAM,GAAG,QAAQ;AAClC,SACE;AAAA,IAAqB;AAAA,IAApB;AAAA,MACC,WAAW,GAAG,cAAc,SAAS;AAAA,MACpC,GAAG;AAAA,MACJ;AAAA;AAAA,IAHF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAIA;AAEJ,CAAC;AACD,WAAW,cAAkC,0CAAK;AAElD,IAAM,iBAAuB,kBAG3B,CAAC,EAAE,WAAW,GAAG,MAAM,GAAG,QAAQ;AAClC,SACE;AAAA,IAAqB;AAAA,IAApB;AAAA,MACC;AAAA,MACA,WAAW;AAAA,QACT;AAAA,QACA;AAAA,MACF;AAAA,MACC,GAAG;AAAA,MAEJ,8DAAqB,2CAApB,EAA8B,WAAU,oCACvC,8DAAC,UAAO,WAAU,2CAAlB;AAAA;AAAA;AAAA;AAAA,aAA0D,KAD5D;AAAA;AAAA;AAAA;AAAA,aAEA;AAAA;AAAA,IAVF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAWA;AAEJ,CAAC;AACD,eAAe,cAAkC,0CAAK;;;ADjBhD,IAAAC,0BAAA;AAbC,SAASC,YAAW;AAAA,EACzB;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACF,GAKG;AACD,SACE,oDAAC,eAAY,OACX,8DAAC,cAAoB,eAAe,UAAU,OAC3C,YADH;AAAA;AAAA;AAAA;AAAA,SAEA,KAHF;AAAA;AAAA;AAAA;AAAA,SAIA;AAEJ;AAEAA,YAAW,SAAS,SAAS,iBAAiB;AAAA,EAC5C;AAAA,EACA;AACF,GAGG;AACD,QAAM,KAAK,cAAAC,QAAM,MAAM;AACvB,SACE,oDAAC,QAAK,KAAK,GACT;AAAA,wDAAC,kBAAe,OAAc,MAA9B;AAAA;AAAA;AAAA;AAAA,WAAsC;AAAA,IACtC,oDAAC,SAAM,SAAS,IAAK,YAArB;AAAA;AAAA;AAAA;AAAA,WAA8B;AAAA,OAFhC;AAAA;AAAA;AAAA;AAAA,SAGA;AAEJ;;;ADOU,IAAAC,0BAAA;AAjDV,IAAI,CAAC,OAAO,gBAAgB,CAAC,OAAO,gBAAgB,CAAC,OAAO,kBAAkB;AAC5E,UAAQ,KAAK,kGAAkG;AACjH,OAAO;AACD,mBAAiB,OAAO;AACxB,mBAAiB,OAAO;AAC5B,SAAO,eAAe,CAAC,MAAM,OAAO;AAClC,WAAO,iBAAiB,SAAS,MAAM,gDAAkD,EAAE;AAAA,EAC7F;AACA,SAAO,eAAe,OAAO,iBAAiB;AAChD;AANM;AACA;AAMN,IAAIC,MAAK,aAAa;AAAtB,IACEC,OAAM,aAAa;AADrB,IAEEC,OAAM,aAAa;AAFrB,IAGEC,OAAM,aAAa;AAErB,IAAI,aAAa;AACf,cAAY,MAAc;AAAA;AAAA,IAE1B;AAAA,EAA2C;AAC3C,cAAY,IAAI,eAAe;AACjC;AAWO,IAAM,uBAAuB,cAAAC,QAAM,cAAc,IAAI;AACrD,SAAS,SAAS;AAAA,EACvB,wBAAwB;AAAA,EACxB,0BAA0B;AAAA,EAC1B,6BAA6B;AAC/B,GAAG;AACD,EAAAJ,IAAG;AACH,QAAM,UAAU,cAAAI,QAAM,WAAW,oBAAoB;AACrD,MAAI,CAAC,SAAS;AACZ,UAAM,IAAI,MAAM,+BAA+B;AAAA,EACjD;AACA,SAAO,oDAAC,QAAK,OAAO;AAAA,IAClB,IAAI;AAAA,EACN,GAAG,WAAW;AAAA,IACZ,IAAI;AAAA,IACJ,IAAI;AAAA,EACN,GAAG,KAAK,GACH;AAAA,6BAAyB,oDAACC,aAAA,EAAW,OAAM,aAAY,UAAU,QAAQ,oBAAoB,OAAO,QAAQ,iBACzG;AAAA,0DAACA,YAAW,QAAX,EAAkB,OAAM,MAAK,iCAA9B;AAAA;AAAA;AAAA;AAAA,aAA+C;AAAA,MAC/C,oDAACA,YAAW,QAAX,EAAkB,OAAM,MAAK,iCAA9B;AAAA;AAAA;AAAA;AAAA,aAA+C;AAAA,MAC/C,oDAACA,YAAW,QAAX,EAAkB,OAAM,QAAO,oBAAhC;AAAA;AAAA;AAAA;AAAA,aAAoC;AAAA,SAHd;AAAA;AAAA;AAAA;AAAA,WAIxB;AAAA,IAED,2BAA2B,oDAACA,aAAA,EAAW,OAAM,eAAc,UAAU,QAAQ,kBAAkB,OAAO,QAAQ,eAC3G;AAAA,0DAACA,YAAW,QAAX,EAAkB,OAAM,kBAAiB,+BAA1C;AAAA;AAAA;AAAA;AAAA,aAEA;AAAA,MACA,oDAACA,YAAW,QAAX,EAAkB,OAAM,QAAO,oBAAhC;AAAA;AAAA;AAAA;AAAA,aAAoC;AAAA,SAJZ;AAAA;AAAA;AAAA;AAAA,WAK1B;AAAA,IAED,8BAA8B,oDAAC,UAAO,OAAM,uBAAsB,UAAU,QAAQ,yBAAyB,SAAS,CAAC,GAAG,GAAG,GAAG,EAAE,EAAE,IAAI,WAAS,MAAM,SAAS,CAAC,EAAE,IAAI,YAAU;AAAA,MAClL,OAAO;AAAA,MACP;AAAA,IACF,EAAE,GAAG,OAAO,QAAQ,wBAHa;AAAA;AAAA;AAAA;AAAA,WAGS;AAAA,OAtBrC;AAAA;AAAA;AAAA;AAAA,SAuBL;AACJ;AACAL,IAAG,UAAU,8BAA8B;AAC3CM,MAAK;AACE,SAAS,4BAA4B;AAAA,EAC1C;AAAA,EACA;AAAA,EACA;AACF,GAAG;AACD,EAAAL,KAAI;AACJ,QAAM,cAAc,eAAe;AACnC,QAAM,cAAc,CAAC,CAAC,YAAY;AAClC,QAAM,mBAAmB,CAAC,CAAC;AAC3B,SAAO,oDAAC,SAAI,WAAU,0BACjB,kBAAQ,IAAI,YAAU,oDAAC,YAAO,WAAW,GAAG,oDAAoD,OAAO,QAAQ,eAAe,CAAC,aAAa,eAAe,oBAAoB,2BAA2B,oBAAoB,OAAO,QAAQ,YAAY,UAAU,aAAa,2BAA2B,oBAAoB,OAAO,QAAQ,YAAY,UAAU,CAAC,aAAa,uBAAuB,GAAG,UAAU,aAA8B,SAAS,MAAM,YAAY,eAAe,OAAO,GAAG,GACpe,iBAAO,QAD6Z,OAAO,KAAzZ;AAAA;AAAA;AAAA;AAAA,SAErB,CAAS,KAHR;AAAA;AAAA;AAAA;AAAA,SAIL;AACJ;AACAA,KAAI,6BAA6B,gCAAgC,OAAO,WAAY;AAClF,SAAO,CAAC,cAAc;AACxB,CAAC;AACDM,OAAM;AACC,SAAS,aAAa;AAC3B,EAAAL,KAAI;AACJ,QAAM,CAAC,OAAO,QAAQ,IAAI,cAAAE,QAAM,SAAS,EAAE;AAC3C,QAAM,cAAc,eAAe;AACnC,SAAO,wFACH,8DAAC,QAAK,KAAK,GACT,8DAAC,KAAK,MAAL,EAAU,MAAM,GACf,8DAAC,SAAM,QAAQ,MAAM,YAAY,eAAe,KAAK,GAAG,UAAU,OAAK,SAAS,EAAE,OAAO,KAAK,GAAG,SAAjG;AAAA;AAAA;AAAA;AAAA,SAA+G,KADjH;AAAA;AAAA;AAAA;AAAA,SAEA,KAHF;AAAA;AAAA;AAAA;AAAA,SAIA,KALG;AAAA;AAAA;AAAA;AAAA,SAML;AACJ;AACAF,KAAI,YAAY,gCAAgC,OAAO,WAAY;AACjE,SAAO,CAAC,cAAc;AACxB,CAAC;AACDM,OAAM;AACC,SAAS,UAAU;AACxB,EAAAL,KAAI;AACJ,QAAM,UAAU,eAAe;AAC/B,SAAO,oDAAC,UAAO,SAAS,MAAM;AAC5B,YAAQ,eAAe;AAAA,EACzB,GACK,kBAAQ,kBAAkB,WAAW,UAHnC;AAAA;AAAA;AAAA;AAAA,SAIL;AACJ;AACAA,KAAI,SAAS,gCAAgC,OAAO,WAAY;AAC9D,SAAO,CAAC,cAAc;AACxB,CAAC;AACD,MAAM;AACN,IAAIG;AAAJ,IAAQC;AAAR,IAAaC;AAAb,IAAkB;AAClB,aAAaF,KAAI,UAAU;AAC3B,aAAaC,MAAK,6BAA6B;AAC/C,aAAaC,MAAK,YAAY;AAC9B,aAAa,KAAK,SAAS;AAE3B,OAAO,eAAe;AACtB,OAAO,eAAe;",
  "names": ["React", "import_react", "import_react", "React", "RADIO_NAME", "createRadioContext", "createRadioScope", "createContextScope", "RadioProvider", "useRadioContext", "Radio", "React", "props", "forwardedRef", "radioProps", "button", "setButton", "composedRefs", "useComposedRefs", "node", "hasConsumerStoppedPropagationRef", "isFormControl", "Boolean", "closest", "$8Wolv$createElement", "__scopeRadio", "checked", "getState", "disabled", "undefined", "composeEventHandlers", "onClick", "event", "onCheck", "current", "isPropagationStopped", "stopPropagation", "transform", "INDICATOR_NAME", "RadioIndicator", "React", "props", "forwardedRef", "indicatorProps", "context", "useRadioContext", "__scopeRadio", "$8Wolv$createElement", "forceMount", "checked", "getState", "disabled", "undefined", "BubbleInput", "props", "inputProps", "ref", "React", "prevChecked", "usePrevious", "checked", "controlSize", "useSize", "control", "input", "current", "inputProto", "window", "HTMLInputElement", "prototype", "descriptor", "Object", "getOwnPropertyDescriptor", "setChecked", "set", "event", "Event", "call", "dispatchEvent", "bubbles", "$8Wolv$createElement", "style", "position", "pointerEvents", "opacity", "margin", "getState", "ARROW_KEYS", "RADIO_GROUP_NAME", "createRadioGroupContext", "createRadioGroupScope", "createContextScope", "createRovingFocusGroupScope", "createRadioScope", "useRovingFocusGroupScope", "useRadioScope", "RadioGroupProvider", "useRadioGroupContext", "RadioGroup", "forwardedRef", "value", "valueProp", "groupProps", "rovingFocusGroupScope", "__scopeRadioGroup", "direction", "useDirection", "dir", "setValue", "useControllableState", "prop", "defaultProp", "defaultValue", "onChange", "onValueChange", "required", "orientation", "disabled", "undefined", "ITEM_NAME", "RadioGroupItem", "React", "props", "forwardedRef", "itemProps", "context", "useRadioGroupContext", "__scopeRadioGroup", "isDisabled", "disabled", "rovingFocusGroupScope", "useRovingFocusGroupScope", "radioScope", "useRadioScope", "ref", "composedRefs", "useComposedRefs", "checked", "value", "isArrowKeyPressedRef", "handleKeyDown", "event", "ARROW_KEYS", "includes", "key", "current", "handleKeyUp", "document", "addEventListener", "removeEventListener", "$8Wolv$createElement", "required", "name", "onValueChange", "composeEventHandlers", "preventDefault", "onFocus", "click", "RadioGroupIndicator", "React", "props", "forwardedRef", "indicatorProps", "radioScope", "useRadioScope", "__scopeRadioGroup", "$8Wolv$createElement", "Root", "RadioGroup", "Item", "RadioGroupItem", "Indicator", "RadioGroupIndicator", "import_jsx_dev_runtime", "import_jsx_dev_runtime", "RadioGroup", "React", "import_jsx_dev_runtime", "_s", "_s2", "_s3", "_s4", "React", "RadioGroup", "_c", "_c2", "_c3"]
}
