{
  "version": 3,
  "sources": ["../../../app/components/practice/TableAsForm.tsx"],
  "sourcesContent": ["// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app/components/practice/TableAsForm.tsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nvar _s = $RefreshSig$();\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app/components/practice/TableAsForm.tsx\");\n  import.meta.hot.lastModified = \"1718240764405.708\";\n}\n// REMIX HMR END\n\nimport { Flex } from \"@/design/components/flex\";\nimport { Notice } from \"@/design/components/notice\";\nimport { TableWrapper } from \"@/design/components/tableWrapper\";\nimport { Button } from \"@/design/primitives/button\";\nimport { Form, FormControl, FormField, FormItem, FormMessage } from \"@/design/primitives/form\";\nimport { Input } from \"@/design/primitives/input\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { sanitizeIrregularCharacters, standardizeCharacters } from \"~/utils/words\";\nexport function TableAsForm({\n  bleed = {\n    xs: 0,\n    md: 16,\n    lg: 32\n  },\n  checkCorrectness,\n  formSchema,\n  rows\n}) {\n  _s();\n  const [isCorrect, setIsCorrect] = useState(false);\n  const [correctness, setCorrectness] = useState({});\n  const form = useForm({\n    defaultValues: {},\n    resolver: zodResolver(formSchema)\n  });\n  const onSubmit = values => {\n    let hasErrors = false;\n    const correctnessResult = {};\n    for (const key in values) {\n      const value = values[key];\n      const result = checkCorrectness(key, value);\n      if (result) {\n        hasErrors = true;\n        form.setError(key, {\n          message: typeof result === \"string\" ? result : \"Incorrect answer.\",\n          type: \"custom\"\n        });\n      }\n      correctnessResult[key] = !result;\n    }\n    setIsCorrect(!hasErrors);\n    setCorrectness(correctnessResult);\n  };\n  return <Form {...form}>\n      <form onSubmit={form.handleSubmit(onSubmit)}>\n        <Flex direction=\"column\" gap={4}>\n          <TableWrapper bleed={bleed} columns={[{\n          accessorKey: \"en\",\n          cell: TableWrapper.textArrayCellBold,\n          header: \"Question\"\n        }, {\n          accessorKey: \"key\",\n          // @ts-expect-error TODO\n          cell: (key, row) => <FormField control={form.control} name={key} render={({\n            field\n          }) => <FormItem>\n                        <FormControl>\n                          <Input autoComplete=\"off\" className={!(key in correctness) ? undefined : correctness[key] ? \"border-green-600\" : \"border-red-600\"} placeholder=\"Type here...\" {...field} value={field.value ?? \"\"} />\n                        </FormControl>\n\n                        {correctness[key] ? <FormMessage className=\"text-green-600\">\n                            Answer: {row.on}\n                          </FormMessage> : <FormMessage />}\n                      </FormItem>} />,\n          header: \"Answer\"\n        }]} data={rows} />\n\n          {form.formState.submitCount > 0 && <Notice intent={isCorrect ? \"positive\" : \"negative\"}>\n              {isCorrect ? \"Good job! You answered each prompt correctly.\" : \"There were some mistakes with your answers. Scroll up to take a look.\"}\n            </Notice>}\n\n          <Flex justify=\"end\">\n            <Button type=\"submit\">Submit</Button>\n          </Flex>\n        </Flex>\n      </form>\n    </Form>;\n}\n_s(TableAsForm, \"A/fEOMfXyv2nX6lOkagE9abvP0A=\", false, function () {\n  return [useForm];\n});\n_c = TableAsForm;\nTableAsForm.defaultCheckCorrectness = function defaultCheckCorrectness({\n  key,\n  rows,\n  val\n}) {\n  const obj = rows.find(r => r.key === key);\n  if (obj) {\n    if (!val || sanitizeIrregularCharacters(standardizeCharacters(val)) !== sanitizeIrregularCharacters(obj.on)) {\n      return `Answer: ${obj.on}`;\n    }\n  }\n};\nvar _c;\n$RefreshReg$(_c, \"TableAsForm\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;"],
  "mappings": "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",
  "names": []
}
