{
  "version": 3,
  "sources": ["../../../@/utils/TextArray.tsx", "../../../@/design/components/tableWrapper.tsx"],
  "sourcesContent": ["import React from \"react\";\nimport { Text, TextProps } from \"../design/components/text\";\n\nexport function TextArray({\n  bold,\n  children,\n  ...props\n}: TextProps & {\n  bold?: boolean;\n}) {\n  const WrapperTag = bold ? \"b\" : React.Fragment;\n  if (!Array.isArray(children)) {\n    return (\n      <Text {...props}>\n        <WrapperTag>{children}</WrapperTag>\n      </Text>\n    );\n  }\n  return children.map((child, i) => (\n    <Text {...props} key={i}>\n      <WrapperTag>{child}</WrapperTag>\n    </Text>\n  ));\n}\n", "import { TextArray } from \"@/utils/TextArray\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"../primitives/table\";\nimport {\n  BreakdownArray,\n  BreakdownType,\n  TextBreakdown,\n  TextBreakdownSuffix,\n} from \"~/components/TextBreakdown\";\nimport { PRONOUN_MAP_EN, PRONOUN_MAP_ONEIDA, Pronoun } from \"~/utils\";\nimport { Text } from \"./text\";\nimport { Flex } from \"./flex\";\nimport { Bleed, BleedProps } from \"./Bleed\";\n\ntype Row = Record<string, unknown>;\n\nexport interface TableWrapperProps {\n  bleed?: BleedProps[\"mx\"];\n  columns: Array<{\n    accessorKey: string;\n    cell?: (value?: unknown, row?: Row) => React.ReactNode;\n    header: React.ReactNode;\n    key?: string;\n  }>;\n  data: Array<Row>;\n}\n\nexport function TableWrapper({\n  bleed = {\n    xs: 0,\n    md: 16,\n    lg: 32,\n  },\n  columns,\n  data,\n}: TableWrapperProps) {\n  const hasHeader = !!columns.find((col) => !!col.header);\n\n  return (\n    <Bleed mx={bleed}>\n      <Table>\n        {hasHeader && (\n          <TableHeader>\n            <TableRow>\n              {columns.map((c) => (\n                <TableHead key={c.key ?? c.accessorKey}>{c.header}</TableHead>\n              ))}\n            </TableRow>\n          </TableHeader>\n        )}\n        <TableBody>\n          {data.map((row, i) => (\n            <TableRow key={i}>\n              {columns.map((c, j) => (\n                <TableCell key={`${i}-${j}`}>\n                  {c.cell\n                    ? c.cell(row[c.accessorKey], row)\n                    : (row[c.accessorKey] as React.ReactNode)}\n                </TableCell>\n              ))}\n            </TableRow>\n          ))}\n        </TableBody>\n      </Table>\n    </Bleed>\n  );\n}\n\nTableWrapper.textArrayCell = (value: any) => (\n  <Flex direction=\"column\">\n    <TextArray>{value}</TextArray>\n  </Flex>\n);\nTableWrapper.textArrayCellBold = (value: any) => (\n  <Flex direction=\"column\">\n    <TextArray bold>{value}</TextArray>\n  </Flex>\n);\n\nconst EnglishCol = {\n  accessorKey: \"en\",\n  cell: TableWrapper.textArrayCell,\n  header: \"English\",\n};\n\ninterface OneidaColOptions {\n  accessorKey?: string;\n  header?: string;\n}\n\nconst createOneidaCol = (\n  typeFallback?: BreakdownType,\n  options: OneidaColOptions = {},\n) => ({\n  accessorKey: options.accessorKey ?? \"breakdown\",\n  cell: (value: BreakdownArray) => (\n    <TextBreakdown\n      breakdown={value}\n      typeFallback={typeFallback}\n      wrap=\"nowrap\"\n    />\n  ),\n  header: options.header ?? \"Translation\",\n});\n\nconst pronounColumns: TableWrapperProps[\"columns\"] = [\n  {\n    accessorKey: \"pronoun\",\n    // @ts-expect-error To be addressed in LO-12\n    cell: (value: Pronoun) => <Text>{PRONOUN_MAP_EN[value]}</Text>,\n    header: \"Pronoun (en)\",\n    key: \"pronoun_en\",\n  },\n  {\n    accessorKey: \"pronoun\",\n    // @ts-expect-error To be addressed in LO-12\n    cell: (value: Pronoun) => <Text>{PRONOUN_MAP_ONEIDA[value]}</Text>,\n    header: \"Pronoun (one)\",\n    key: \"pronoun_one\",\n  },\n];\n\nconst columnsParadigmRed: TableWrapperProps[\"columns\"] = [\n  EnglishCol,\n  // @ts-expect-error To be addressed in LO-12\n  createOneidaCol(\"PR\"),\n];\nconst columnsParadigmBlue: TableWrapperProps[\"columns\"] = [\n  EnglishCol,\n  // @ts-expect-error To be addressed in LO-12\n  createOneidaCol(\"PB\"),\n];\nconst columnsParadigmPurple: TableWrapperProps[\"columns\"] = [\n  EnglishCol,\n  // @ts-expect-error To be addressed in LO-12\n  createOneidaCol(\"PP\"),\n];\nconst columnsEnglishOneida: TableWrapperProps[\"columns\"] = [\n  EnglishCol,\n  {\n    accessorKey: \"on\",\n    cell: TableWrapper.textArrayCellBold,\n    header: \"Translation\",\n  },\n];\nconst columnsEnglishBreakdown: TableWrapperProps[\"columns\"] = [\n  EnglishCol,\n  {\n    accessorKey: \"breakdown\",\n    // @ts-expect-error TODO\n    cell: (value: BreakdownArray) => (\n      <TextBreakdown breakdown={value} wrap=\"nowrap\" />\n    ),\n    header: \"Translation\",\n  },\n];\n\ninterface CreatePastTenseColumnsOptions {\n  headerNow?: string;\n  headerPast?: string;\n  suffix?: TextBreakdownSuffix;\n}\n\nconst createPastTenseColumns = (\n  typeFallback: BreakdownType,\n  opts: CreatePastTenseColumnsOptions = {},\n) => [\n  ...TableWrapper.columnsPronouns,\n  {\n    accessorKey: \"breakdown\",\n    cell: (value: BreakdownArray) => (\n      <TextBreakdown breakdown={value} typeFallback={typeFallback} />\n    ),\n    header: opts?.headerNow ?? \"Now\",\n  },\n  {\n    accessorKey: \"breakdownPast\",\n    cell: (value: BreakdownArray) => (\n      <TextBreakdown\n        breakdown={value}\n        suffix={opts.suffix}\n        typeFallback={typeFallback}\n      />\n    ),\n    header: opts?.headerPast ?? \"Used to be\",\n  },\n];\n\nTableWrapper.columnsParadigmRed = columnsParadigmRed;\nTableWrapper.columnsParadigmBlue = columnsParadigmBlue;\nTableWrapper.columnsParadigmPurple = columnsParadigmPurple;\nTableWrapper.columnsEnglishOneida = columnsEnglishOneida;\nTableWrapper.columnsEnglishBreakdown = columnsEnglishBreakdown;\nTableWrapper.columnsPronouns = pronounColumns;\nTableWrapper.createTextBreakdownColumn = createOneidaCol;\nTableWrapper.englishColumn = EnglishCol;\nTableWrapper.createPastTenseColumns = createPastTenseColumns;\n\ntype MapperArgs = unknown | unknown[];\nTableWrapper.mapLeftRight = ([left, right]: MapperArgs[]) => ({ left, right });\nTableWrapper.mapEnglishOneida = ([en, on]: MapperArgs[]) => ({ en, on });\n"],
  "mappings": "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",
  "names": ["import_react", "React", "import_jsx_dev_runtime"]
}
