{
  "version": 3,
  "sources": ["../../../app/routes/practice.verb-lists.tsx"],
  "sourcesContent": ["// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app/routes/practice.verb-lists.tsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nvar _s = $RefreshSig$();\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app/routes/practice.verb-lists.tsx\");\n  import.meta.hot.lastModified = \"1718241431872.5798\";\n}\n// REMIX HMR END\n\nimport { Flex } from \"@/design/components/flex\";\nimport React, { useMemo, useState } from \"react\";\nimport { Text } from \"@/design/components/text\";\nimport { Select } from \"@/design/components/select\";\nimport { Button } from \"@/design/primitives/button\";\nimport { PRONOUN_MAP_EN, PRONOUN_MAP_ONEIDA, pronouns, translatePhrase } from \"~/utils\";\nimport { MODULE_6_VERB_TENSE_LIST, createModule6VerbList, module6VerbTenseMap, getPronounsForModule6Verb } from \"~/data/module06/activeVerbsList\";\nimport { MODULE_5_VERB_TENSE_LIST, createModule5VerbsList, module5VerbTenseMap } from \"~/data/module05\";\nimport { SectionHeading } from \"~/components/SectionHeading\";\nimport { MODULE_4_TENSE_LIST, createModule4Data } from \"~/data/module04\";\nimport { TableAsForm } from \"~/components/practice/TableAsForm\";\nimport { z } from \"zod\";\nexport const meta = () => {\n  return [{\n    title: \"Practice Lists of Verbs\"\n  }, {\n    name: \"description\",\n    content: \"Practice your knowledge of verbs in the Oneida language.\"\n  }];\n};\nconst tenseMap = {\n  ...module5VerbTenseMap,\n  ...module6VerbTenseMap\n};\nexport default function PracticeTenseConjugation() {\n  _s();\n  const [selectedVerbList, setSelectedVerbList] = React.useState(\"m6\");\n  const [selectedPronoun, setSelectedPronoun] = React.useState(\"i\");\n  const [selectedTense, setSelectedTense] = React.useState(\"hab\");\n  const [hasStarted, setHasStarted] = useState(false);\n  const tenseOptions = useMemo(() => {\n    return (selectedVerbList === \"m4\" ? MODULE_4_TENSE_LIST : selectedVerbList === \"m5\" ? MODULE_5_VERB_TENSE_LIST : selectedVerbList === \"m6\" ? MODULE_6_VERB_TENSE_LIST : []).map(t => ({\n      label: tenseMap[t],\n      value: t\n    }));\n  }, [selectedVerbList]);\n  const pronounsOptions = useMemo(() => {\n    let result = [];\n    if (selectedVerbList === \"m4\") {\n      result = pronouns;\n    } else if (selectedVerbList === \"m5\") {\n      result = selectedTense === \"cmd\" ? [\"u\"] : [\"i\"];\n    } else if (selectedVerbList === \"m6\") {\n      result = selectedTense === \"cmd\" ? [\"u\", \"u2\", \"yall\"] : pronouns;\n    }\n    return result.map(p => ({\n      label: `${PRONOUN_MAP_ONEIDA[p]} (${PRONOUN_MAP_EN[p]})`,\n      value: p\n    }));\n  }, [selectedVerbList, selectedTense]);\n  const rows = useMemo(() => {\n    if (selectedVerbList === \"m4\") {\n      return createModule4Data().filter(v => v.tense === selectedTense).map(v => ({\n        en: translatePhrase(v.data.translation, selectedPronoun),\n        key: v.key,\n        on: v.data.phrases.find(p => p.pronoun === selectedPronoun).phrase\n      }));\n    } else if (selectedVerbList === \"m5\") {\n      return createModule5VerbsList().map(v => {\n        return {\n          en: translatePhrase(v[selectedTense].translation, selectedPronoun),\n          key: v.key,\n          on: v[selectedTense].phrases.find(p => p.pronoun === selectedPronoun).phrase\n        };\n      }).filter(Boolean);\n    } else if (selectedVerbList === \"m6\") {\n      return createModule6VerbList().filter(v => getPronounsForModule6Verb(v.key).includes(selectedPronoun)).map(v => {\n        return {\n          en: translatePhrase(v[selectedTense].translation, selectedPronoun),\n          key: v.key,\n          on: v[selectedTense].phrases.find(p => p.pronoun === selectedPronoun).phrase\n        };\n      });\n    }\n    return [];\n  }, [selectedVerbList, selectedTense, selectedPronoun]);\n  const formSchema = useMemo(() => {\n    return z.object(Object.fromEntries(rows.map(r => [r.key, z.string().optional()])));\n  }, [rows]);\n  return <Flex direction=\"column\" gap={4}>\n      <SectionHeading level={1}>Practice Lists of Verbs</SectionHeading>\n\n      <Text>\n        Use this page to practice writing a list of verbs from a given module.\n        You can pick a specific pronominal and tense to work with too.\n      </Text>\n\n      <Flex direction=\"column\" gap={2}>\n        <Select label=\"Verb List\" onChange={value => {\n        setSelectedTense(value === \"m4\" ? \"prs\" : value === \"m5\" ? \"prs\" : \"hab\");\n        setSelectedVerbList(value);\n        setHasStarted(false);\n      }} options={[{\n        label: \"Module 4\",\n        value: \"m4\"\n      }, {\n        label: \"Module 5\",\n        value: \"m5\"\n      }, {\n        label: \"Module 6\",\n        value: \"m6\"\n      }]} value={selectedVerbList} />\n\n        <Select label=\"Tense\" onChange={value => {\n        setSelectedTense(value);\n        setHasStarted(false);\n      }} options={tenseOptions} value={selectedTense} />\n\n        <Select label=\"Pronoun\" onChange={val => {\n        setSelectedPronoun(val);\n        setHasStarted(false);\n      }} options={pronounsOptions} value={selectedPronoun} />\n\n        <Flex.Item>\n          <Button disabled={hasStarted} onClick={() => setHasStarted(true)}>\n            Start\n          </Button>\n        </Flex.Item>\n      </Flex>\n\n      {hasStarted && <TableAsForm bleed={32} checkCorrectness={(key, val) => TableAsForm.defaultCheckCorrectness({\n      key,\n      val,\n      rows\n    })} formSchema={formSchema} rows={rows} />}\n    </Flex>;\n}\n_s(PracticeTenseConjugation, \"SAq6q8Xuex2e3v7YT2vulX305lE=\");\n_c = PracticeTenseConjugation;\nvar _c;\n$RefreshReg$(_c, \"PracticeTenseConjugation\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;"],
  "mappings": "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",
  "names": ["React"]
}
