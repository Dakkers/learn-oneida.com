{
  "version": 3,
  "sources": ["../../../app/routes/tools.clock.tsx", "../../../app/utils/time.ts"],
  "sourcesContent": ["// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app/routes/tools.clock.tsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nvar _s = $RefreshSig$();\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app/routes/tools.clock.tsx\");\n  import.meta.hot.lastModified = \"1718240764417.3572\";\n}\n// REMIX HMR END\n\nimport { Button } from \"@/design/primitives/button\";\nimport { Flex } from \"@/design/components/flex\";\nimport { Select } from \"@/design/components/select\";\nimport { Separator } from \"@/design/primitives/separator\";\nimport React from \"react\";\nimport _ from \"lodash\";\nimport { Text } from \"@/design/components/text\";\nimport { List } from \"@/design/components/list\";\nimport { doTheTranslate } from \"~/utils/time\";\nimport { SectionHeading } from \"~/components/SectionHeading\";\nexport const meta = () => {\n  return [{\n    title: \"Clock Time\"\n  }, {\n    name: \"description\",\n    content: \"Translate clock time into Oneida\"\n  }];\n};\nexport default function ToolsClock() {\n  _s();\n  const [hour, setHour] = React.useState(\"12\");\n  const [minute, setMinute] = React.useState(\"00\");\n  const [period, setPeriod] = React.useState(\"AM\");\n  const [translatedValue, setTranslatedValue] = React.useState([]);\n  return <>\n      <SectionHeading level={1}>Clock Time</SectionHeading>\n\n      <Flex direction=\"column\" gap={2}>\n        <Select label=\"Hour\" onChange={setHour} options={_.range(1, 13).map(value => ({\n        label: value,\n        value: value.toString()\n      }))} value={hour} />\n        <Select label=\"Minute\" onChange={setMinute} options={_.range(0, 60).map(v => v.toString().padStart(2, \"0\")).map(value => ({\n        label: value,\n        value\n      }))} value={minute} />\n        <Select label=\"&nbsp;\" onChange={setPeriod} options={[{\n        label: \"a.m.\",\n        value: \"AM\"\n      }, {\n        label: \"p.m.\",\n        value: \"PM\"\n      }]} value={period} />\n        <Flex.Item>\n          <Button onClick={() => setTranslatedValue(doTheTranslate(parseInt(hour) % 12 + (period === \"AM\" ? 0 : 12), parseInt(minute)))}>\n            Translate\n          </Button>\n        </Flex.Item>\n      </Flex>\n\n      <Separator />\n\n      <Text>Translations:</Text>\n      <List>\n        {translatedValue.map((value, i) => <List.Item key={i}>{value}</List.Item>)}\n      </List>\n    </>;\n}\n_s(ToolsClock, \"70/lzxkdrntx13FJhvyh+JejmcY=\");\n_c = ToolsClock;\nvar _c;\n$RefreshReg$(_c, \"ToolsClock\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;", "// REMIX HMR BEGIN\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\nimport.meta.hot = __hmr__.createHotContext(\n//@ts-expect-error\n\"app/utils/time.ts\"\n);\nimport.meta.hot.lastModified = \"1716730032017.3237\";\n}\n// REMIX HMR END\n\nimport { translateNumber } from \"./numbers\";\nimport { unwhisperWord } from \"./words\";\n\nconst MIDNIGHT = \"ahs\u00FAtha\";\nconst BEFORE = \"tyono\u00B7l\u00FAhe\";\nconst AFTER = \"yotuk\u00F3htu\";\nconst MINUTES = \"nikah\u00ED\u00B7kalat\";\nconst MORNING = \"ast\u00E9htsi\u0294\";\nconst NOON = \"\u028C\u0301ti\";\nconst HOUR = \"niyohwist\u00E1\u00B7e\";\n\nexport function doTheTranslate(hour: number, minute: number): string[] {\n  if (hour === 0 && minute === 0) {\n    return [MIDNIGHT];\n  } else if (hour === 12 && minute === 0) {\n    return [\"\u028C\u0301ty\u028C ni\u00B7k\u00E1le\u0294\", \"\u028C\u0301ti\"];\n  }\n\n  const result = [];\n\n  const hoursToConsider = minute >= 31 ? [hour + 1, hour] : [hour];\n  for (const h of hoursToConsider) {\n    const useBeforeHour = h > hour;\n    const effectiveMinutes = useBeforeHour ? 60 - minute : minute;\n    const effectiveHour = h % 24;\n\n    const minutesText = (\n      effectiveMinutes !== 0\n        ? [\n            translateNumber(effectiveMinutes.toString()),\n            MINUTES,\n            useBeforeHour ? BEFORE : AFTER,\n          ]\n        : []\n    )\n      .join(\" \")\n      .trim();\n\n    const subresult = [minutesText];\n\n    if (effectiveHour === 0) {\n      subresult.push(MIDNIGHT);\n    } else if (effectiveHour < 12) {\n      subresult.push(translateNumber(effectiveHour.toString()), HOUR, MORNING);\n    } else if (effectiveHour === 12) {\n      subresult.push(NOON);\n    } else {\n      subresult.push(\n        translateNumber((effectiveHour % 12).toString()),\n        HOUR,\n        AFTER,\n        NOON,\n      );\n    }\n    result.push(unwhisperWord(subresult.join(\" \")).trim());\n  }\n\n  return result;\n\n  // if (effectiveHour === 0) {\n  //   if (effectiveMinutes === 0) {\n  //     return MIDNIGHT\n  //   } else {\n  //     return [\n  //       translateNumber(effectiveMinutes.toString()),\n  //       MINUTES,\n  //       (useBeforeHour ? BEFORE : AFTER),\n  //       MIDNIGHT\n  //     ].join(' ')\n  //   }\n  // }\n\n  // if (hour === \"12\" && minute === \"00\") {\n  //   return period === \"AM\" ? [\"ahs\u00FAtha\"] : ['\u028C\u0301ty\u028C ni\u00B7k\u00E1le\u0294', \"\u028C\u0301ti\"];\n  // }\n\n  // const hourPart = `${translateNumber(hour)} niyohwist\u00E1\u00B7e`;\n  // const minutePart =\n  //   minutesVal === 0 ? \"\" : `${translateNumber(minute)} nikah\u00ED\u00B7kalat yotuk\u00F3htu`;\n  // const periodPart = period === \"AM\" ? \"ast\u00E9htsi\u0294\" : \"yotuk\u00F3htu \u028C\u0301ti\";\n\n  // const result = [`${minutePart} ${hourPart} ${periodPart}`];\n\n  // if (minutesVal >= 30) {\n  //   const minutesDiff = 60 - minutesVal;\n  //   const hourPart = `${translateNumber(\n  //     (parseInt(hour) + 1).toString()\n  //   )} niyohwist\u00E1\u00B7e`;\n  //   const minutePart = `${translateNumber(\n  //     minutesDiff.toString()\n  //   )} nikah\u00ED\u00B7kalat tyono\u00B7l\u00FAhe`;\n  //   const periodPart = period === \"AM\" ? \"ast\u00E9htsi\u0294\" : \"yotuk\u00F3htu \u028C\u0301ti\";\n  //   result.push(`${minutePart} ${hourPart} ${periodPart}`);\n  // }\n\n  // return result.map((v) => unwhisperWord(v).trim());\n}\n"],
  "mappings": "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",
  "names": ["React", "_"]
}
