{
  "version": 3,
  "sources": ["../../../app/routes/tools.all-paradigms.tsx"],
  "sourcesContent": ["// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app/routes/tools.all-paradigms.tsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nvar _s = $RefreshSig$();\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app/routes/tools.all-paradigms.tsx\");\n  import.meta.hot.lastModified = \"1718240757474.8274\";\n}\n// REMIX HMR END\n\nimport { Flex } from \"@/design/components/flex\";\nimport { Select } from \"@/design/components/select\";\nimport { TableWrapper } from \"@/design/components/tableWrapper\";\nimport { Button } from \"@/design/primitives/button\";\nimport { Fragment, useState } from \"react\";\nimport { ParadigmTable } from \"~/components/ParadigmTable\";\nimport { SectionHeading } from \"~/components/SectionHeading\";\nimport { TextBreakdown } from \"~/components/TextBreakdown\";\nimport { MODULE_5_VERB_TENSE_LIST, createModule5VerbsList, module5VerbTenseMap } from \"~/data/module05\";\nimport { createModule6VerbList, MODULE_6_VERB_TENSE_LIST, module6VerbTenseMap } from \"~/data/module06/activeVerbsList\";\nexport const meta = () => {\n  return [{\n    title: \"All Paradigms\"\n  }, {\n    name: \"description\",\n    content: \"All paradigms for each module\"\n  }];\n};\nexport default function ToolsAllParadigms() {\n  _s();\n  const [module, setModule] = useState(\"m6\");\n  const [hasSubmitted, setHasSubmitted] = useState(false);\n  return <Flex direction=\"column\" gap={4}>\n      <div className=\"print:hidden\">\n        <SectionHeading level={1}>All Paradigms</SectionHeading>\n\n        <Flex align=\"end\" gap={4}>\n          <Select label=\"Module\" onChange={setModule} options={[{\n          label: \"Module 5\",\n          value: \"m5\"\n        }, {\n          label: \"Module 5 (Legacy)\",\n          value: \"m5-legacy\"\n        }, {\n          label: \"Module 6\",\n          value: \"m6\"\n        }]} value={module} />\n          <Button disabled={!module} onClick={() => setHasSubmitted(true)}>\n            Submit\n          </Button>\n        </Flex>\n      </div>\n\n      {!hasSubmitted ? null : module === \"m6\" ? <Module6Paradigms /> : module === \"m5\" ? <Module5Paradigms /> : module === \"m5-legacy\" ? <Module5ParadigmsAsIs /> : null}\n    </Flex>;\n}\n_s(ToolsAllParadigms, \"epz/faMJm7EME+FsoxFbPHMtu6A=\");\n_c = ToolsAllParadigms;\nfunction Module5Paradigms() {\n  const data = createModule5VerbsList();\n  return <>\n      {data.map(v => <Fragment key={v.key}>\n          <SectionHeading level={2}>{v.en}</SectionHeading>\n          {MODULE_5_VERB_TENSE_LIST.map(t => <>\n              <SectionHeading level={3} key={t}>\n                {v.en} \u2014 {module5VerbTenseMap[t]}\n              </SectionHeading>\n\n              <div style={{\n          pageBreakAfter: \"always\"\n        }}>\n                <ParadigmTable columnVisibility={{\n            pronounOneida: true,\n            pronounEnglish: false,\n            translation: true\n          }} data={v[t]} />\n              </div>\n            </>)}\n        </Fragment>)}\n    </>;\n}\n_c2 = Module5Paradigms;\nfunction Module6Paradigms() {\n  return <>\n      {createModule6VerbList().map(v => <Fragment key={v.key}>\n          <SectionHeading level={2}>{v.en}</SectionHeading>\n          {MODULE_6_VERB_TENSE_LIST.map(t => <>\n              <SectionHeading level={3} key={t}>\n                {v.en} \u2014 {module6VerbTenseMap[t]}\n              </SectionHeading>\n\n              <div style={{\n          pageBreakAfter: \"always\"\n        }}>\n                <ParadigmTable columnVisibility={{\n            pronounOneida: true,\n            pronounEnglish: false,\n            translation: true\n          }} data={v[t]} />\n              </div>\n            </>)}\n        </Fragment>)}\n    </>;\n}\n_c3 = Module6Paradigms;\nfunction Module5ParadigmsAsIs() {\n  const data = createModule5VerbsList();\n  return <TableWrapper columns={[{\n    accessorKey: \"left\",\n    // @ts-expect-error TODO\n    cell: (value, row) => {\n      return <div>{row.en}</div>;\n    },\n    header: \"\"\n  }, {\n    accessorKey: \"middle\",\n    // @ts-expect-error TODO\n    cell: (value, row) => {\n      return <Flex direction=\"column\" justify=\"center\" gap={4}>\n                <TextBreakdown breakdown={row.prs.phrases[0].breakdown} typeFallback={row.prs.type} />\n                <TextBreakdown breakdown={row.past.phrases[0].breakdown} typeFallback={row.past.type} />\n              </Flex>;\n    },\n    header: \"\"\n  }, {\n    accessorKey: \"right\",\n    // @ts-expect-error TODO\n    cell: (value, row) => {\n      return <Flex direction=\"column\" justify=\"center\" gap={4}>\n                <TextBreakdown breakdown={row.fut.phrases[0].breakdown} typeFallback={row.fut.type} />\n                <TextBreakdown breakdown={row.ifut.phrases[0].breakdown} typeFallback={row.ifut.type} />\n                <TextBreakdown breakdown={row.cmd.phrases[0].breakdown} typeFallback={row.cmd.type} />\n              </Flex>;\n    },\n    header: \"\"\n  }]} data={data} />;\n}\n_c4 = Module5ParadigmsAsIs;\nvar _c, _c2, _c3, _c4;\n$RefreshReg$(_c, \"ToolsAllParadigms\");\n$RefreshReg$(_c2, \"Module5Paradigms\");\n$RefreshReg$(_c3, \"Module6Paradigms\");\n$RefreshReg$(_c4, \"Module5ParadigmsAsIs\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;"],
  "mappings": "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",
  "names": []
}
