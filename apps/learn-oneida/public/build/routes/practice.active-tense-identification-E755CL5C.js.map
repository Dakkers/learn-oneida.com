{
  "version": 3,
  "sources": ["../../../app/routes/practice.active-tense-identification.tsx"],
  "sourcesContent": ["// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app/routes/practice.active-tense-identification.tsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nvar _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app/routes/practice.active-tense-identification.tsx\");\n  import.meta.hot.lastModified = \"1717069385816.7546\";\n}\n// REMIX HMR END\n\nimport { Flex } from \"@/design/components/flex\";\nimport React from \"react\";\nimport { Button } from \"@/design/primitives/button\";\nimport { Quiz, useQuizContext } from \"~/components/practice/Quiz\";\nimport { Box } from \"@/design/components/box\";\nimport _ from \"lodash\";\nimport { Text } from \"@/design/components/text\";\nimport { AnswerMultipleChoiceButtons, NextBtn, QuizContainerContext, Settings } from \"~/components/practice/QuizContainer\";\nimport { Link } from \"@remix-run/react\";\nimport { SectionHeading } from \"~/components/SectionHeading\";\nimport { createModule6VerbListFlat } from \"~/data/module06/activeVerbsList\";\nexport const meta = () => {\n  return [{\n    title: \"Tense Identification for Active Verbs\"\n  }, {\n    name: \"description\",\n    content: \"Practice your knowledge of tenses in the Oneida language by identifying a tense conjugation on an active verb.\"\n  }];\n};\nconst TENSE_LIST = [\"hab\", \"def\", \"fut\", \"ifut\", \"cmd\", \"pfv\"];\nexport default function PracticeTenseIdentification() {\n  _s();\n  const [hasStarted, setHasStarted] = React.useState(false);\n  const [languageSetting, setLanguageSetting] = React.useState(\"both\");\n  const [answerSetting, setAnswerSetting] = React.useState(\"multipleChoice\");\n  const [questionCountSetting, setQuestionCountSetting] = React.useState(\"5\");\n  const questions = React.useMemo(() => {\n    const DATA_FULL_LIST = _.flattenDeep(createModule6VerbListFlat().map(v => v.phrases.map(p => ({\n      tense: v.tense,\n      value: p.phrase\n    })) ?? []));\n    if (!hasStarted) {\n      return [];\n    }\n    const result = new Array(Number(questionCountSetting));\n    for (let i = 0; i < result.length; i++) {\n      const randomTense = TENSE_LIST[Math.floor(Math.random() * 5)];\n      const datum = _.sample(DATA_FULL_LIST.filter(d => d.tense === randomTense)) ?? DATA_FULL_LIST.find(d => d.tense === randomTense);\n\n      // What is the tense of this word?\n      result[i] = {\n        answer: randomTense,\n        id: i.toString(),\n        question: datum?.value || \"\",\n        type: \"given_word\"\n      };\n    }\n    return result;\n  }, [hasStarted, questionCountSetting]);\n  return <QuizContainerContext.Provider value={{\n    answerSetting,\n    languageSetting,\n    questionCountSetting,\n    setAnswerSetting,\n    setLanguageSetting,\n    setQuestionCountSetting\n  }}>\n      <Flex direction=\"column\" gap={4}>\n        <SectionHeading level={1}>\n          Tense Identification (Active Verbs)\n        </SectionHeading>\n\n        {hasStarted ? <Quiz getResultForQuestion={(index, selectedAnswer) => {\n        const q = questions[index];\n        return {\n          correctAnswer: tenseMap[q.answer],\n          isCorrect: q.answer === selectedAnswer,\n          question: `What is the tense for: ${q.question}`,\n          selectedAnswer: tenseMap[selectedAnswer]\n        };\n      }} numberOfQuestions={Number(questionCountSetting)} onReset={() => setHasStarted(false)}>\n            <Flex align=\"center\" direction=\"column\" justify=\"center\" gap={8}>\n              <Quiz.Questions>\n                {questions.map((q, i) => <QuestionLol {...q} key={i} />)}\n              </Quiz.Questions>\n\n              <Box>\n                <NextBtn />\n              </Box>\n            </Flex>\n          </Quiz> : <>\n            <Text>\n              Use this page to practice identifying what tense conjugation an\n              active verb contains. These words come from{\" \"}\n              <Link className=\"text-blue-600 underline\" to=\"/learn/module06\">\n                module 6\n              </Link>\n              .\n            </Text>\n\n            <Settings enableLanguageSetting={false} enableAnswerTypeSetting={false} />\n\n            <Box>\n              <Button onClick={() => setHasStarted(true)}>Start</Button>\n            </Box>\n          </>}\n      </Flex>\n    </QuizContainerContext.Provider>;\n}\n_s(PracticeTenseIdentification, \"AIV6of/lJrXmZ/Rp8ZVmP82AmeA=\");\n_c = PracticeTenseIdentification;\nconst tenseMap = {\n  cmd: \"Command\",\n  fut: \"Future\",\n  ifut: \"Indefinite\",\n  def: \"Definite\",\n  pfv: \"Perfective\",\n  hab: \"Habitual\"\n};\nfunction QuestionLol({\n  answer,\n  id,\n  question\n}) {\n  _s2();\n  const quizContext = useQuizContext();\n  console.log(quizContext);\n  return <Flex align=\"center\" direction=\"column\" gap={4}>\n      <Text>\n        What is the tense in this word: <b>{question}</b>\n      </Text>\n\n      <div className=\"w-[600px]\">\n        <Flex align=\"center\" direction=\"column\" gap={4}>\n          <AnswerMultipleChoiceButtons isCorrect={quizContext.answer === answer} options={TENSE_LIST.map(t => ({\n          key: t,\n          text: tenseMap[t]\n        }))} questionKey={id} />\n        </Flex>\n      </div>\n    </Flex>;\n}\n_s2(QuestionLol, \"Wd2GdEunSwOA6L0piZdlRPYBdTo=\", false, function () {\n  return [useQuizContext];\n});\n_c2 = QuestionLol;\nvar _c, _c2;\n$RefreshReg$(_c, \"PracticeTenseIdentification\");\n$RefreshReg$(_c2, \"QuestionLol\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;"],
  "mappings": "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",
  "names": ["import_react", "React", "_"]
}
