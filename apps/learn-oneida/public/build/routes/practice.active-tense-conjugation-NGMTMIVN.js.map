{
  "version": 3,
  "sources": ["../../../app/routes/practice.active-tense-conjugation.tsx"],
  "sourcesContent": ["// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app/routes/practice.active-tense-conjugation.tsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nvar _s = $RefreshSig$();\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app/routes/practice.active-tense-conjugation.tsx\");\n  import.meta.hot.lastModified = \"1718240764416.355\";\n}\n// REMIX HMR END\n\nimport { Flex } from \"@/design/components/flex\";\nimport React, { useMemo } from \"react\";\nimport { Heading } from \"@/design/components/heading\";\nimport { Text } from \"@/design/components/text\";\nimport { Select } from \"@/design/components/select\";\nimport { Button } from \"@/design/primitives/button\";\nimport { PRONOUN_MAP_EN, PRONOUN_MAP_ONEIDA } from \"~/utils\";\nimport { z } from \"zod\";\nimport { MODULE_6_VERB_TENSE_LIST, createModule6VerbList, findModule6Verb, getPronounsForModule6Verb, module6VerbTenseMap } from \"~/data/module06/activeVerbsList\";\nimport { TableAsForm } from \"~/components/practice/TableAsForm\";\nimport { Link } from \"@/design/primitives/link\";\nexport const meta = () => {\n  return [{\n    title: \"Tenses Conjugation for Active Verbs\"\n  }, {\n    name: \"description\",\n    content: \"Practice your knowledge and understanding of tenses for active verbs in the Oneida language.\"\n  }];\n};\nexport default function PracticeTenseConjugation() {\n  _s();\n  const [word, setWord] = React.useState(\"answer\");\n  const [pronoun, setPronoun] = React.useState(\"i\");\n  const [hasStarted, setHasStarted] = React.useState(false);\n  const verbOptions = React.useMemo(() => createModule6VerbList().map(datum => ({\n    label: datum.en,\n    value: datum.key\n  })), []);\n  const pronounOptions = React.useMemo(() => {\n    return getPronounsForModule6Verb(word).map(pronoun => ({\n      label: `${PRONOUN_MAP_ONEIDA[pronoun]} (${PRONOUN_MAP_EN[pronoun]})`,\n      value: pronoun\n    }));\n  }, [word]);\n  const rows = useMemo(() => {\n    const datum = findModule6Verb(word);\n    if (!datum) {\n      return [];\n    }\n    return MODULE_6_VERB_TENSE_LIST.filter(tense => tense === \"cmd\" ? [\"u\", \"u2\", \"yall\"].includes(pronoun) : true).map(tense => ({\n      en: module6VerbTenseMap[tense],\n      key: `${datum.key}_${tense}`,\n      on: datum[tense].phrases.find(p => p.pronoun === pronoun).phrase\n    }));\n  }, [pronoun, word]);\n  const formSchema = useMemo(() => {\n    return z.object(Object.fromEntries(rows.map(r => [r.key, z.string().optional()])));\n  }, [rows]);\n  return <Flex direction=\"column\" gap={4}>\n      <Heading level={1} variant=\"headlineL\">\n        Tense Conjugation for Active Verbs\n      </Heading>\n\n      <Text>\n        Use this page to practice conjugating the different tenses for a given\n        active verb. These words come from{\" \"}\n        <Link href=\"/learn/module06\">module 6</Link>.\n      </Text>\n\n      <Flex align={{\n      sm: \"end\"\n    }} direction={{\n      xs: \"column\",\n      sm: \"row\"\n    }} gap={2}>\n        <Select label=\"Word\" onChange={value => {\n        setWord(value);\n        setHasStarted(false);\n        const allowedPronouns = getPronounsForModule6Verb(value);\n        if (!allowedPronouns.includes(pronoun)) {\n          setPronoun(allowedPronouns[0] ?? \"\");\n        }\n      }} options={verbOptions} value={word} />\n\n        <Select label=\"Pronoun\" onChange={value => {\n        setPronoun(value);\n        setHasStarted(false);\n      }} options={pronounOptions} value={pronoun} />\n\n        <Flex.Item>\n          <Button disabled={!word || hasStarted} onClick={() => {\n          setHasStarted(true);\n        }}>\n            Start\n          </Button>\n        </Flex.Item>\n      </Flex>\n\n      {hasStarted && <TableAsForm checkCorrectness={(key, val) => TableAsForm.defaultCheckCorrectness({\n      key,\n      val,\n      rows\n    })} formSchema={formSchema} rows={rows} />}\n    </Flex>;\n}\n_s(PracticeTenseConjugation, \"nsuzNj0g4Qgo10fUrpfW8IUXCR8=\");\n_c = PracticeTenseConjugation;\nvar _c;\n$RefreshReg$(_c, \"PracticeTenseConjugation\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsBA,mBAA+B;AAgDzB;AArEN,IAAI,CAAC,OAAO,gBAAgB,CAAC,OAAO,gBAAgB,CAAC,OAAO,kBAAkB;AAC5E,UAAQ,KAAK,kGAAkG;AACjH,OAAO;AACD,mBAAiB,OAAO;AACxB,mBAAiB,OAAO;AAC5B,SAAO,eAAe,CAAC,MAAM,OAAO;AAClC,WAAO,iBAAiB,SAAS,MAAM,uDAAyD,EAAE;AAAA,EACpG;AACA,SAAO,eAAe,OAAO,iBAAiB;AAChD;AANM;AACA;AAMN,IAAI,KAAK,aAAa;AAEtB,IAAI,aAAa;AACf,cAAY,MAAc;AAAA;AAAA,IAE1B;AAAA,EAAkD;AAClD,cAAY,IAAI,eAAe;AACjC;AAcO,IAAM,OAAO,MAAM;AACxB,SAAO,CAAC;AAAA,IACN,OAAO;AAAA,EACT,GAAG;AAAA,IACD,MAAM;AAAA,IACN,SAAS;AAAA,EACX,CAAC;AACH;AACe,SAAR,2BAA4C;AACjD,KAAG;AACH,QAAM,CAAC,MAAM,OAAO,IAAI,aAAAA,QAAM,SAAS,QAAQ;AAC/C,QAAM,CAAC,SAAS,UAAU,IAAI,aAAAA,QAAM,SAAS,GAAG;AAChD,QAAM,CAAC,YAAY,aAAa,IAAI,aAAAA,QAAM,SAAS,KAAK;AACxD,QAAM,cAAc,aAAAA,QAAM,QAAQ,MAAM,sBAAsB,EAAE,IAAI,YAAU;AAAA,IAC5E,OAAO,MAAM;AAAA,IACb,OAAO,MAAM;AAAA,EACf,EAAE,GAAG,CAAC,CAAC;AACP,QAAM,iBAAiB,aAAAA,QAAM,QAAQ,MAAM;AACzC,WAAO,0BAA0B,IAAI,EAAE,IAAI,CAAAC,cAAY;AAAA,MACrD,OAAO,GAAG,mBAAmBA,QAAO,MAAM,eAAeA,QAAO;AAAA,MAChE,OAAOA;AAAA,IACT,EAAE;AAAA,EACJ,GAAG,CAAC,IAAI,CAAC;AACT,QAAM,WAAO,sBAAQ,MAAM;AACzB,UAAM,QAAQ,gBAAgB,IAAI;AAClC,QAAI,CAAC,OAAO;AACV,aAAO,CAAC;AAAA,IACV;AACA,WAAO,yBAAyB,OAAO,WAAS,UAAU,QAAQ,CAAC,KAAK,MAAM,MAAM,EAAE,SAAS,OAAO,IAAI,IAAI,EAAE,IAAI,YAAU;AAAA,MAC5H,IAAI,oBAAoB,KAAK;AAAA,MAC7B,KAAK,GAAG,MAAM,OAAO;AAAA,MACrB,IAAI,MAAM,KAAK,EAAE,QAAQ,KAAK,OAAK,EAAE,YAAY,OAAO,EAAE;AAAA,IAC5D,EAAE;AAAA,EACJ,GAAG,CAAC,SAAS,IAAI,CAAC;AAClB,QAAM,iBAAa,sBAAQ,MAAM;AAC/B,WAAO,EAAE,OAAO,OAAO,YAAY,KAAK,IAAI,OAAK,CAAC,EAAE,KAAK,EAAE,OAAO,EAAE,SAAS,CAAC,CAAC,CAAC,CAAC;AAAA,EACnF,GAAG,CAAC,IAAI,CAAC;AACT,SAAO,mDAAC,QAAK,WAAU,UAAS,KAAK,GACjC;AAAA,uDAAC,WAAQ,OAAO,GAAG,SAAQ,aAAY,kDAAvC;AAAA;AAAA;AAAA;AAAA,WAEA;AAAA,IAEA,mDAAC,QAAK;AAAA;AAAA,MAE+B;AAAA,MACnC,mDAAC,QAAK,MAAK,mBAAkB,wBAA7B;AAAA;AAAA;AAAA;AAAA,aAAqC;AAAA,MAAO;AAAA,SAH9C;AAAA;AAAA;AAAA;AAAA,WAIA;AAAA,IAEA,mDAAC,QAAK,OAAO;AAAA,MACb,IAAI;AAAA,IACN,GAAG,WAAW;AAAA,MACZ,IAAI;AAAA,MACJ,IAAI;AAAA,IACN,GAAG,KAAK,GACJ;AAAA,yDAAC,UAAO,OAAM,QAAO,UAAU,WAAS;AACxC,gBAAQ,KAAK;AACb,sBAAc,KAAK;AACnB,cAAM,kBAAkB,0BAA0B,KAAK;AACvD,YAAI,CAAC,gBAAgB,SAAS,OAAO,GAAG;AACtC,qBAAW,gBAAgB,CAAC,KAAK,EAAE;AAAA,QACrC;AAAA,MACF,GAAG,SAAS,aAAa,OAAO,QAP9B;AAAA;AAAA;AAAA;AAAA,aAOoC;AAAA,MAEpC,mDAAC,UAAO,OAAM,WAAU,UAAU,WAAS;AAC3C,mBAAW,KAAK;AAChB,sBAAc,KAAK;AAAA,MACrB,GAAG,SAAS,gBAAgB,OAAO,WAHjC;AAAA;AAAA;AAAA;AAAA,aAG0C;AAAA,MAE1C,mDAAC,KAAK,MAAL,EACC,6DAAC,UAAO,UAAU,CAAC,QAAQ,YAAY,SAAS,MAAM;AACtD,sBAAc,IAAI;AAAA,MACpB,GAAG,qBAFD;AAAA;AAAA;AAAA;AAAA,aAIA,KALF;AAAA;AAAA;AAAA;AAAA,aAMA;AAAA,SA1BF;AAAA;AAAA;AAAA;AAAA,WA2BA;AAAA,IAEC,cAAc,mDAAC,eAAY,kBAAkB,CAAC,KAAK,QAAQ,YAAY,wBAAwB;AAAA,MAChG;AAAA,MACA;AAAA,MACA;AAAA,IACF,CAAC,GAAG,YAAwB,QAJX;AAAA;AAAA;AAAA;AAAA,WAIuB;AAAA,OA5CnC;AAAA;AAAA;AAAA;AAAA,SA6CL;AACJ;AACA,GAAG,0BAA0B,8BAA8B;AAC3D,KAAK;AACL,IAAI;AACJ,aAAa,IAAI,0BAA0B;AAE3C,OAAO,eAAe;AACtB,OAAO,eAAe;",
  "names": ["React", "pronoun"]
}
