{
  "version": 3,
  "sources": ["../../../app/routes/practice.counting-time.tsx"],
  "sourcesContent": ["// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app/routes/practice.counting-time.tsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nvar _s = $RefreshSig$();\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app/routes/practice.counting-time.tsx\");\n  import.meta.hot.lastModified = \"1718240764416.6638\";\n}\n// REMIX HMR END\n\nimport { Flex } from \"@/design/components/flex\";\nimport { Text } from \"@/design/components/text\";\nimport { Button } from \"@/design/primitives/button\";\nimport { Link } from \"@/design/primitives/link\";\nimport { shuffle } from \"lodash\";\nimport { useMemo, useState } from \"react\";\nimport { z } from \"zod\";\nimport { SectionHeading } from \"~/components/SectionHeading\";\nimport { createCountingTimeData } from \"~/components/articles/CountingTime\";\nimport { TableAsForm } from \"~/components/practice/TableAsForm\";\nexport const meta = () => {\n  return [{\n    title: \"Practice Counting Time\"\n  }, {\n    name: \"description\",\n    content: \"Test your Oneida knowledge on counting lengths of time!\"\n  }];\n};\nexport default function PracticeMonths() {\n  _s();\n  const rows = useMemo(() => {\n    const [firstTable, secondTable] = createCountingTimeData();\n    const result = [];\n    for (const item of firstTable) {\n      for (const key of [\"minutes\", \"hours\", \"days\", \"nights\"]) {\n        result.push({\n          en: `${item.num} ${item.num === 1 ? key.slice(0, key.length - 1) : key}`,\n          key: `${key}_${item.num}`,\n          on: item[key]\n        });\n      }\n    }\n    for (const item of secondTable) {\n      for (const key of [\"weeks\", \"months\", \"years\"]) {\n        result.push({\n          en: `${item.num} ${item.num === 1 ? key.slice(0, key.length - 1) : key}`,\n          key: `${key}_${item.num}`,\n          on: item[key]\n        });\n      }\n    }\n    return shuffle(result);\n  }, []);\n  const formSchema = useMemo(() => {\n    return z.object(Object.fromEntries(rows.map(r => [r.key, z.string().optional()])));\n  }, [rows]);\n  const [hasStarted, setHasStarted] = useState(false);\n  return <>\n      <SectionHeading level={1}>Practice counting time</SectionHeading>\n      <Text>\n        Here you can practice the terminology on the{\" \"}\n        <Link href=\"/articles/counting-time\">Counting Time article</Link> which\n        is part of <Link href=\"/learn/module04\">Module 4</Link>.\n      </Text>\n\n      {hasStarted ? <TableAsForm checkCorrectness={(key, val) => TableAsForm.defaultCheckCorrectness({\n      key,\n      val,\n      rows\n    })} formSchema={formSchema} rows={rows} /> : <Flex align=\"end\" gap={2}>\n          <Button disabled={hasStarted} onClick={() => setHasStarted(true)}>\n            Start\n          </Button>\n        </Flex>}\n    </>;\n}\n_s(PracticeMonths, \"Na4lIFEM11n4GaMApxbLjPfmXy4=\");\n_c = PracticeMonths;\nvar _c;\n$RefreshReg$(_c, \"PracticeMonths\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;"],
  "mappings": "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",
  "names": []
}
