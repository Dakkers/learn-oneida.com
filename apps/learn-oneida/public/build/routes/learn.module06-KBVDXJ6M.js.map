{
  "version": 3,
  "sources": ["../../../app/routes/learn.module06.tsx"],
  "sourcesContent": ["// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app/routes/learn.module06.tsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app/routes/learn.module06.tsx\");\n  import.meta.hot.lastModified = \"1718240764415.6802\";\n}\n// REMIX HMR END\n\nimport { TableOfContents as TOC } from \"~/components/TableOfContents\";\nimport { Flex } from \"@/design/components/flex\";\nimport { SectionHeading } from \"~/components/SectionHeading\";\nimport { Box } from \"@/design/components/box\";\nimport { Notice } from \"@/design/components/notice\";\nimport { TableWrapper } from \"@/design/components/tableWrapper\";\nimport { TextBreakdown } from \"~/components/TextBreakdown\";\nimport { createModule6VerbList } from \"~/data/module06/activeVerbsList\";\nimport _ from \"lodash\";\nimport { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from \"@/design/primitives/accordion\";\nimport { ParadigmTable } from \"~/components/ParadigmTable\";\nimport { Text } from \"@/design/components/text\";\nimport { Pronominal } from \"~/components/Pronominal\";\nimport { Letter } from \"~/components/Letter\";\nimport { Link } from \"@/design/primitives/link\";\nimport { List } from \"@/design/components/list\";\nimport { TranslationExercisesSection } from \"~/components/practice/TranslationExercises\";\nimport { Bleed } from \"@/design/components/Bleed\";\nimport { TextArray } from \"@/utils/TextArray\";\nimport { pronouns } from \"~/utils\";\nconst TENSE_LIST = [\"cmd\", \"hab\", \"pfv\", \"def\", \"ifut\", \"fut\"];\nconst tenseMap = {\n  cmd: \"Command\",\n  def: \"Definite\",\n  fut: \"Future\",\n  hab: \"Habitual\",\n  ifut: \"Indefinite\",\n  pfv: \"Perfective\"\n};\nconst tenseBreakdownMap = {\n  cmd: [\"tsi\u0294 \", [\"n\", \"PTV\"], [\"a\", \"IFUT\"], [\"hs\"], \"\u00E1tyel\"],\n  def: [[\"n\", \"PTV\"], [\"a\u0294\", \"DEF\"], [\"k\"], \"\u00E1tyele\u0332\u0294\"],\n  fut: [[\"n\", \"PTV\"], [\"\u028C\", \"FUT\"], [\"k\"], \"\u00E1tyele\u0332\u0294\"],\n  hab: [\"tsi\u0294 \", [\"ni\", \"PTV\"], [\"k\"], \"aty\u00E9lha\u0294\"],\n  ifut: [[\"n\", \"PTV\"], [\"a\", \"IFUT\"], [\"k\"], \"\u00E1tyele\u0332\u0294\"],\n  pfv: [[\"ni\", \"PTV\"], [\"wak\", \"PB\"], \"\u00E1tyele\u0332\u0294\"]\n};\nconst columnVisibility = {\n  pronounEnglish: false,\n  pronounOneida: false\n};\nconst verbsWithParadigms = [{\n  key: \"answer\",\n  prefix: \"t/te\",\n  root: \"-lihwa\u0294slakw\",\n  stem: \"C\"\n}, {\n  key: \"beginToDoSomething\",\n  prefix: \"t\",\n  root: \"t-...-atahsawh\",\n  stem: \"A\"\n}, {\n  key: \"cook\",\n  root: \"-khuni\",\n  stem: \"CC\"\n}, {\n  key: \"doSomething\",\n  prefix: \"ni\",\n  root: \"ni-...-atyel\",\n  stem: \"A\"\n}, {\n  key: \"getSelfUp\",\n  root: \"-atkekskw\",\n  stem: \"A\"\n}, {\n  key: \"saySomething\",\n  root: \"atu\",\n  stem: \"irregular\"\n}, {\n  key: \"goToSleep\",\n  colour: \"blue\",\n  root: \"ita\",\n  stem: \"I\"\n}, {\n  key: \"getTired\",\n  prefix: \"te\",\n  root: \"te-...-hwish\u028Cheyu\",\n  stem: \"C\"\n}, {\n  key: \"work\",\n  colour: \"blue\",\n  root: \"-yo\u0294t\u028C-\",\n  stem: \"C\"\n}];\nexport const meta = () => {\n  return [{\n    title: \"Module 6\"\n  }, {\n    name: \"description\",\n    content: \"Module 6 of the Oneida curriculum\"\n  }];\n};\nexport default function LearnModule06() {\n  const list = createModule6VerbList();\n  return <>\n      <SectionHeading level={1}>Module 6</SectionHeading>\n\n      <Box py={4}>\n        <Notice intent=\"warning\">\n          <b>NOTE:</b> This page is still under construction!\n        </Notice>\n      </Box>\n\n      <TOC>\n        <TOC.Item label=\"Introduction\" value=\"intro\" />\n        <TOC.Item label=\"Oneida Terms for Tenses\" value=\"oneida-terms-for-tenses\" />\n        <TOC.Item label=\"How Active Verbs Are Constructed\" value=\"how-its-constructed\" />\n        <TOC.Item label=\"Active Verb Examples\" value=\"examples\" />\n\n        <TOC.Item label=\"Daily Activities\" value=\"daily-activities\">\n          <TOC.Section>\n            {createModule6VerbList().map(v => <TOC.Item key={v.key} label={v.en} value={_.kebabCase(v.key)} />)}\n          </TOC.Section>\n        </TOC.Item>\n\n        <TOC.Item label=\"Paradigms for Select Active Verbs\" value=\"paradigms\">\n          <TOC.Section>\n            {verbsWithParadigms.map(v => <TOC.Item key={v.key} label={v.root} value={formatVerbParadigmSectionId(list.find(v2 => v2.key === v.key))} />)}\n          </TOC.Section>\n        </TOC.Item>\n\n        <TOC.Item label=\"Translation exercises\" value=\"translation-exercises\" />\n      </TOC>\n\n      <StativeVsActiveSection />\n      <OneidaTermsForTenses />\n      <HowConstructedSection />\n      <ExamplesSection />\n      <DailyActivitiesSection />\n\n      <VerbsParadigmsSection />\n\n      <TranslationExercisesSection group=\"module06\" />\n    </>;\n}\n_c = LearnModule06;\nfunction StativeVsActiveSection() {\n  const cookVerbDatum = createModule6VerbList().find(v => v.key === \"cook\");\n  return <>\n      <SectionHeading id=\"intro\" level={2}>\n        Introduction\n      </SectionHeading>\n\n      <Text>\n        <Link href=\"/learn/module05\">Module 5</Link> covered{\" \"}\n        <b>stative verbs</b> which describe the{\" \"}\n        <i>state or condition of someone or something</i>. They have 5 possible\n        tenses:\n      </Text>\n\n      <TableWrapper columns={[{\n      ...TableWrapper.englishColumn,\n      accessorKey: \"tense\"\n    },\n    // @ts-expect-error LO-12\n    TableWrapper.createTextBreakdownColumn(\"PB\"), TableWrapper.englishColumn]} data={[{\n      tense: \"Present\",\n      en: \"I am lucky\",\n      breakdown: [[\"wak\"], \"atla\u0294swiy\u00F3\"]\n    }, {\n      tense: \"Past\",\n      en: \"I was lucky\",\n      breakdown: [[\"wak\"], \"atla\u0294swiyo\u00B7\", [\"hn\u00E9\u00B7\", \"PAST\"]]\n    }, {\n      tense: \"Future\",\n      en: \"I will be lucky\",\n      breakdown: [[\"\u028C\", \"FUT\"], [\"wak\"], \"atla\u0294swiy\u00F3\", [\"hake\u0294\", \"FUT\"]]\n    }, {\n      tense: \"Conditional (Indefinite Future)\",\n      en: \"I might be lucky\",\n      breakdown: [[\"a\", \"IFUT\"], [\"\u00B7ukw\"], \"atla\u0294swiy\u00F3\", [\"hake\u0294\", \"IFUT\"]]\n    }, {\n      tense: \"Command\",\n      en: \"Be lucky!\",\n      breakdown: [[\"s\"], \"atla\u0294swiy\u00F3\", [\"hak\", \"FUT\"]]\n    }]} />\n\n      <Text>\n        The verbs in module 6 are <b>active verbs</b> which decribe{\" \"}\n        <i>actions, events, or activities</i>. They have as many as 14 possible\n        forms. The 11 that will be covered by this curriculum are the following:\n      </Text>\n\n      <TableWrapper columns={[{\n      ...TableWrapper.englishColumn,\n      accessorKey: \"tense\"\n    },\n    // @ts-expect-error LO-12\n    TableWrapper.createTextBreakdownColumn(\"PR\"), TableWrapper.englishColumn]} data={[{\n      tense: \"Habitual\",\n      en: \"I cook\",\n      breakdown: cookVerbDatum.hab.phrases[0].breakdown\n    }, {\n      tense: \"Habitual Past\",\n      en: \"I used to cook\",\n      breakdown: [[\"ke\"], \"khu\u00B7n\u00ED\", [\"hahkwe\u0294\", \"PAST\"]]\n    }, {\n      tense: \"Habitual Future\",\n      en: \"I will keep on cooking\",\n      breakdown: [[\"\u028C\", \"FUT\"], [\"ke\"], \"khu\u00B7n\u00ED\", [\"heke\u0294\", \"FUT\"]]\n    }, {\n      tense: \"Definite Past\",\n      en: \"I cooked\",\n      breakdown: cookVerbDatum.def.phrases[0].breakdown\n    }, {\n      tense: \"Indefinite Future\",\n      en: \"I might cook\",\n      breakdown: cookVerbDatum.ifut.phrases[0].breakdown\n    }, {\n      tense: \"Definite Future\",\n      en: \"I will cook\",\n      breakdown: cookVerbDatum.fut.phrases[0].breakdown\n    }, {\n      tense: \"Perfective\",\n      en: \"I have cooked\",\n      breakdown: [[\"wake\", \"PB\"], \"khun\u00ED\"]\n    }, {\n      tense: \"Progressive\",\n      en: \"I am going along cooking\",\n      breakdown: [[\"wake\", \"PB\"], \"khuni\", [\"h\u00E1ti\", \"PAST\"]]\n    }, {\n      tense: \"Perfective Past\",\n      en: \"I had cooked\",\n      breakdown: [[\"wake\", \"PB\"], \"khuni\u00B7\", [\"hn\u00E9\u00B7\", \"PAST\"]]\n    }, {\n      tense: \"Perfective Indefinite\",\n      en: \"I should have cooked\",\n      breakdown: [[\"a\", \"IFUT\"], [\"\u00B7uk\", \"PB\"], \"khuni\u00B7\", [\"ke\u0294\", \"PAST\"]]\n    }, {\n      tense: \"Command\",\n      en: \"Cook!\",\n      breakdown: cookVerbDatum.cmd.phrases[0].breakdown\n    }]} />\n\n      <Text>This module will cover these 6:</Text>\n\n      <List>\n        <List.Item>Habitual</List.Item>\n        <List.Item>Definite Past</List.Item>\n        <List.Item>Indefinite Future</List.Item>\n        <List.Item>Definite Future</List.Item>\n        <List.Item>Perfective</List.Item>\n        <List.Item>Command</List.Item>\n      </List>\n\n      <Notice>\n        If you are confused by the differences between these tenses, that is\n        okay! While some of the tenses may look redundant, they are used in\n        different contexts. This will be demonstrated later.\n      </Notice>\n    </>;\n}\n_c2 = StativeVsActiveSection;\nfunction OneidaTermsForTenses() {\n  return <>\n      <SectionHeading id=\"oneida-terms-for-tenses\" level={2}>\n        Oneida Terms for Tenses\n      </SectionHeading>\n\n      <Text>\n        At this point in the program&lsquo;s lectures, more Oneida should be\n        incorporated to create a more immersive classroom. Below shows the\n        Oneida terms to describe the different tenses.\n      </Text>\n\n      <SectionHeading level={3}>It is happening</SectionHeading>\n\n      <TableWrapper columns={[{\n      ...TableWrapper.englishColumn,\n      accessorKey: \"tense\"\n    },\n    // @ts-expect-error LO-12\n    TableWrapper.createTextBreakdownColumn(\"PB\"), TableWrapper.englishColumn]} data={[{\n      breakdown: [\"th\u00F3 ni\", [\"ya\u00B7w\"], \"\u028C\u0301\u00B7se\u0294\"],\n      en: [\"That is what happens\", \"It's the way it happens\"],\n      tense: \"Habitual\"\n    }, {\n      breakdown: [\"th\u00F3 n\", [\"a\u0294\", \"DEF\"], [\"a\u00B7w\"], \"\u028C\u0301\", [\"ne\u0294\", \"DEF\"]],\n      en: \"That happened\",\n      tense: \"Definite\"\n    }, {\n      breakdown: [\"th\u00F3 n\", [\"a\", \"IFUT\"], [\"ya\u00B7w\"], \"\u028C\u0301\", [\"ne\u0294\", \"IFUT\"]],\n      en: \"That would happen\",\n      tense: \"Indefinite\"\n    }, {\n      breakdown: [\"th\u00F3 n\", [\"\u028C\", \"FUT\"], [\"ya\u00B7w\"], \"\u028C\u0301\", [\"ne\u0294\", \"FUT\"]],\n      en: \"That will happen\",\n      tense: \"Future\"\n    }, {\n      breakdown: [\"th\u00F3 ni\", [\"yaw\"], \"\u028C\u0301\u00B7\", [\"u\", \"PAST\"]],\n      en: \"That has happened\",\n      tense: \"Perfective\"\n    }, {\n      breakdown: [\"th\u00F3 ni\", [\"yaw\"], \"\u028C\u0294u\", [\"h\u00E1ti\", \"DEF\"]],\n      en: \"That is happening now\",\n      tense: [\"Progressive\", \"Stative\"]\n    }, {\n      breakdown: [\"th\u00F3 ni\u0294y\", [\"a\u00B7w\"], \"\u028C\u0301n\"],\n      en: \"Let it happen\",\n      tense: \"Command\"\n    }]} />\n\n      <SectionHeading level={3}>That is what I am doing</SectionHeading>\n\n      <TableWrapper columns={[{\n      ...TableWrapper.englishColumn,\n      accessorKey: \"tense\"\n    },\n    // @ts-expect-error LO-12\n    TableWrapper.createTextBreakdownColumn(\"PR\"), TableWrapper.englishColumn]} data={[{\n      breakdown: [\"th\u00F3 ni\", [\"k\"], \"aty\u00E9lha\u0294\"],\n      en: [\"That is what I do\", \"That is what I am doing now\"],\n      tense: [\"Habitual\", \"Stative\"]\n    }, {\n      breakdown: [\"th\u00F3 n\", [\"a\u0294\", \"DEF\"], [\"k\"], \"\u00E1tyele\u0294\"],\n      en: \"That is what I did\",\n      tense: \"Definite Past\"\n    }, {\n      breakdown: [\"th\u00F3 n\", [\"a\", \"IFUT\"], [\"k\"], \"\u00E1tyele\u0294\"],\n      en: \"That is what I would do\",\n      tense: \"Indefinite Future\"\n    }, {\n      breakdown: [\"th\u00F3 n\", [\"\u028C\", \"FUT\"], [\"k\"], \"\u00E1tyele\u0294\"],\n      en: \"That is what I will do\",\n      tense: \"Definite Future\"\n    }, {\n      breakdown: [\"th\u00F3 ni\", [\"wak\", \"PB\"], \"atyel\", [\"\u028C\u0301\", \"PFV\"]],\n      en: [\"That is what I have done\", \"That is what I'm doing right now\"],\n      tense: \"Perfective\"\n    }, {\n      breakdown: [\"th\u00F3 ni\", [\"wak\", \"PB\"], \"atyel\u028Ch\u00E1ti\u0294\"],\n      en: \"That is what I am going along doing right now\",\n      tense: [\"Progressive\", \"Stative\"]\n    }, {\n      breakdown: [\"th\u00F3 n\", [\"a\", \"IFUT\"], [\"hs\"], \"\u00E1tyel\"],\n      en: \"Do that!\",\n      tense: \"Command\"\n    }]} />\n    </>;\n}\n_c3 = OneidaTermsForTenses;\nfunction HowConstructedSection() {\n  const data = [{\n    key: \"cmd\"\n  }, {\n    key: \"hab\",\n    ending: \"habitual\"\n  }, {\n    key: \"def\",\n    ending: \"punctual\",\n    prepronominal: [\"wa\u0294\", \"wa\", \"we\"]\n  }, {\n    key: \"ifut\",\n    ending: \"punctual\",\n    prepronominal: [\"a\", \"ae\"]\n  }, {\n    key: \"fut\",\n    ending: \"punctual\",\n    prepronominal: [\"\u028C\"]\n  }, {\n    key: \"pfv\",\n    ending: \"perfective\",\n    colors: [\"blue\", \"purple\"]\n  }];\n  return <>\n      <SectionHeading id=\"how-its-constructed\" level={2}>\n        How Active Verbs Are Constructed\n      </SectionHeading>\n\n      <TableWrapper columns={[{\n      accessorKey: \"key\",\n      // @ts-expect-error To be addressed\n      cell: (key, row) => <TextArray>\n                {tenseMap[key]}\n                <TextBreakdown breakdown={tenseBreakdownMap[row.key]} typeFallback=\"PR\" />\n              </TextArray>,\n      header: \"Tense\"\n    }, {\n      accessorKey: \"prepronominal\",\n      // @ts-expect-error To be addressed\n      cell: prepronominal => <TextArray>{prepronominal ?? []}</TextArray>,\n      header: \"Prepronominal\"\n    }, {\n      accessorKey: \"colors\",\n      // @ts-expect-error To be addressed\n      cell: colors => <TextArray>\n                {(colors ?? [\"red\", \"blue\", \"purple\"]).map(name => <Pronominal color={name} key={name}>\n                      {name}\n                    </Pronominal>)}\n              </TextArray>,\n      header: \"Colours\"\n    }, {\n      accessorKey: \"root\",\n      cell: () => \"root\",\n      header: \"\"\n    }, {\n      accessorKey: \"ending\",\n      // @ts-expect-error To be addressed\n      cell: ending => ending ? `${ending} ending` : \"\",\n      header: \"Ending\"\n    }]} data={data} />\n\n      <Text>\n        Examples of habitual, punctual, and perfective endings can be found on\n        page 20 of the Oneida-English dictionary.\n      </Text>\n    </>;\n}\n_c4 = HowConstructedSection;\nfunction ExamplesSection() {\n  const cookVerbDatum = createModule6VerbList().find(v => v.key === \"cook\");\n  const data = [{\n    key: \"cmd\",\n    tense: \"Command\",\n    en: \"Cook!\",\n    breakdown: cookVerbDatum.cmd.phrases[0].breakdown,\n    negation: [\"T\u00E1k\u028C\u0294 \", [\"\u028C\", \"FUT\"], [\"se\"], \"khuni\"],\n    negationEn: \"Don't cook!\",\n    desc: [\"Used to tell someone to do something right now.\"]\n  }, {\n    key: \"hab\",\n    tense: \"Habitual\",\n    en: \"I cook\",\n    breakdown: cookVerbDatum.hab.phrases[0].breakdown,\n    negation: [\"Y\u00E1h te\u0294\", [\"ke\"], \"khu\u00B7n\u00EDhe\u0294\"],\n    negationEn: \"I do not cook\",\n    desc: [\"Describes events that happen regularly, whether once an hour or once a year. There is an expectation that the event will occur again.\", 'Describes \"what people do\" or \"what they are.\"', \"Sometimes describes actions that are happening right now.\"]\n  }, {\n    key: \"def\",\n    tense: \"Definite Past\",\n    en: \"I cooked\",\n    breakdown: cookVerbDatum.def.phrases[0].breakdown,\n    negation: [\"Y\u00E1h te\u0294\", [\"wake\", \"PB\"], \"khu\u00B7n\u00ED\u00B7\"],\n    negationEn: \"I did not cook\",\n    desc: [\"Describes a completed event (verbs that end in -ed in English)\", \"Describes an event in which someone is en route or going to do something\"]\n  }, {\n    key: \"ifut\",\n    tense: \"Indefinite Future\",\n    en: \"I might cook\",\n    breakdown: cookVerbDatum.ifut.phrases[0].breakdown,\n    negation: [\"Y\u00E1h th\", [\"a\", \"IFUT\"], [\"ke\"], \"khu\u00B7n\u00ED\u00B7\"],\n    negationEn: \"I will not cook\",\n    desc: [\"Describes an event that might or could happen in the future\", \"Describes an event that might or could have happened in the past\"]\n  }, {\n    key: \"fut\",\n    tense: \"Definite Future\",\n    en: \"I will cook\",\n    breakdown: cookVerbDatum.fut.phrases[0].breakdown,\n    negation: [\"Y\u00E1h th\", [\"a\", \"IFUT\"], [\"ke\"], \"khu\u00B7n\u00ED\u00B7\"],\n    negationEn: \"I might not cook\",\n    desc: [\"Describes an event that likely will occur in the future\"]\n  }, {\n    key: \"pfv\",\n    tense: \"Perfective\",\n    en: \"I have cooked\",\n    negation: [\"Y\u00E1h te\u0294\", [\"wake\", \"PB\"], \"khu\u00B7n\u00ED\u00B7\"],\n    negationEn: \"I have not cooked\",\n    desc: [\"Describes one (or many) events that have been completed, either recently or long ago\", \"Describes a change that has occurred\", \"Describes an event that is happening right now\"]\n  }];\n  return <>\n      <SectionHeading id=\"examples\" level={2}>\n        Active Verb Examples\n      </SectionHeading>\n\n      <Text>\n        Below is a table with each of the six tenses we&lsquo;re looking at,\n        their negations, and descriptions as to how they&lsquo;re used.\n      </Text>\n\n      <TableWrapper columns={[{\n      accessorKey: \"key\",\n      // @ts-expect-error To be addressed\n      cell: (key, row) => <TextArray>\n                <span className=\"underline\">{tenseMap[key]}</span>\n                <TextBreakdown breakdown={tenseBreakdownMap[key]} typeFallback=\"PR\" wrap=\"nowrap\" />\n                <div></div>\n                {row.en}\n              </TextArray>,\n      header: \"Tense\"\n    }, {\n      accessorKey: \"desc\",\n      // @ts-expect-error To be addressed\n      cell: desc => <Flex direction=\"column\" gap={2}>\n                <TextArray>{desc}</TextArray>\n              </Flex>,\n      header: \"Description\"\n    }, {\n      accessorKey: \"negation\",\n      // @ts-expect-error To be addressed\n      cell: (negation, row) => <TextArray>\n                <TextBreakdown breakdown={negation} typeFallback=\"PR\" wrap=\"nowrap\" />\n                {row.negationEn}\n              </TextArray>,\n      header: \"Negation\"\n    }]} data={data} />\n\n      <Text>There are two things to note here:</Text>\n      <List ordered>\n        <List.Item>\n          The &quot;Indefinite Future&quot; and &quot;Future&quot; negations are\n          the same, just like in previous modules\n        </List.Item>\n        <List.Item>\n          The &quot;Perfective&quot; and &quot;Definite&quot; negations are the\n          same, and use blue pronominals (the Perfective form)\n        </List.Item>\n      </List>\n    </>;\n}\n_c5 = ExamplesSection;\nfunction DailyActivitiesSection() {\n  return <>\n      <SectionHeading id=\"daily-activities\" level={2}>\n        Daily Activities\n      </SectionHeading>\n\n      <Bleed mx={{\n      xs: 0,\n      md: 16,\n      lg: 32\n    }}>\n        <Accordion type=\"multiple\">\n          {createModule6VerbList().map(v => {\n          const data = TENSE_LIST.filter(tense => !!v[tense]).map(tense => ({\n            colour: v[tense].type,\n            tense,\n            text: (tense === \"cmd\" ? v[tense].phrases.find(p => p.pronoun === \"u\") : v[tense].phrases.find(p => p.pronoun === \"i\") ?? v[tense].phrases.find(p => p.pronoun === \"it\")).breakdown\n          }));\n          return <AccordionItem id={_.kebabCase(v.key)} key={v.key} value={v.key}>\n                <AccordionTrigger>{v.en}</AccordionTrigger>\n                <AccordionContent>\n                  {v.exceptions?.includes(1) ? <Text>This uses the &quot;it&quot; pronominals.</Text> : null}\n\n                  <TableWrapper bleed={0} columns={[{\n                accessorKey: \"tense\",\n                // @ts-expect-error To be fixed in LO-12\n                cell: value => tenseMap[value],\n                header: \"Tense\"\n              }, {\n                accessorKey: \"text\",\n                // @ts-expect-error To be fixed in LO-12\n                cell: (value, row) => <TextBreakdown breakdown={value} typeFallback={row.colour} />,\n                header: \"\"\n              }]} data={data} />\n                </AccordionContent>\n              </AccordionItem>;\n        })}\n        </Accordion>\n      </Bleed>\n    </>;\n}\n_c6 = DailyActivitiesSection;\nfunction VerbsParadigmsSection() {\n  const list = createModule6VerbList();\n  return <>\n      <SectionHeading id=\"paradigms\" level={2}>\n        Paradigms for Select Active Verbs\n      </SectionHeading>\n\n      <Text>\n        This section covers paradigms for a select number of verbs from the\n        previous section.\n      </Text>\n\n      {verbsWithParadigms.map(datum => <VerbParadigms {...datum} key={datum.key} verbDatum={list.find(v => v.key === datum.key)} />)}\n    </>;\n}\n_c7 = VerbsParadigmsSection;\nfunction VerbParadigms({\n  colour,\n  prefix,\n  root,\n  stem,\n  verbDatum\n}) {\n  return <>\n      <SectionHeading id={formatVerbParadigmSectionId(verbDatum)} level={3}>\n        {root} \u2014 {verbDatum.en}\n      </SectionHeading>\n\n      <Text>\n        {stem === \"irregular\" ? \"This word is irregular, and its conjugations depend on context.\" : <>\n            This word has {stem.includes(\"C\") ? \"a\" : \"an\"}{\" \"}\n            <Pronominal color={colour || \"r\"}>{stem}</Pronominal> stem\n            {prefix && <>\n                {\" \"}\n                with a <Letter>{prefix}</Letter> prefix\n              </>}\n            .\n          </>}\n      </Text>\n\n      <Bleed mx={{\n      xs: 0,\n      md: 16,\n      lg: 32\n    }}>\n        <Accordion type=\"multiple\">\n          {TENSE_LIST.map(tense => verbDatum[tense] ? <AccordionItem key={tense} value={tense}>\n                <AccordionTrigger>{tenseMap[tense]}</AccordionTrigger>\n                <AccordionContent>\n                  <ParadigmTable bleed={0} columnVisibility={columnVisibility} data={verbDatum[tense]} key={tense} allowedPronouns={verbDatum.pronouns ?? pronouns} />\n                </AccordionContent>\n              </AccordionItem> : null)}\n        </Accordion>\n      </Bleed>\n    </>;\n}\n_c8 = VerbParadigms;\nconst formatVerbParadigmSectionId = verbDatum => `paradigm-${_.kebabCase(verbDatum.key)}`;\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7, _c8;\n$RefreshReg$(_c, \"LearnModule06\");\n$RefreshReg$(_c2, \"StativeVsActiveSection\");\n$RefreshReg$(_c3, \"OneidaTermsForTenses\");\n$RefreshReg$(_c4, \"HowConstructedSection\");\n$RefreshReg$(_c5, \"ExamplesSection\");\n$RefreshReg$(_c6, \"DailyActivitiesSection\");\n$RefreshReg$(_c7, \"VerbsParadigmsSection\");\n$RefreshReg$(_c8, \"VerbParadigms\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4BA,oBAAc;AAsFL;AAsd8B;AAvkBvC,IAAI,CAAC,OAAO,gBAAgB,CAAC,OAAO,gBAAgB,CAAC,OAAO,kBAAkB;AAC5E,UAAQ,KAAK,kGAAkG;AACjH,OAAO;AACD,mBAAiB,OAAO;AACxB,mBAAiB,OAAO;AAC5B,SAAO,eAAe,CAAC,MAAM,OAAO;AAClC,WAAO,iBAAiB,SAAS,MAAM,oCAAsC,EAAE;AAAA,EACjF;AACA,SAAO,eAAe,OAAO,iBAAiB;AAChD;AANM;AACA;AAON,IAAI,aAAa;AACf,cAAY,MAAc;AAAA;AAAA,IAE1B;AAAA,EAA+B;AAC/B,cAAY,IAAI,eAAe;AACjC;AAuBA,IAAM,aAAa,CAAC,OAAO,OAAO,OAAO,OAAO,QAAQ,KAAK;AAC7D,IAAM,WAAW;AAAA,EACf,KAAK;AAAA,EACL,KAAK;AAAA,EACL,KAAK;AAAA,EACL,KAAK;AAAA,EACL,MAAM;AAAA,EACN,KAAK;AACP;AACA,IAAM,oBAAoB;AAAA,EACxB,KAAK,CAAC,cAAS,CAAC,KAAK,KAAK,GAAG,CAAC,KAAK,MAAM,GAAG,CAAC,IAAI,GAAG,UAAO;AAAA,EAC3D,KAAK,CAAC,CAAC,KAAK,KAAK,GAAG,CAAC,WAAM,KAAK,GAAG,CAAC,GAAG,GAAG,uBAAU;AAAA,EACpD,KAAK,CAAC,CAAC,KAAK,KAAK,GAAG,CAAC,UAAK,KAAK,GAAG,CAAC,GAAG,GAAG,uBAAU;AAAA,EACnD,KAAK,CAAC,cAAS,CAAC,MAAM,KAAK,GAAG,CAAC,GAAG,GAAG,kBAAU;AAAA,EAC/C,MAAM,CAAC,CAAC,KAAK,KAAK,GAAG,CAAC,KAAK,MAAM,GAAG,CAAC,GAAG,GAAG,uBAAU;AAAA,EACrD,KAAK,CAAC,CAAC,MAAM,KAAK,GAAG,CAAC,OAAO,IAAI,GAAG,uBAAU;AAChD;AACA,IAAM,mBAAmB;AAAA,EACvB,gBAAgB;AAAA,EAChB,eAAe;AACjB;AACA,IAAM,qBAAqB,CAAC;AAAA,EAC1B,KAAK;AAAA,EACL,QAAQ;AAAA,EACR,MAAM;AAAA,EACN,MAAM;AACR,GAAG;AAAA,EACD,KAAK;AAAA,EACL,QAAQ;AAAA,EACR,MAAM;AAAA,EACN,MAAM;AACR,GAAG;AAAA,EACD,KAAK;AAAA,EACL,MAAM;AAAA,EACN,MAAM;AACR,GAAG;AAAA,EACD,KAAK;AAAA,EACL,QAAQ;AAAA,EACR,MAAM;AAAA,EACN,MAAM;AACR,GAAG;AAAA,EACD,KAAK;AAAA,EACL,MAAM;AAAA,EACN,MAAM;AACR,GAAG;AAAA,EACD,KAAK;AAAA,EACL,MAAM;AAAA,EACN,MAAM;AACR,GAAG;AAAA,EACD,KAAK;AAAA,EACL,QAAQ;AAAA,EACR,MAAM;AAAA,EACN,MAAM;AACR,GAAG;AAAA,EACD,KAAK;AAAA,EACL,QAAQ;AAAA,EACR,MAAM;AAAA,EACN,MAAM;AACR,GAAG;AAAA,EACD,KAAK;AAAA,EACL,QAAQ;AAAA,EACR,MAAM;AAAA,EACN,MAAM;AACR,CAAC;AACM,IAAM,OAAO,MAAM;AACxB,SAAO,CAAC;AAAA,IACN,OAAO;AAAA,EACT,GAAG;AAAA,IACD,MAAM;AAAA,IACN,SAAS;AAAA,EACX,CAAC;AACH;AACe,SAAR,gBAAiC;AACtC,QAAM,OAAO,sBAAsB;AACnC,SAAO,sFACH;AAAA,uDAAC,kBAAe,OAAO,GAAG,wBAA1B;AAAA;AAAA;AAAA;AAAA,WAAkC;AAAA,IAElC,mDAAC,OAAI,IAAI,GACP,6DAAC,UAAO,QAAO,WACb;AAAA,yDAAC,OAAE,qBAAH;AAAA;AAAA;AAAA;AAAA,aAAQ;AAAA,MAAI;AAAA,SADd;AAAA;AAAA;AAAA;AAAA,WAEA,KAHF;AAAA;AAAA;AAAA;AAAA,WAIA;AAAA,IAEA,mDAAC,mBACC;AAAA,yDAAC,gBAAI,MAAJ,EAAS,OAAM,gBAAe,OAAM,WAArC;AAAA;AAAA;AAAA;AAAA,aAA6C;AAAA,MAC7C,mDAAC,gBAAI,MAAJ,EAAS,OAAM,2BAA0B,OAAM,6BAAhD;AAAA;AAAA;AAAA;AAAA,aAA0E;AAAA,MAC1E,mDAAC,gBAAI,MAAJ,EAAS,OAAM,oCAAmC,OAAM,yBAAzD;AAAA;AAAA;AAAA;AAAA,aAA+E;AAAA,MAC/E,mDAAC,gBAAI,MAAJ,EAAS,OAAM,wBAAuB,OAAM,cAA7C;AAAA;AAAA;AAAA;AAAA,aAAwD;AAAA,MAExD,mDAAC,gBAAI,MAAJ,EAAS,OAAM,oBAAmB,OAAM,oBACvC,6DAAC,gBAAI,SAAJ,EACE,gCAAsB,EAAE,IAAI,OAAK,mDAAC,gBAAI,MAAJ,EAAqB,OAAO,EAAE,IAAI,OAAO,cAAAA,QAAE,UAAU,EAAE,GAAG,KAA5C,EAAE,KAAjB;AAAA;AAAA;AAAA;AAAA,aAA8D,CAAE,KADpG;AAAA;AAAA;AAAA;AAAA,aAEA,KAHF;AAAA;AAAA;AAAA;AAAA,aAIA;AAAA,MAEA,mDAAC,gBAAI,MAAJ,EAAS,OAAM,qCAAoC,OAAM,aACxD,6DAAC,gBAAI,SAAJ,EACE,6BAAmB,IAAI,OAAK,mDAAC,gBAAI,MAAJ,EAAqB,OAAO,EAAE,MAAM,OAAO,4BAA4B,KAAK,KAAK,QAAM,GAAG,QAAQ,EAAE,GAAG,CAAC,KAA1F,EAAE,KAAjB;AAAA;AAAA;AAAA;AAAA,aAA4G,CAAE,KAD7I;AAAA;AAAA;AAAA;AAAA,aAEA,KAHF;AAAA;AAAA;AAAA;AAAA,aAIA;AAAA,MAEA,mDAAC,gBAAI,MAAJ,EAAS,OAAM,yBAAwB,OAAM,2BAA9C;AAAA;AAAA;AAAA;AAAA,aAAsE;AAAA,SAlBxE;AAAA;AAAA;AAAA;AAAA,WAmBA;AAAA,IAEA,mDAAC,4BAAD;AAAA;AAAA;AAAA;AAAA,WAAwB;AAAA,IACxB,mDAAC,0BAAD;AAAA;AAAA;AAAA;AAAA,WAAsB;AAAA,IACtB,mDAAC,2BAAD;AAAA;AAAA;AAAA;AAAA,WAAuB;AAAA,IACvB,mDAAC,qBAAD;AAAA;AAAA;AAAA;AAAA,WAAiB;AAAA,IACjB,mDAAC,4BAAD;AAAA;AAAA;AAAA;AAAA,WAAwB;AAAA,IAExB,mDAAC,2BAAD;AAAA;AAAA;AAAA;AAAA,WAAuB;AAAA,IAEvB,mDAAC,+BAA4B,OAAM,cAAnC;AAAA;AAAA;AAAA;AAAA,WAA8C;AAAA,OAtC3C;AAAA;AAAA;AAAA;AAAA,SAuCL;AACJ;AACA,KAAK;AACL,SAAS,yBAAyB;AAChC,QAAM,gBAAgB,sBAAsB,EAAE,KAAK,OAAK,EAAE,QAAQ,MAAM;AACxE,SAAO,sFACH;AAAA,uDAAC,kBAAe,IAAG,SAAQ,OAAO,GAAG,4BAArC;AAAA;AAAA;AAAA;AAAA,WAEA;AAAA,IAEA,mDAAC,QACC;AAAA,yDAAC,QAAK,MAAK,mBAAkB,wBAA7B;AAAA;AAAA;AAAA;AAAA,aAAqC;AAAA,MAAO;AAAA,MAAS;AAAA,MACrD,mDAAC,OAAE,6BAAH;AAAA;AAAA;AAAA;AAAA,aAAgB;AAAA,MAAI;AAAA,MAAoB;AAAA,MACxC,mDAAC,OAAE,0DAAH;AAAA;AAAA;AAAA;AAAA,aAA6C;AAAA,MAAI;AAAA,SAHnD;AAAA;AAAA;AAAA;AAAA,WAKA;AAAA,IAEA,mDAAC,gBAAa,SAAS;AAAA,MAAC;AAAA,QACxB,GAAG,aAAa;AAAA,QAChB,aAAa;AAAA,MACf;AAAA;AAAA,MAEA,aAAa,0BAA0B,IAAI;AAAA,MAAG,aAAa;AAAA,IAAa,GAAG,MAAM,CAAC;AAAA,MAChF,OAAO;AAAA,MACP,IAAI;AAAA,MACJ,WAAW,CAAC,CAAC,KAAK,GAAG,oBAAY;AAAA,IACnC,GAAG;AAAA,MACD,OAAO;AAAA,MACP,IAAI;AAAA,MACJ,WAAW,CAAC,CAAC,KAAK,GAAG,uBAAe,CAAC,cAAQ,MAAM,CAAC;AAAA,IACtD,GAAG;AAAA,MACD,OAAO;AAAA,MACP,IAAI;AAAA,MACJ,WAAW,CAAC,CAAC,UAAK,KAAK,GAAG,CAAC,KAAK,GAAG,sBAAc,CAAC,cAAS,KAAK,CAAC;AAAA,IACnE,GAAG;AAAA,MACD,OAAO;AAAA,MACP,IAAI;AAAA,MACJ,WAAW,CAAC,CAAC,KAAK,MAAM,GAAG,CAAC,SAAM,GAAG,sBAAc,CAAC,cAAS,MAAM,CAAC;AAAA,IACtE,GAAG;AAAA,MACD,OAAO;AAAA,MACP,IAAI;AAAA,MACJ,WAAW,CAAC,CAAC,GAAG,GAAG,sBAAc,CAAC,OAAO,KAAK,CAAC;AAAA,IACjD,CAAC,KAzBC;AAAA;AAAA;AAAA;AAAA,WAyBE;AAAA,IAEF,mDAAC,QAAK;AAAA;AAAA,MACsB,mDAAC,OAAE,4BAAH;AAAA;AAAA;AAAA;AAAA,aAAe;AAAA,MAAI;AAAA,MAAe;AAAA,MAC5D,mDAAC,OAAE,8CAAH;AAAA;AAAA;AAAA;AAAA,aAAiC;AAAA,MAAI;AAAA,SAFvC;AAAA;AAAA;AAAA;AAAA,WAIA;AAAA,IAEA,mDAAC,gBAAa,SAAS;AAAA,MAAC;AAAA,QACxB,GAAG,aAAa;AAAA,QAChB,aAAa;AAAA,MACf;AAAA;AAAA,MAEA,aAAa,0BAA0B,IAAI;AAAA,MAAG,aAAa;AAAA,IAAa,GAAG,MAAM,CAAC;AAAA,MAChF,OAAO;AAAA,MACP,IAAI;AAAA,MACJ,WAAW,cAAc,IAAI,QAAQ,CAAC,EAAE;AAAA,IAC1C,GAAG;AAAA,MACD,OAAO;AAAA,MACP,IAAI;AAAA,MACJ,WAAW,CAAC,CAAC,IAAI,GAAG,gBAAU,CAAC,gBAAW,MAAM,CAAC;AAAA,IACnD,GAAG;AAAA,MACD,OAAO;AAAA,MACP,IAAI;AAAA,MACJ,WAAW,CAAC,CAAC,UAAK,KAAK,GAAG,CAAC,IAAI,GAAG,gBAAU,CAAC,cAAS,KAAK,CAAC;AAAA,IAC9D,GAAG;AAAA,MACD,OAAO;AAAA,MACP,IAAI;AAAA,MACJ,WAAW,cAAc,IAAI,QAAQ,CAAC,EAAE;AAAA,IAC1C,GAAG;AAAA,MACD,OAAO;AAAA,MACP,IAAI;AAAA,MACJ,WAAW,cAAc,KAAK,QAAQ,CAAC,EAAE;AAAA,IAC3C,GAAG;AAAA,MACD,OAAO;AAAA,MACP,IAAI;AAAA,MACJ,WAAW,cAAc,IAAI,QAAQ,CAAC,EAAE;AAAA,IAC1C,GAAG;AAAA,MACD,OAAO;AAAA,MACP,IAAI;AAAA,MACJ,WAAW,CAAC,CAAC,QAAQ,IAAI,GAAG,UAAO;AAAA,IACrC,GAAG;AAAA,MACD,OAAO;AAAA,MACP,IAAI;AAAA,MACJ,WAAW,CAAC,CAAC,QAAQ,IAAI,GAAG,SAAS,CAAC,WAAQ,MAAM,CAAC;AAAA,IACvD,GAAG;AAAA,MACD,OAAO;AAAA,MACP,IAAI;AAAA,MACJ,WAAW,CAAC,CAAC,QAAQ,IAAI,GAAG,aAAU,CAAC,cAAQ,MAAM,CAAC;AAAA,IACxD,GAAG;AAAA,MACD,OAAO;AAAA,MACP,IAAI;AAAA,MACJ,WAAW,CAAC,CAAC,KAAK,MAAM,GAAG,CAAC,UAAO,IAAI,GAAG,aAAU,CAAC,YAAO,MAAM,CAAC;AAAA,IACrE,GAAG;AAAA,MACD,OAAO;AAAA,MACP,IAAI;AAAA,MACJ,WAAW,cAAc,IAAI,QAAQ,CAAC,EAAE;AAAA,IAC1C,CAAC,KAjDC;AAAA;AAAA;AAAA;AAAA,WAiDE;AAAA,IAEF,mDAAC,QAAK,+CAAN;AAAA;AAAA;AAAA;AAAA,WAAqC;AAAA,IAErC,mDAAC,QACC;AAAA,yDAAC,KAAK,MAAL,EAAU,wBAAX;AAAA;AAAA;AAAA;AAAA,aAAmB;AAAA,MACnB,mDAAC,KAAK,MAAL,EAAU,6BAAX;AAAA;AAAA;AAAA;AAAA,aAAwB;AAAA,MACxB,mDAAC,KAAK,MAAL,EAAU,iCAAX;AAAA;AAAA;AAAA;AAAA,aAA4B;AAAA,MAC5B,mDAAC,KAAK,MAAL,EAAU,+BAAX;AAAA;AAAA;AAAA;AAAA,aAA0B;AAAA,MAC1B,mDAAC,KAAK,MAAL,EAAU,0BAAX;AAAA;AAAA;AAAA;AAAA,aAAqB;AAAA,MACrB,mDAAC,KAAK,MAAL,EAAU,uBAAX;AAAA;AAAA;AAAA;AAAA,aAAkB;AAAA,SANpB;AAAA;AAAA;AAAA;AAAA,WAOA;AAAA,IAEA,mDAAC,UAAO,6MAAR;AAAA;AAAA;AAAA;AAAA,WAIA;AAAA,OA/GG;AAAA;AAAA;AAAA;AAAA,SAgHL;AACJ;AACA,MAAM;AACN,SAAS,uBAAuB;AAC9B,SAAO,sFACH;AAAA,uDAAC,kBAAe,IAAG,2BAA0B,OAAO,GAAG,uCAAvD;AAAA;AAAA;AAAA;AAAA,WAEA;AAAA,IAEA,mDAAC,QAAK,qMAAN;AAAA;AAAA;AAAA;AAAA,WAIA;AAAA,IAEA,mDAAC,kBAAe,OAAO,GAAG,+BAA1B;AAAA;AAAA;AAAA;AAAA,WAAyC;AAAA,IAEzC,mDAAC,gBAAa,SAAS;AAAA,MAAC;AAAA,QACxB,GAAG,aAAa;AAAA,QAChB,aAAa;AAAA,MACf;AAAA;AAAA,MAEA,aAAa,0BAA0B,IAAI;AAAA,MAAG,aAAa;AAAA,IAAa,GAAG,MAAM,CAAC;AAAA,MAChF,WAAW,CAAC,aAAU,CAAC,SAAM,GAAG,0BAAQ;AAAA,MACxC,IAAI,CAAC,wBAAwB,yBAAyB;AAAA,MACtD,OAAO;AAAA,IACT,GAAG;AAAA,MACD,WAAW,CAAC,YAAS,CAAC,WAAM,KAAK,GAAG,CAAC,QAAK,GAAG,gBAAM,CAAC,YAAO,KAAK,CAAC;AAAA,MACjE,IAAI;AAAA,MACJ,OAAO;AAAA,IACT,GAAG;AAAA,MACD,WAAW,CAAC,YAAS,CAAC,KAAK,MAAM,GAAG,CAAC,SAAM,GAAG,gBAAM,CAAC,YAAO,MAAM,CAAC;AAAA,MACnE,IAAI;AAAA,MACJ,OAAO;AAAA,IACT,GAAG;AAAA,MACD,WAAW,CAAC,YAAS,CAAC,UAAK,KAAK,GAAG,CAAC,SAAM,GAAG,gBAAM,CAAC,YAAO,KAAK,CAAC;AAAA,MACjE,IAAI;AAAA,MACJ,OAAO;AAAA,IACT,GAAG;AAAA,MACD,WAAW,CAAC,aAAU,CAAC,KAAK,GAAG,oBAAO,CAAC,KAAK,MAAM,CAAC;AAAA,MACnD,IAAI;AAAA,MACJ,OAAO;AAAA,IACT,GAAG;AAAA,MACD,WAAW,CAAC,aAAU,CAAC,KAAK,GAAG,iBAAO,CAAC,WAAQ,KAAK,CAAC;AAAA,MACrD,IAAI;AAAA,MACJ,OAAO,CAAC,eAAe,SAAS;AAAA,IAClC,GAAG;AAAA,MACD,WAAW,CAAC,oBAAY,CAAC,QAAK,GAAG,eAAK;AAAA,MACtC,IAAI;AAAA,MACJ,OAAO;AAAA,IACT,CAAC,KAjCC;AAAA;AAAA;AAAA;AAAA,WAiCE;AAAA,IAEF,mDAAC,kBAAe,OAAO,GAAG,uCAA1B;AAAA;AAAA;AAAA;AAAA,WAAiD;AAAA,IAEjD,mDAAC,gBAAa,SAAS;AAAA,MAAC;AAAA,QACxB,GAAG,aAAa;AAAA,QAChB,aAAa;AAAA,MACf;AAAA;AAAA,MAEA,aAAa,0BAA0B,IAAI;AAAA,MAAG,aAAa;AAAA,IAAa,GAAG,MAAM,CAAC;AAAA,MAChF,WAAW,CAAC,aAAU,CAAC,GAAG,GAAG,kBAAU;AAAA,MACvC,IAAI,CAAC,qBAAqB,6BAA6B;AAAA,MACvD,OAAO,CAAC,YAAY,SAAS;AAAA,IAC/B,GAAG;AAAA,MACD,WAAW,CAAC,YAAS,CAAC,WAAM,KAAK,GAAG,CAAC,GAAG,GAAG,iBAAS;AAAA,MACpD,IAAI;AAAA,MACJ,OAAO;AAAA,IACT,GAAG;AAAA,MACD,WAAW,CAAC,YAAS,CAAC,KAAK,MAAM,GAAG,CAAC,GAAG,GAAG,iBAAS;AAAA,MACpD,IAAI;AAAA,MACJ,OAAO;AAAA,IACT,GAAG;AAAA,MACD,WAAW,CAAC,YAAS,CAAC,UAAK,KAAK,GAAG,CAAC,GAAG,GAAG,iBAAS;AAAA,MACnD,IAAI;AAAA,MACJ,OAAO;AAAA,IACT,GAAG;AAAA,MACD,WAAW,CAAC,aAAU,CAAC,OAAO,IAAI,GAAG,SAAS,CAAC,gBAAM,KAAK,CAAC;AAAA,MAC3D,IAAI,CAAC,4BAA4B,kCAAkC;AAAA,MACnE,OAAO;AAAA,IACT,GAAG;AAAA,MACD,WAAW,CAAC,aAAU,CAAC,OAAO,IAAI,GAAG,0BAAa;AAAA,MAClD,IAAI;AAAA,MACJ,OAAO,CAAC,eAAe,SAAS;AAAA,IAClC,GAAG;AAAA,MACD,WAAW,CAAC,YAAS,CAAC,KAAK,MAAM,GAAG,CAAC,IAAI,GAAG,UAAO;AAAA,MACnD,IAAI;AAAA,MACJ,OAAO;AAAA,IACT,CAAC,KAjCC;AAAA;AAAA;AAAA;AAAA,WAiCE;AAAA,OAnFC;AAAA;AAAA;AAAA;AAAA,SAoFL;AACJ;AACA,MAAM;AACN,SAAS,wBAAwB;AAC/B,QAAM,OAAO,CAAC;AAAA,IACZ,KAAK;AAAA,EACP,GAAG;AAAA,IACD,KAAK;AAAA,IACL,QAAQ;AAAA,EACV,GAAG;AAAA,IACD,KAAK;AAAA,IACL,QAAQ;AAAA,IACR,eAAe,CAAC,YAAO,MAAM,IAAI;AAAA,EACnC,GAAG;AAAA,IACD,KAAK;AAAA,IACL,QAAQ;AAAA,IACR,eAAe,CAAC,KAAK,IAAI;AAAA,EAC3B,GAAG;AAAA,IACD,KAAK;AAAA,IACL,QAAQ;AAAA,IACR,eAAe,CAAC,QAAG;AAAA,EACrB,GAAG;AAAA,IACD,KAAK;AAAA,IACL,QAAQ;AAAA,IACR,QAAQ,CAAC,QAAQ,QAAQ;AAAA,EAC3B,CAAC;AACD,SAAO,sFACH;AAAA,uDAAC,kBAAe,IAAG,uBAAsB,OAAO,GAAG,gDAAnD;AAAA;AAAA;AAAA;AAAA,WAEA;AAAA,IAEA,mDAAC,gBAAa,SAAS,CAAC;AAAA,MACxB,aAAa;AAAA;AAAA,MAEb,MAAM,CAAC,KAAK,QAAQ,mDAAC,aACV;AAAA,iBAAS,GAAG;AAAA,QACb,mDAAC,iBAAc,WAAW,kBAAkB,IAAI,GAAG,GAAG,cAAa,QAAnE;AAAA;AAAA;AAAA;AAAA,eAAwE;AAAA,WAF9D;AAAA;AAAA;AAAA;AAAA,aAGZ;AAAA,MACR,QAAQ;AAAA,IACV,GAAG;AAAA,MACD,aAAa;AAAA;AAAA,MAEb,MAAM,mBAAiB,mDAAC,aAAW,2BAAiB,CAAC,KAA9B;AAAA;AAAA;AAAA;AAAA,aAAgC;AAAA,MACvD,QAAQ;AAAA,IACV,GAAG;AAAA,MACD,aAAa;AAAA;AAAA,MAEb,MAAM,YAAU,mDAAC,aACL,qBAAU,CAAC,OAAO,QAAQ,QAAQ,GAAG,IAAI,UAAQ,mDAAC,cAAW,OAAO,MAC/D,kBAD0E,MAA9B;AAAA;AAAA;AAAA;AAAA,aAE/C,CAAa,KAHX;AAAA;AAAA;AAAA;AAAA,aAIR;AAAA,MACR,QAAQ;AAAA,IACV,GAAG;AAAA,MACD,aAAa;AAAA,MACb,MAAM,MAAM;AAAA,MACZ,QAAQ;AAAA,IACV,GAAG;AAAA,MACD,aAAa;AAAA;AAAA,MAEb,MAAM,YAAU,SAAS,GAAG,kBAAkB;AAAA,MAC9C,QAAQ;AAAA,IACV,CAAC,GAAG,QA/BF;AAAA;AAAA;AAAA;AAAA,WA+Bc;AAAA,IAEd,mDAAC,QAAK,gIAAN;AAAA;AAAA;AAAA;AAAA,WAGA;AAAA,OAzCG;AAAA;AAAA;AAAA;AAAA,SA0CL;AACJ;AACA,MAAM;AACN,SAAS,kBAAkB;AACzB,QAAM,gBAAgB,sBAAsB,EAAE,KAAK,OAAK,EAAE,QAAQ,MAAM;AACxE,QAAM,OAAO,CAAC;AAAA,IACZ,KAAK;AAAA,IACL,OAAO;AAAA,IACP,IAAI;AAAA,IACJ,WAAW,cAAc,IAAI,QAAQ,CAAC,EAAE;AAAA,IACxC,UAAU,CAAC,uBAAU,CAAC,UAAK,KAAK,GAAG,CAAC,IAAI,GAAG,OAAO;AAAA,IAClD,YAAY;AAAA,IACZ,MAAM,CAAC,iDAAiD;AAAA,EAC1D,GAAG;AAAA,IACD,KAAK;AAAA,IACL,OAAO;AAAA,IACP,IAAI;AAAA,IACJ,WAAW,cAAc,IAAI,QAAQ,CAAC,EAAE;AAAA,IACxC,UAAU,CAAC,mBAAW,CAAC,IAAI,GAAG,sBAAW;AAAA,IACzC,YAAY;AAAA,IACZ,MAAM,CAAC,yIAAyI,kDAAkD,2DAA2D;AAAA,EAC/P,GAAG;AAAA,IACD,KAAK;AAAA,IACL,OAAO;AAAA,IACP,IAAI;AAAA,IACJ,WAAW,cAAc,IAAI,QAAQ,CAAC,EAAE;AAAA,IACxC,UAAU,CAAC,mBAAW,CAAC,QAAQ,IAAI,GAAG,kBAAS;AAAA,IAC/C,YAAY;AAAA,IACZ,MAAM,CAAC,kEAAkE,0EAA0E;AAAA,EACrJ,GAAG;AAAA,IACD,KAAK;AAAA,IACL,OAAO;AAAA,IACP,IAAI;AAAA,IACJ,WAAW,cAAc,KAAK,QAAQ,CAAC,EAAE;AAAA,IACzC,UAAU,CAAC,aAAU,CAAC,KAAK,MAAM,GAAG,CAAC,IAAI,GAAG,kBAAS;AAAA,IACrD,YAAY;AAAA,IACZ,MAAM,CAAC,+DAA+D,kEAAkE;AAAA,EAC1I,GAAG;AAAA,IACD,KAAK;AAAA,IACL,OAAO;AAAA,IACP,IAAI;AAAA,IACJ,WAAW,cAAc,IAAI,QAAQ,CAAC,EAAE;AAAA,IACxC,UAAU,CAAC,aAAU,CAAC,KAAK,MAAM,GAAG,CAAC,IAAI,GAAG,kBAAS;AAAA,IACrD,YAAY;AAAA,IACZ,MAAM,CAAC,yDAAyD;AAAA,EAClE,GAAG;AAAA,IACD,KAAK;AAAA,IACL,OAAO;AAAA,IACP,IAAI;AAAA,IACJ,UAAU,CAAC,mBAAW,CAAC,QAAQ,IAAI,GAAG,kBAAS;AAAA,IAC/C,YAAY;AAAA,IACZ,MAAM,CAAC,wFAAwF,wCAAwC,gDAAgD;AAAA,EACzL,CAAC;AACD,SAAO,sFACH;AAAA,uDAAC,kBAAe,IAAG,YAAW,OAAO,GAAG,oCAAxC;AAAA;AAAA;AAAA;AAAA,WAEA;AAAA,IAEA,mDAAC,QAAK,kJAAN;AAAA;AAAA;AAAA;AAAA,WAGA;AAAA,IAEA,mDAAC,gBAAa,SAAS,CAAC;AAAA,MACxB,aAAa;AAAA;AAAA,MAEb,MAAM,CAAC,KAAK,QAAQ,mDAAC,aACX;AAAA,2DAAC,UAAK,WAAU,aAAa,mBAAS,GAAG,KAAzC;AAAA;AAAA;AAAA;AAAA,eAA2C;AAAA,QAC3C,mDAAC,iBAAc,WAAW,kBAAkB,GAAG,GAAG,cAAa,MAAK,MAAK,YAAzE;AAAA;AAAA;AAAA;AAAA,eAAkF;AAAA,QAClF,mDAAC,WAAD;AAAA;AAAA;AAAA;AAAA,eAAK;AAAA,QACJ,IAAI;AAAA,WAJK;AAAA;AAAA;AAAA;AAAA,aAKZ;AAAA,MACR,QAAQ;AAAA,IACV,GAAG;AAAA,MACD,aAAa;AAAA;AAAA,MAEb,MAAM,UAAQ,mDAAC,QAAK,WAAU,UAAS,KAAK,GAClC,6DAAC,aAAW,kBAAZ;AAAA;AAAA;AAAA;AAAA,aAAiB,KADb;AAAA;AAAA;AAAA;AAAA,aAEN;AAAA,MACR,QAAQ;AAAA,IACV,GAAG;AAAA,MACD,aAAa;AAAA;AAAA,MAEb,MAAM,CAAC,UAAU,QAAQ,mDAAC,aAChB;AAAA,2DAAC,iBAAc,WAAW,UAAU,cAAa,MAAK,MAAK,YAA3D;AAAA;AAAA;AAAA;AAAA,eAAoE;AAAA,QACnE,IAAI;AAAA,WAFU;AAAA;AAAA;AAAA;AAAA,aAGjB;AAAA,MACR,QAAQ;AAAA,IACV,CAAC,GAAG,QAzBF;AAAA;AAAA;AAAA;AAAA,WAyBc;AAAA,IAEd,mDAAC,QAAK,kDAAN;AAAA;AAAA;AAAA;AAAA,WAAwC;AAAA,IACxC,mDAAC,QAAK,SAAO,MACX;AAAA,yDAAC,KAAK,MAAL,EAAU,0GAAX;AAAA;AAAA;AAAA;AAAA,aAGA;AAAA,MACA,mDAAC,KAAK,MAAL,EAAU,sHAAX;AAAA;AAAA;AAAA;AAAA,aAGA;AAAA,SARF;AAAA;AAAA;AAAA;AAAA,WASA;AAAA,OA/CG;AAAA;AAAA;AAAA;AAAA,SAgDL;AACJ;AACA,MAAM;AACN,SAAS,yBAAyB;AAChC,SAAO,sFACH;AAAA,uDAAC,kBAAe,IAAG,oBAAmB,OAAO,GAAG,gCAAhD;AAAA;AAAA;AAAA;AAAA,WAEA;AAAA,IAEA,mDAAC,SAAM,IAAI;AAAA,MACX,IAAI;AAAA,MACJ,IAAI;AAAA,MACJ,IAAI;AAAA,IACN,GACI,6DAAC,aAAU,MAAK,YACb,gCAAsB,EAAE,IAAI,OAAK;AAClC,YAAM,OAAO,WAAW,OAAO,WAAS,CAAC,CAAC,EAAE,KAAK,CAAC,EAAE,IAAI,YAAU;AAAA,QAChE,QAAQ,EAAE,KAAK,EAAE;AAAA,QACjB;AAAA,QACA,OAAO,UAAU,QAAQ,EAAE,KAAK,EAAE,QAAQ,KAAK,OAAK,EAAE,YAAY,GAAG,IAAI,EAAE,KAAK,EAAE,QAAQ,KAAK,OAAK,EAAE,YAAY,GAAG,KAAK,EAAE,KAAK,EAAE,QAAQ,KAAK,OAAK,EAAE,YAAY,IAAI,GAAG;AAAA,MAC5K,EAAE;AACF,aAAO,mDAAC,iBAAc,IAAI,cAAAA,QAAE,UAAU,EAAE,GAAG,GAAe,OAAO,EAAE,KAC7D;AAAA,2DAAC,oBAAkB,YAAE,MAArB;AAAA;AAAA;AAAA;AAAA,eAAwB;AAAA,QACxB,mDAAC,oBACE;AAAA,YAAE,YAAY,SAAS,CAAC,IAAI,mDAAC,QAAK,+CAAN;AAAA;AAAA;AAAA;AAAA,iBAA+C,IAAU;AAAA,UAEtF,mDAAC,gBAAa,OAAO,GAAG,SAAS,CAAC;AAAA,YACpC,aAAa;AAAA;AAAA,YAEb,MAAM,WAAS,SAAS,KAAK;AAAA,YAC7B,QAAQ;AAAA,UACV,GAAG;AAAA,YACD,aAAa;AAAA;AAAA,YAEb,MAAM,CAAC,OAAO,QAAQ,mDAAC,iBAAc,WAAW,OAAO,cAAc,IAAI,UAAnD;AAAA;AAAA;AAAA;AAAA,mBAA2D;AAAA,YACjF,QAAQ;AAAA,UACV,CAAC,GAAG,QAVA;AAAA;AAAA;AAAA;AAAA,iBAUY;AAAA,aAbd;AAAA;AAAA;AAAA;AAAA,eAcA;AAAA,WAhB6C,EAAE,KAA9C;AAAA;AAAA;AAAA;AAAA,aAiBH;AAAA,IACN,CAAC,KAzBD;AAAA;AAAA;AAAA;AAAA,WA0BA,KA/BF;AAAA;AAAA;AAAA;AAAA,WAgCA;AAAA,OArCG;AAAA;AAAA;AAAA;AAAA,SAsCL;AACJ;AACA,MAAM;AACN,SAAS,wBAAwB;AAC/B,QAAM,OAAO,sBAAsB;AACnC,SAAO,sFACH;AAAA,uDAAC,kBAAe,IAAG,aAAY,OAAO,GAAG,iDAAzC;AAAA;AAAA;AAAA;AAAA,WAEA;AAAA,IAEA,mDAAC,QAAK,qGAAN;AAAA;AAAA;AAAA;AAAA,WAGA;AAAA,IAEC,mBAAmB,IAAI,WAAS,gDAAC,iBAAe,GAAG,OAAO,KAAK,MAAM,KAAK,WAAW,KAAK,KAAK,OAAK,EAAE,QAAQ,MAAM,GAAG,GAAG,CAAE;AAAA,OAV1H;AAAA;AAAA;AAAA;AAAA,SAWL;AACJ;AACA,MAAM;AACN,SAAS,cAAc;AAAA,EACrB;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACF,GAAG;AACD,SAAO,sFACH;AAAA,uDAAC,kBAAe,IAAI,4BAA4B,SAAS,GAAG,OAAO,GAChE;AAAA;AAAA,MAAK;AAAA,MAAI,UAAU;AAAA,SADtB;AAAA;AAAA;AAAA;AAAA,WAEA;AAAA,IAEA,mDAAC,QACE,mBAAS,cAAc,oEAAoE,sFAAE;AAAA;AAAA,MAC3E,KAAK,SAAS,GAAG,IAAI,MAAM;AAAA,MAAM;AAAA,MAChD,mDAAC,cAAW,OAAO,UAAU,KAAM,kBAAnC;AAAA;AAAA;AAAA;AAAA,aAAwC;AAAA,MAAa;AAAA,MACpD,UAAU,sFACN;AAAA;AAAA,QAAI;AAAA,QACE,mDAAC,UAAQ,oBAAT;AAAA;AAAA;AAAA;AAAA,eAAgB;AAAA,QAAS;AAAA,WAFzB;AAAA;AAAA;AAAA;AAAA,aAGT;AAAA,MAAI;AAAA,SANkF;AAAA;AAAA;AAAA;AAAA,WAQ1F,KATJ;AAAA;AAAA;AAAA;AAAA,WAUA;AAAA,IAEA,mDAAC,SAAM,IAAI;AAAA,MACX,IAAI;AAAA,MACJ,IAAI;AAAA,MACJ,IAAI;AAAA,IACN,GACI,6DAAC,aAAU,MAAK,YACb,qBAAW,IAAI,WAAS,UAAU,KAAK,IAAI,mDAAC,iBAA0B,OAAO,OACxE;AAAA,yDAAC,oBAAkB,mBAAS,KAAK,KAAjC;AAAA;AAAA;AAAA;AAAA,aAAmC;AAAA,MACnC,mDAAC,oBACC,6DAAC,iBAAc,OAAO,GAAG,kBAAoC,MAAM,UAAU,KAAK,GAAe,iBAAiB,UAAU,YAAY,YAA9C,OAA1F;AAAA;AAAA;AAAA;AAAA,aAAkJ,KADpJ;AAAA;AAAA;AAAA;AAAA,aAEA;AAAA,SAJ0D,OAApB;AAAA;AAAA;AAAA;AAAA,WAKxC,IAAmB,IAAI,KAN7B;AAAA;AAAA;AAAA;AAAA,WAOA,KAZF;AAAA;AAAA;AAAA;AAAA,WAaA;AAAA,OA9BG;AAAA;AAAA;AAAA;AAAA,SA+BL;AACJ;AACA,MAAM;AACN,IAAM,8BAA8B,eAAa,YAAY,cAAAA,QAAE,UAAU,UAAU,GAAG;AACtF,IAAI;AAAJ,IAAQ;AAAR,IAAa;AAAb,IAAkB;AAAlB,IAAuB;AAAvB,IAA4B;AAA5B,IAAiC;AAAjC,IAAsC;AACtC,aAAa,IAAI,eAAe;AAChC,aAAa,KAAK,wBAAwB;AAC1C,aAAa,KAAK,sBAAsB;AACxC,aAAa,KAAK,uBAAuB;AACzC,aAAa,KAAK,iBAAiB;AACnC,aAAa,KAAK,wBAAwB;AAC1C,aAAa,KAAK,uBAAuB;AACzC,aAAa,KAAK,eAAe;AAEjC,OAAO,eAAe;AACtB,OAAO,eAAe;",
  "names": ["_"]
}
