{
  "version": 3,
  "sources": ["css-bundle-plugin-ns:@remix-run/css-bundle", "../../app/components/Navbar.tsx", "../../@/design/primitives/navigation-menu.tsx", "../../node_modules/@radix-ui/react-navigation-menu/dist/packages/react/navigation-menu/src/index.ts", "../../node_modules/@radix-ui/react-navigation-menu/dist/packages/react/navigation-menu/src/NavigationMenu.tsx", "../../@/design/primitives/drawer.tsx", "../../node_modules/@radix-ui/react-dialog/dist/packages/react/dialog/src/index.ts", "../../node_modules/@radix-ui/react-dialog/dist/packages/react/dialog/src/Dialog.tsx", "../../node_modules/vaul/src/index.tsx", "../../node_modules/vaul/src/context.ts", "../../node_modules/vaul/dist/#style-inject:#style-inject", "../../node_modules/vaul/src/style.css", "../../node_modules/vaul/src/use-prevent-scroll.ts", "../../node_modules/vaul/src/use-composed-refs.ts", "../../node_modules/vaul/src/use-position-fixed.ts", "../../node_modules/vaul/src/use-snap-points.ts", "../../node_modules/vaul/src/helpers.ts", "../../node_modules/vaul/src/constants.ts", "../../node_modules/vaul/src/use-controllable-state.ts", "../../app/root.tsx"],
  "sourcesContent": ["export const cssBundleHref = undefined;", "// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app/components/Navbar.tsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nvar _s = $RefreshSig$();\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app/components/Navbar.tsx\");\n  import.meta.hot.lastModified = \"1718240747021.5771\";\n}\n// REMIX HMR END\n\n\"use client\";\nimport * as React from \"react\";\nimport { cn } from \"@/lib/utils\";\nimport { NavigationMenu, NavigationMenuContent, NavigationMenuItem, NavigationMenuLink, NavigationMenuList, NavigationMenuTrigger, navigationMenuTriggerStyle } from \"@/design/primitives/navigation-menu\";\nimport { Drawer, DrawerContent, DrawerTrigger } from \"@/design/primitives/drawer\";\nimport { Link } from \"@remix-run/react\";\nimport { MenuIcon } from \"lucide-react\";\nimport { Flex } from \"@/design/components/flex\";\nconst moduleNumbers = new Array(6).fill(0).map((_, i) => (i + 1).toString());\nconst toolsItems = [{\n  title: \"Numbers\",\n  href: \"/tools/numbers\",\n  description: \"Translate numbers into Oneida.\"\n}, {\n  title: \"Paradigm\",\n  href: \"/tools/paradigm\",\n  description: \"Test your pronominal knowledge.\"\n}, {\n  title: \"Clock Time\",\n  href: \"/tools/clock\",\n  description: \"Translate a digital clock time into Oneida.\"\n}];\nexport function Navbar() {\n  return <div className=\"print:hidden\">\n      <div className=\"sm:hidden\">\n        <NavbarMobile />\n      </div>\n      <div className=\"hidden sm:block\">\n        <NavbarDesktop />\n      </div>\n    </div>;\n}\n_c = Navbar;\nfunction NavbarMobile() {\n  _s();\n  const [isOpen, setIsOpen] = React.useState(false);\n  const items = [{\n    href: \"/learn\",\n    text: \"Learn\"\n  }, {\n    href: \"/about\",\n    text: \"About\"\n  }, {\n    href: \"/articles\",\n    text: \"Articles\"\n  }, {\n    href: \"/practice\",\n    text: \"Practice\"\n  }, {\n    href: \"/tools\",\n    text: \"Tools\"\n  }];\n  return <Flex align=\"center\" justify=\"end\" p={2}>\n      <Drawer open={isOpen} onOpenChange={setIsOpen}>\n        <DrawerTrigger>\n          <MenuIcon />\n        </DrawerTrigger>\n        <DrawerContent>\n          <Flex justify=\"center\">\n            <NavigationMenu>\n              <NavigationMenuList className=\"flex-col\">\n                {items.map((item, i) => <NavigationMenuItem key={i}>\n                    <NavigationMenuLink className={navigationMenuTriggerStyle(true)} href={item.href}>\n                      {item.text}\n                    </NavigationMenuLink>\n                  </NavigationMenuItem>)}\n              </NavigationMenuList>\n            </NavigationMenu>\n          </Flex>\n        </DrawerContent>\n      </Drawer>\n    </Flex>;\n}\n_s(NavbarMobile, \"+sus0Lb0ewKHdwiUhiTAJFoFyQ0=\");\n_c2 = NavbarMobile;\nfunction NavbarDesktop() {\n  return <NavigationMenu className=\"bg-gray-100\">\n      <NavigationMenuList>\n        <NavigationMenuItem>\n          <NavigationMenuLink className={navigationMenuTriggerStyle()} href=\"/about\">\n            About\n          </NavigationMenuLink>\n        </NavigationMenuItem>\n\n        <NavigationMenuItem>\n          <NavigationMenuTrigger>Learn</NavigationMenuTrigger>\n          <NavigationMenuContent>\n            <ul className=\"flex flex-col w-[240px] gap-3 p-4 \">\n              {moduleNumbers.map(num => <ListItem href={`/learn/module${num.padStart(2, \"0\")}`} key={num} title={`Module ${num}`} />)}\n            </ul>\n          </NavigationMenuContent>\n        </NavigationMenuItem>\n\n        <NavigationMenuItem>\n          <NavigationMenuLink className={navigationMenuTriggerStyle()} href=\"/articles\">\n            Articles\n          </NavigationMenuLink>\n        </NavigationMenuItem>\n\n        <NavigationMenuItem>\n          <NavigationMenuLink className={navigationMenuTriggerStyle()} href=\"/practice\">\n            Practice\n          </NavigationMenuLink>\n        </NavigationMenuItem>\n\n        <NavigationMenuItem>\n          <NavigationMenuTrigger>Tools</NavigationMenuTrigger>\n          <NavigationMenuContent>\n            <ul className=\"grid w-[320px] gap-3 p-4 md:w-[500px] md:grid-cols-2 lg:w-[600px] \">\n              {toolsItems.map(item => <ListItem href={item.href} key={item.title} title={item.title}>\n                  {item.description}\n                </ListItem>)}\n            </ul>\n          </NavigationMenuContent>\n        </NavigationMenuItem>\n      </NavigationMenuList>\n    </NavigationMenu>;\n}\n_c3 = NavbarDesktop;\nconst ListItem = React.forwardRef(_c4 = ({\n  className,\n  title,\n  children,\n  ...props\n}, ref) => {\n  return <li>\n      <NavigationMenuLink asChild>\n        <Link ref={ref} className={cn(\"block select-none space-y-1 rounded-md p-3 leading-none no-underline outline-none transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground\", className)} to={props.href} {...props}>\n          <div className=\"text-sm font-medium leading-none\">{title}</div>\n          <p className=\"line-clamp-2 text-sm leading-snug text-muted-foreground\">\n            {children}\n          </p>\n        </Link>\n      </NavigationMenuLink>\n    </li>;\n});\n_c5 = ListItem;\nListItem.displayName = \"ListItem\";\nvar _c, _c2, _c3, _c4, _c5;\n$RefreshReg$(_c, \"Navbar\");\n$RefreshReg$(_c2, \"NavbarMobile\");\n$RefreshReg$(_c3, \"NavbarDesktop\");\n$RefreshReg$(_c4, \"ListItem$React.forwardRef\");\n$RefreshReg$(_c5, \"ListItem\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;", "import * as React from \"react\";\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\";\nimport { cva } from \"class-variance-authority\";\nimport { ChevronDown } from \"lucide-react\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center mx-auto\",\n      className,\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n));\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName;\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className,\n    )}\n    {...props}\n  />\n));\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName;\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item;\n\nconst navigationMenuTriggerStyle = (isMobile = false) =>\n  cn(\n    `${isMobile ? \"bg-white py-4\" : \"bg-gray-100 py-2\"} group inline-flex h-10 w-max items-center justify-center rounded-md px-4 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[active]:bg-accent/50 data-[state=open]:bg-accent/50`,\n  );\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n));\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName;\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className,\n    )}\n    {...props}\n  />\n));\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName;\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link;\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className,\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n));\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName;\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className,\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n));\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName;\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n};\n", "export {\n  createNavigationMenuScope,\n  //\n  NavigationMenu,\n  NavigationMenuSub,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuContent,\n  NavigationMenuViewport,\n  //\n  Root,\n  Sub,\n  List,\n  Item,\n  Trigger,\n  Link,\n  Indicator,\n  Content,\n  Viewport,\n} from './NavigationMenu';\nexport type {\n  NavigationMenuProps,\n  NavigationMenuSubProps,\n  NavigationMenuListProps,\n  NavigationMenuItemProps,\n  NavigationMenuTriggerProps,\n  NavigationMenuLinkProps,\n  NavigationMenuIndicatorProps,\n  NavigationMenuContentProps,\n  NavigationMenuViewportProps,\n} from './NavigationMenu';\n", "/// <reference types=\"resize-observer-browser\" />\n\nimport * as React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createContextScope } from '@radix-ui/react-context';\nimport { composeEventHandlers } from '@radix-ui/primitive';\nimport { Primitive, dispatchDiscreteCustomEvent } from '@radix-ui/react-primitive';\nimport { useControllableState } from '@radix-ui/react-use-controllable-state';\nimport { composeRefs, useComposedRefs } from '@radix-ui/react-compose-refs';\nimport { useDirection } from '@radix-ui/react-direction';\nimport { Presence } from '@radix-ui/react-presence';\nimport { useId } from '@radix-ui/react-id';\nimport { createCollection } from '@radix-ui/react-collection';\nimport { DismissableLayer } from '@radix-ui/react-dismissable-layer';\nimport { usePrevious } from '@radix-ui/react-use-previous';\nimport { useLayoutEffect } from '@radix-ui/react-use-layout-effect';\nimport { useCallbackRef } from '@radix-ui/react-use-callback-ref';\nimport * as VisuallyHiddenPrimitive from '@radix-ui/react-visually-hidden';\n\nimport type * as Radix from '@radix-ui/react-primitive';\nimport type { Scope } from '@radix-ui/react-context';\n\ntype Orientation = 'vertical' | 'horizontal';\ntype Direction = 'ltr' | 'rtl';\n\n/* -------------------------------------------------------------------------------------------------\n * NavigationMenu\n * -----------------------------------------------------------------------------------------------*/\n\nconst NAVIGATION_MENU_NAME = 'NavigationMenu';\n\nconst [Collection, useCollection, createCollectionScope] = createCollection<\n  NavigationMenuTriggerElement,\n  { value: string }\n>(NAVIGATION_MENU_NAME);\n\nconst [FocusGroupCollection, useFocusGroupCollection, createFocusGroupCollectionScope] =\n  createCollection<FocusGroupItemElement, {}>(NAVIGATION_MENU_NAME);\n\ntype ScopedProps<P> = P & { __scopeNavigationMenu?: Scope };\nconst [createNavigationMenuContext, createNavigationMenuScope] = createContextScope(\n  NAVIGATION_MENU_NAME,\n  [createCollectionScope, createFocusGroupCollectionScope]\n);\n\ntype ContentData = {\n  ref?: React.Ref<ViewportContentMounterElement>;\n} & ViewportContentMounterProps;\n\ntype NavigationMenuContextValue = {\n  isRootMenu: boolean;\n  value: string;\n  previousValue: string;\n  baseId: string;\n  dir: Direction;\n  orientation: Orientation;\n  rootNavigationMenu: NavigationMenuElement | null;\n  indicatorTrack: HTMLDivElement | null;\n  onIndicatorTrackChange(indicatorTrack: HTMLDivElement | null): void;\n  viewport: NavigationMenuViewportElement | null;\n  onViewportChange(viewport: NavigationMenuViewportElement | null): void;\n  onViewportContentChange(contentValue: string, contentData: ContentData): void;\n  onViewportContentRemove(contentValue: string): void;\n  onTriggerEnter(itemValue: string): void;\n  onTriggerLeave(): void;\n  onContentEnter(): void;\n  onContentLeave(): void;\n  onItemSelect(itemValue: string): void;\n  onItemDismiss(): void;\n};\n\nconst [NavigationMenuProviderImpl, useNavigationMenuContext] =\n  createNavigationMenuContext<NavigationMenuContextValue>(NAVIGATION_MENU_NAME);\n\nconst [ViewportContentProvider, useViewportContentContext] = createNavigationMenuContext<{\n  items: Map<string, ContentData>;\n}>(NAVIGATION_MENU_NAME);\n\ntype NavigationMenuElement = React.ElementRef<typeof Primitive.nav>;\ntype PrimitiveNavProps = Radix.ComponentPropsWithoutRef<typeof Primitive.nav>;\ninterface NavigationMenuProps\n  extends Omit<NavigationMenuProviderProps, keyof NavigationMenuProviderPrivateProps>,\n    PrimitiveNavProps {\n  value?: string;\n  defaultValue?: string;\n  onValueChange?: (value: string) => void;\n  dir?: Direction;\n  orientation?: Orientation;\n  /**\n   * The duration from when the pointer enters the trigger until the tooltip gets opened.\n   * @defaultValue 200\n   */\n  delayDuration?: number;\n  /**\n   * How much time a user has to enter another trigger without incurring a delay again.\n   * @defaultValue 300\n   */\n  skipDelayDuration?: number;\n}\n\nconst NavigationMenu = React.forwardRef<NavigationMenuElement, NavigationMenuProps>(\n  (props: ScopedProps<NavigationMenuProps>, forwardedRef) => {\n    const {\n      __scopeNavigationMenu,\n      value: valueProp,\n      onValueChange,\n      defaultValue,\n      delayDuration = 200,\n      skipDelayDuration = 300,\n      orientation = 'horizontal',\n      dir,\n      ...NavigationMenuProps\n    } = props;\n    const [navigationMenu, setNavigationMenu] = React.useState<NavigationMenuElement | null>(null);\n    const composedRef = useComposedRefs(forwardedRef, (node) => setNavigationMenu(node));\n    const direction = useDirection(dir);\n    const openTimerRef = React.useRef(0);\n    const closeTimerRef = React.useRef(0);\n    const skipDelayTimerRef = React.useRef(0);\n    const [isOpenDelayed, setIsOpenDelayed] = React.useState(true);\n    const [value = '', setValue] = useControllableState({\n      prop: valueProp,\n      onChange: (value) => {\n        const isOpen = value !== '';\n        const hasSkipDelayDuration = skipDelayDuration > 0;\n\n        if (isOpen) {\n          window.clearTimeout(skipDelayTimerRef.current);\n          if (hasSkipDelayDuration) setIsOpenDelayed(false);\n        } else {\n          window.clearTimeout(skipDelayTimerRef.current);\n          skipDelayTimerRef.current = window.setTimeout(\n            () => setIsOpenDelayed(true),\n            skipDelayDuration\n          );\n        }\n\n        onValueChange?.(value);\n      },\n      defaultProp: defaultValue,\n    });\n\n    const startCloseTimer = React.useCallback(() => {\n      window.clearTimeout(closeTimerRef.current);\n      closeTimerRef.current = window.setTimeout(() => setValue(''), 150);\n    }, [setValue]);\n\n    const handleOpen = React.useCallback(\n      (itemValue: string) => {\n        window.clearTimeout(closeTimerRef.current);\n        setValue(itemValue);\n      },\n      [setValue]\n    );\n\n    const handleDelayedOpen = React.useCallback(\n      (itemValue: string) => {\n        const isOpenItem = value === itemValue;\n        if (isOpenItem) {\n          // If the item is already open (e.g. we're transitioning from the content to the trigger)\n          // then we want to clear the close timer immediately.\n          window.clearTimeout(closeTimerRef.current);\n        } else {\n          openTimerRef.current = window.setTimeout(() => {\n            window.clearTimeout(closeTimerRef.current);\n            setValue(itemValue);\n          }, delayDuration);\n        }\n      },\n      [value, setValue, delayDuration]\n    );\n\n    React.useEffect(() => {\n      return () => {\n        window.clearTimeout(openTimerRef.current);\n        window.clearTimeout(closeTimerRef.current);\n        window.clearTimeout(skipDelayTimerRef.current);\n      };\n    }, []);\n\n    return (\n      <NavigationMenuProvider\n        scope={__scopeNavigationMenu}\n        isRootMenu={true}\n        value={value}\n        dir={direction}\n        orientation={orientation}\n        rootNavigationMenu={navigationMenu}\n        onTriggerEnter={(itemValue) => {\n          window.clearTimeout(openTimerRef.current);\n          if (isOpenDelayed) handleDelayedOpen(itemValue);\n          else handleOpen(itemValue);\n        }}\n        onTriggerLeave={() => {\n          window.clearTimeout(openTimerRef.current);\n          startCloseTimer();\n        }}\n        onContentEnter={() => window.clearTimeout(closeTimerRef.current)}\n        onContentLeave={startCloseTimer}\n        onItemSelect={(itemValue) => {\n          setValue((prevValue) => (prevValue === itemValue ? '' : itemValue));\n        }}\n        onItemDismiss={() => setValue('')}\n      >\n        <Primitive.nav\n          aria-label=\"Main\"\n          data-orientation={orientation}\n          dir={direction}\n          {...NavigationMenuProps}\n          ref={composedRef}\n        />\n      </NavigationMenuProvider>\n    );\n  }\n);\n\nNavigationMenu.displayName = NAVIGATION_MENU_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * NavigationMenuSub\n * -----------------------------------------------------------------------------------------------*/\n\nconst SUB_NAME = 'NavigationMenuSub';\n\ntype NavigationMenuSubElement = React.ElementRef<typeof Primitive.div>;\ntype PrimitiveDivProps = Radix.ComponentPropsWithoutRef<typeof Primitive.div>;\ninterface NavigationMenuSubProps\n  extends Omit<NavigationMenuProviderProps, keyof NavigationMenuProviderPrivateProps>,\n    PrimitiveDivProps {\n  value?: string;\n  defaultValue?: string;\n  onValueChange?: (value: string) => void;\n  orientation?: Orientation;\n}\n\nconst NavigationMenuSub = React.forwardRef<NavigationMenuSubElement, NavigationMenuSubProps>(\n  (props: ScopedProps<NavigationMenuSubProps>, forwardedRef) => {\n    const {\n      __scopeNavigationMenu,\n      value: valueProp,\n      onValueChange,\n      defaultValue,\n      orientation = 'horizontal',\n      ...subProps\n    } = props;\n    const context = useNavigationMenuContext(SUB_NAME, __scopeNavigationMenu);\n    const [value = '', setValue] = useControllableState({\n      prop: valueProp,\n      onChange: onValueChange,\n      defaultProp: defaultValue,\n    });\n\n    return (\n      <NavigationMenuProvider\n        scope={__scopeNavigationMenu}\n        isRootMenu={false}\n        value={value}\n        dir={context.dir}\n        orientation={orientation}\n        rootNavigationMenu={context.rootNavigationMenu}\n        onTriggerEnter={(itemValue) => setValue(itemValue)}\n        onItemSelect={(itemValue) => setValue(itemValue)}\n        onItemDismiss={() => setValue('')}\n      >\n        <Primitive.div data-orientation={orientation} {...subProps} ref={forwardedRef} />\n      </NavigationMenuProvider>\n    );\n  }\n);\n\nNavigationMenuSub.displayName = SUB_NAME;\n\n/* -----------------------------------------------------------------------------------------------*/\n\ninterface NavigationMenuProviderPrivateProps {\n  isRootMenu: boolean;\n  scope: Scope;\n  children: React.ReactNode;\n  orientation: Orientation;\n  dir: Direction;\n  rootNavigationMenu: NavigationMenuElement | null;\n  value: string;\n  onTriggerEnter(itemValue: string): void;\n  onTriggerLeave?(): void;\n  onContentEnter?(): void;\n  onContentLeave?(): void;\n  onItemSelect(itemValue: string): void;\n  onItemDismiss(): void;\n}\n\ninterface NavigationMenuProviderProps extends NavigationMenuProviderPrivateProps {}\n\nconst NavigationMenuProvider: React.FC<NavigationMenuProviderProps> = (\n  props: ScopedProps<NavigationMenuProviderProps>\n) => {\n  const {\n    scope,\n    isRootMenu,\n    rootNavigationMenu,\n    dir,\n    orientation,\n    children,\n    value,\n    onItemSelect,\n    onItemDismiss,\n    onTriggerEnter,\n    onTriggerLeave,\n    onContentEnter,\n    onContentLeave,\n  } = props;\n  const [viewport, setViewport] = React.useState<NavigationMenuViewportElement | null>(null);\n  const [viewportContent, setViewportContent] = React.useState<Map<string, ContentData>>(new Map());\n  const [indicatorTrack, setIndicatorTrack] = React.useState<HTMLDivElement | null>(null);\n\n  return (\n    <NavigationMenuProviderImpl\n      scope={scope}\n      isRootMenu={isRootMenu}\n      rootNavigationMenu={rootNavigationMenu}\n      value={value}\n      previousValue={usePrevious(value)}\n      baseId={useId()}\n      dir={dir}\n      orientation={orientation}\n      viewport={viewport}\n      onViewportChange={setViewport}\n      indicatorTrack={indicatorTrack}\n      onIndicatorTrackChange={setIndicatorTrack}\n      onTriggerEnter={useCallbackRef(onTriggerEnter)}\n      onTriggerLeave={useCallbackRef(onTriggerLeave)}\n      onContentEnter={useCallbackRef(onContentEnter)}\n      onContentLeave={useCallbackRef(onContentLeave)}\n      onItemSelect={useCallbackRef(onItemSelect)}\n      onItemDismiss={useCallbackRef(onItemDismiss)}\n      onViewportContentChange={React.useCallback((contentValue, contentData) => {\n        setViewportContent((prevContent) => {\n          prevContent.set(contentValue, contentData);\n          return new Map(prevContent);\n        });\n      }, [])}\n      onViewportContentRemove={React.useCallback((contentValue) => {\n        setViewportContent((prevContent) => {\n          if (!prevContent.has(contentValue)) return prevContent;\n          prevContent.delete(contentValue);\n          return new Map(prevContent);\n        });\n      }, [])}\n    >\n      <Collection.Provider scope={scope}>\n        <ViewportContentProvider scope={scope} items={viewportContent}>\n          {children}\n        </ViewportContentProvider>\n      </Collection.Provider>\n    </NavigationMenuProviderImpl>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * NavigationMenuList\n * -----------------------------------------------------------------------------------------------*/\n\nconst LIST_NAME = 'NavigationMenuList';\n\ntype NavigationMenuListElement = React.ElementRef<typeof Primitive.ul>;\ntype PrimitiveUnorderedListProps = Radix.ComponentPropsWithoutRef<typeof Primitive.ul>;\ninterface NavigationMenuListProps extends PrimitiveUnorderedListProps {}\n\nconst NavigationMenuList = React.forwardRef<NavigationMenuListElement, NavigationMenuListProps>(\n  (props: ScopedProps<NavigationMenuListProps>, forwardedRef) => {\n    const { __scopeNavigationMenu, ...listProps } = props;\n    const context = useNavigationMenuContext(LIST_NAME, __scopeNavigationMenu);\n\n    const list = (\n      <Primitive.ul data-orientation={context.orientation} {...listProps} ref={forwardedRef} />\n    );\n\n    return (\n      <Primitive.div style={{ position: 'relative' }} ref={context.onIndicatorTrackChange}>\n        <Collection.Slot scope={__scopeNavigationMenu}>\n          {context.isRootMenu ? <FocusGroup asChild>{list}</FocusGroup> : list}\n        </Collection.Slot>\n      </Primitive.div>\n    );\n  }\n);\n\nNavigationMenuList.displayName = LIST_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * NavigationMenuItem\n * -----------------------------------------------------------------------------------------------*/\n\nconst ITEM_NAME = 'NavigationMenuItem';\n\ntype FocusProxyElement = React.ElementRef<typeof VisuallyHiddenPrimitive.Root>;\n\ntype NavigationMenuItemContextValue = {\n  value: string;\n  triggerRef: React.RefObject<NavigationMenuTriggerElement>;\n  contentRef: React.RefObject<NavigationMenuContentElement>;\n  focusProxyRef: React.RefObject<FocusProxyElement>;\n  wasEscapeCloseRef: React.MutableRefObject<boolean>;\n  onEntryKeyDown(): void;\n  onFocusProxyEnter(side: 'start' | 'end'): void;\n  onRootContentClose(): void;\n  onContentFocusOutside(): void;\n};\n\nconst [NavigationMenuItemContextProvider, useNavigationMenuItemContext] =\n  createNavigationMenuContext<NavigationMenuItemContextValue>(ITEM_NAME);\n\ntype NavigationMenuItemElement = React.ElementRef<typeof Primitive.li>;\ntype PrimitiveListItemProps = Radix.ComponentPropsWithoutRef<typeof Primitive.li>;\ninterface NavigationMenuItemProps extends PrimitiveListItemProps {\n  value?: string;\n}\n\nconst NavigationMenuItem = React.forwardRef<NavigationMenuItemElement, NavigationMenuItemProps>(\n  (props: ScopedProps<NavigationMenuItemProps>, forwardedRef) => {\n    const { __scopeNavigationMenu, value: valueProp, ...itemProps } = props;\n    const autoValue = useId();\n    // We need to provide an initial deterministic value as `useId` will return\n    // empty string on the first render and we don't want to match our internal \"closed\" value.\n    const value = valueProp || autoValue || 'LEGACY_REACT_AUTO_VALUE';\n    const contentRef = React.useRef<NavigationMenuContentElement>(null);\n    const triggerRef = React.useRef<NavigationMenuTriggerElement>(null);\n    const focusProxyRef = React.useRef<FocusProxyElement>(null);\n    const restoreContentTabOrderRef = React.useRef(() => {});\n    const wasEscapeCloseRef = React.useRef(false);\n\n    const handleContentEntry = React.useCallback((side = 'start') => {\n      if (contentRef.current) {\n        restoreContentTabOrderRef.current();\n        const candidates = getTabbableCandidates(contentRef.current);\n        if (candidates.length) focusFirst(side === 'start' ? candidates : candidates.reverse());\n      }\n    }, []);\n\n    const handleContentExit = React.useCallback(() => {\n      if (contentRef.current) {\n        const candidates = getTabbableCandidates(contentRef.current);\n        if (candidates.length) restoreContentTabOrderRef.current = removeFromTabOrder(candidates);\n      }\n    }, []);\n\n    return (\n      <NavigationMenuItemContextProvider\n        scope={__scopeNavigationMenu}\n        value={value}\n        triggerRef={triggerRef}\n        contentRef={contentRef}\n        focusProxyRef={focusProxyRef}\n        wasEscapeCloseRef={wasEscapeCloseRef}\n        onEntryKeyDown={handleContentEntry}\n        onFocusProxyEnter={handleContentEntry}\n        onRootContentClose={handleContentExit}\n        onContentFocusOutside={handleContentExit}\n      >\n        <Primitive.li {...itemProps} ref={forwardedRef} />\n      </NavigationMenuItemContextProvider>\n    );\n  }\n);\n\nNavigationMenuItem.displayName = ITEM_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * NavigationMenuTrigger\n * -----------------------------------------------------------------------------------------------*/\n\nconst TRIGGER_NAME = 'NavigationMenuTrigger';\n\ntype NavigationMenuTriggerElement = React.ElementRef<typeof Primitive.button>;\ntype PrimitiveButtonProps = Radix.ComponentPropsWithoutRef<typeof Primitive.button>;\ninterface NavigationMenuTriggerProps extends PrimitiveButtonProps {}\n\nconst NavigationMenuTrigger = React.forwardRef<\n  NavigationMenuTriggerElement,\n  NavigationMenuTriggerProps\n>((props: ScopedProps<NavigationMenuTriggerProps>, forwardedRef) => {\n  const { __scopeNavigationMenu, disabled, ...triggerProps } = props;\n  const context = useNavigationMenuContext(TRIGGER_NAME, props.__scopeNavigationMenu);\n  const itemContext = useNavigationMenuItemContext(TRIGGER_NAME, props.__scopeNavigationMenu);\n  const ref = React.useRef<NavigationMenuTriggerElement>(null);\n  const composedRefs = useComposedRefs(ref, itemContext.triggerRef, forwardedRef);\n  const triggerId = makeTriggerId(context.baseId, itemContext.value);\n  const contentId = makeContentId(context.baseId, itemContext.value);\n  const hasPointerMoveOpenedRef = React.useRef(false);\n  const wasClickCloseRef = React.useRef(false);\n  const open = itemContext.value === context.value;\n\n  return (\n    <>\n      <Collection.ItemSlot scope={__scopeNavigationMenu} value={itemContext.value}>\n        <FocusGroupItem asChild>\n          <Primitive.button\n            id={triggerId}\n            disabled={disabled}\n            data-disabled={disabled ? '' : undefined}\n            data-state={getOpenState(open)}\n            aria-expanded={open}\n            aria-controls={contentId}\n            {...triggerProps}\n            ref={composedRefs}\n            onPointerEnter={composeEventHandlers(props.onPointerEnter, () => {\n              wasClickCloseRef.current = false;\n              itemContext.wasEscapeCloseRef.current = false;\n            })}\n            onPointerMove={composeEventHandlers(\n              props.onPointerMove,\n              whenMouse(() => {\n                if (\n                  disabled ||\n                  wasClickCloseRef.current ||\n                  itemContext.wasEscapeCloseRef.current ||\n                  hasPointerMoveOpenedRef.current\n                )\n                  return;\n                context.onTriggerEnter(itemContext.value);\n                hasPointerMoveOpenedRef.current = true;\n              })\n            )}\n            onPointerLeave={composeEventHandlers(\n              props.onPointerLeave,\n              whenMouse(() => {\n                if (disabled) return;\n                context.onTriggerLeave();\n                hasPointerMoveOpenedRef.current = false;\n              })\n            )}\n            onClick={composeEventHandlers(props.onClick, () => {\n              context.onItemSelect(itemContext.value);\n              wasClickCloseRef.current = open;\n            })}\n            onKeyDown={composeEventHandlers(props.onKeyDown, (event) => {\n              const verticalEntryKey = context.dir === 'rtl' ? 'ArrowLeft' : 'ArrowRight';\n              const entryKey = { horizontal: 'ArrowDown', vertical: verticalEntryKey }[\n                context.orientation\n              ];\n              if (open && event.key === entryKey) {\n                itemContext.onEntryKeyDown();\n                // Prevent FocusGroupItem from handling the event\n                event.preventDefault();\n              }\n            })}\n          />\n        </FocusGroupItem>\n      </Collection.ItemSlot>\n\n      {/* Proxy tab order between trigger and content */}\n      {open && (\n        <>\n          <VisuallyHiddenPrimitive.Root\n            aria-hidden\n            tabIndex={0}\n            ref={itemContext.focusProxyRef}\n            onFocus={(event) => {\n              const content = itemContext.contentRef.current;\n              const prevFocusedElement = event.relatedTarget as HTMLElement | null;\n              const wasTriggerFocused = prevFocusedElement === ref.current;\n              const wasFocusFromContent = content?.contains(prevFocusedElement);\n\n              if (wasTriggerFocused || !wasFocusFromContent) {\n                itemContext.onFocusProxyEnter(wasTriggerFocused ? 'start' : 'end');\n              }\n            }}\n          />\n\n          {/* Restructure a11y tree to make content accessible to screen reader when using the viewport */}\n          {context.viewport && <span aria-owns={contentId} />}\n        </>\n      )}\n    </>\n  );\n});\n\nNavigationMenuTrigger.displayName = TRIGGER_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * NavigationMenuLink\n * -----------------------------------------------------------------------------------------------*/\n\nconst LINK_NAME = 'NavigationMenuLink';\nconst LINK_SELECT = 'navigationMenu.linkSelect';\n\ntype NavigationMenuLinkElement = React.ElementRef<typeof Primitive.a>;\ntype PrimitiveLinkProps = Radix.ComponentPropsWithoutRef<typeof Primitive.a>;\ninterface NavigationMenuLinkProps extends Omit<PrimitiveLinkProps, 'onSelect'> {\n  active?: boolean;\n  onSelect?: (event: Event) => void;\n}\n\nconst NavigationMenuLink = React.forwardRef<NavigationMenuLinkElement, NavigationMenuLinkProps>(\n  (props: ScopedProps<NavigationMenuLinkProps>, forwardedRef) => {\n    const { __scopeNavigationMenu, active, onSelect, ...linkProps } = props;\n\n    return (\n      <FocusGroupItem asChild>\n        <Primitive.a\n          data-active={active ? '' : undefined}\n          aria-current={active ? 'page' : undefined}\n          {...linkProps}\n          ref={forwardedRef}\n          onClick={composeEventHandlers(\n            props.onClick,\n            (event) => {\n              const target = event.target as HTMLElement;\n              const linkSelectEvent = new CustomEvent(LINK_SELECT, {\n                bubbles: true,\n                cancelable: true,\n              });\n              target.addEventListener(LINK_SELECT, (event) => onSelect?.(event), { once: true });\n              dispatchDiscreteCustomEvent(target, linkSelectEvent);\n\n              if (!linkSelectEvent.defaultPrevented && !event.metaKey) {\n                const rootContentDismissEvent = new CustomEvent(ROOT_CONTENT_DISMISS, {\n                  bubbles: true,\n                  cancelable: true,\n                });\n                dispatchDiscreteCustomEvent(target, rootContentDismissEvent);\n              }\n            },\n            { checkForDefaultPrevented: false }\n          )}\n        />\n      </FocusGroupItem>\n    );\n  }\n);\n\nNavigationMenuLink.displayName = LINK_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * NavigationMenuIndicator\n * -----------------------------------------------------------------------------------------------*/\n\nconst INDICATOR_NAME = 'NavigationMenuIndicator';\n\ntype NavigationMenuIndicatorElement = NavigationMenuIndicatorImplElement;\ninterface NavigationMenuIndicatorProps extends NavigationMenuIndicatorImplProps {\n  /**\n   * Used to force mounting when more control is needed. Useful when\n   * controlling animation with React animation libraries.\n   */\n  forceMount?: true;\n}\n\nconst NavigationMenuIndicator = React.forwardRef<\n  NavigationMenuIndicatorElement,\n  NavigationMenuIndicatorProps\n>((props: ScopedProps<NavigationMenuIndicatorProps>, forwardedRef) => {\n  const { forceMount, ...indicatorProps } = props;\n  const context = useNavigationMenuContext(INDICATOR_NAME, props.__scopeNavigationMenu);\n  const isVisible = Boolean(context.value);\n\n  return context.indicatorTrack\n    ? ReactDOM.createPortal(\n        <Presence present={forceMount || isVisible}>\n          <NavigationMenuIndicatorImpl {...indicatorProps} ref={forwardedRef} />\n        </Presence>,\n        context.indicatorTrack\n      )\n    : null;\n});\n\nNavigationMenuIndicator.displayName = INDICATOR_NAME;\n\ntype NavigationMenuIndicatorImplElement = React.ElementRef<typeof Primitive.div>;\ninterface NavigationMenuIndicatorImplProps extends PrimitiveDivProps {}\n\nconst NavigationMenuIndicatorImpl = React.forwardRef<\n  NavigationMenuIndicatorImplElement,\n  NavigationMenuIndicatorImplProps\n>((props: ScopedProps<NavigationMenuIndicatorImplProps>, forwardedRef) => {\n  const { __scopeNavigationMenu, ...indicatorProps } = props;\n  const context = useNavigationMenuContext(INDICATOR_NAME, __scopeNavigationMenu);\n  const getItems = useCollection(__scopeNavigationMenu);\n  const [activeTrigger, setActiveTrigger] = React.useState<NavigationMenuTriggerElement | null>(\n    null\n  );\n  const [position, setPosition] = React.useState<{ size: number; offset: number } | null>(null);\n  const isHorizontal = context.orientation === 'horizontal';\n  const isVisible = Boolean(context.value);\n\n  React.useEffect(() => {\n    const items = getItems();\n    const triggerNode = items.find((item) => item.value === context.value)?.ref.current;\n    if (triggerNode) setActiveTrigger(triggerNode);\n  }, [getItems, context.value]);\n\n  /**\n   * Update position when the indicator or parent track size changes\n   */\n  const handlePositionChange = () => {\n    if (activeTrigger) {\n      setPosition({\n        size: isHorizontal ? activeTrigger.offsetWidth : activeTrigger.offsetHeight,\n        offset: isHorizontal ? activeTrigger.offsetLeft : activeTrigger.offsetTop,\n      });\n    }\n  };\n  useResizeObserver(activeTrigger, handlePositionChange);\n  useResizeObserver(context.indicatorTrack, handlePositionChange);\n\n  // We need to wait for the indicator position to be available before rendering to\n  // snap immediately into position rather than transitioning from initial\n  return position ? (\n    <Primitive.div\n      aria-hidden\n      data-state={isVisible ? 'visible' : 'hidden'}\n      data-orientation={context.orientation}\n      {...indicatorProps}\n      ref={forwardedRef}\n      style={{\n        position: 'absolute',\n        ...(isHorizontal\n          ? {\n              left: 0,\n              width: position.size + 'px',\n              transform: `translateX(${position.offset}px)`,\n            }\n          : {\n              top: 0,\n              height: position.size + 'px',\n              transform: `translateY(${position.offset}px)`,\n            }),\n        ...indicatorProps.style,\n      }}\n    />\n  ) : null;\n});\n\n/* -------------------------------------------------------------------------------------------------\n * NavigationMenuContent\n * -----------------------------------------------------------------------------------------------*/\n\nconst CONTENT_NAME = 'NavigationMenuContent';\n\ntype NavigationMenuContentElement = NavigationMenuContentImplElement;\ninterface NavigationMenuContentProps\n  extends Omit<NavigationMenuContentImplProps, keyof NavigationMenuContentImplPrivateProps> {\n  /**\n   * Used to force mounting when more control is needed. Useful when\n   * controlling animation with React animation libraries.\n   */\n  forceMount?: true;\n}\n\nconst NavigationMenuContent = React.forwardRef<\n  NavigationMenuContentElement,\n  NavigationMenuContentProps\n>((props: ScopedProps<NavigationMenuContentProps>, forwardedRef) => {\n  const { forceMount, ...contentProps } = props;\n  const context = useNavigationMenuContext(CONTENT_NAME, props.__scopeNavigationMenu);\n  const itemContext = useNavigationMenuItemContext(CONTENT_NAME, props.__scopeNavigationMenu);\n  const composedRefs = useComposedRefs(itemContext.contentRef, forwardedRef);\n  const open = itemContext.value === context.value;\n\n  const commonProps = {\n    value: itemContext.value,\n    triggerRef: itemContext.triggerRef,\n    focusProxyRef: itemContext.focusProxyRef,\n    wasEscapeCloseRef: itemContext.wasEscapeCloseRef,\n    onContentFocusOutside: itemContext.onContentFocusOutside,\n    onRootContentClose: itemContext.onRootContentClose,\n    ...contentProps,\n  };\n\n  return !context.viewport ? (\n    <Presence present={forceMount || open}>\n      <NavigationMenuContentImpl\n        data-state={getOpenState(open)}\n        {...commonProps}\n        ref={composedRefs}\n        onPointerEnter={composeEventHandlers(props.onPointerEnter, context.onContentEnter)}\n        onPointerLeave={composeEventHandlers(\n          props.onPointerLeave,\n          whenMouse(context.onContentLeave)\n        )}\n        style={{\n          // Prevent interaction when animating out\n          pointerEvents: !open && context.isRootMenu ? 'none' : undefined,\n          ...commonProps.style,\n        }}\n      />\n    </Presence>\n  ) : (\n    <ViewportContentMounter forceMount={forceMount} {...commonProps} ref={composedRefs} />\n  );\n});\n\nNavigationMenuContent.displayName = CONTENT_NAME;\n\n/* -----------------------------------------------------------------------------------------------*/\n\ntype ViewportContentMounterElement = NavigationMenuContentImplElement;\ninterface ViewportContentMounterProps extends NavigationMenuContentImplProps {\n  /**\n   * Used to force mounting when more control is needed. Useful when\n   * controlling animation with React animation libraries.\n   */\n  forceMount?: true;\n}\n\nconst ViewportContentMounter = React.forwardRef<\n  ViewportContentMounterElement,\n  ViewportContentMounterProps\n>((props: ScopedProps<ViewportContentMounterProps>, forwardedRef) => {\n  const context = useNavigationMenuContext(CONTENT_NAME, props.__scopeNavigationMenu);\n  const { onViewportContentChange, onViewportContentRemove } = context;\n\n  useLayoutEffect(() => {\n    onViewportContentChange(props.value, {\n      ref: forwardedRef,\n      ...props,\n    });\n  }, [props, forwardedRef, onViewportContentChange]);\n\n  useLayoutEffect(() => {\n    return () => onViewportContentRemove(props.value);\n  }, [props.value, onViewportContentRemove]);\n\n  // Content is proxied into the viewport\n  return null;\n});\n\n/* -----------------------------------------------------------------------------------------------*/\n\nconst ROOT_CONTENT_DISMISS = 'navigationMenu.rootContentDismiss';\n\ntype MotionAttribute = 'to-start' | 'to-end' | 'from-start' | 'from-end';\ntype NavigationMenuContentImplElement = React.ElementRef<typeof DismissableLayer>;\ntype DismissableLayerProps = Radix.ComponentPropsWithoutRef<typeof DismissableLayer>;\n\ninterface NavigationMenuContentImplPrivateProps {\n  value: string;\n  triggerRef: React.RefObject<NavigationMenuTriggerElement>;\n  focusProxyRef: React.RefObject<FocusProxyElement>;\n  wasEscapeCloseRef: React.MutableRefObject<boolean>;\n  onContentFocusOutside(): void;\n  onRootContentClose(): void;\n}\ninterface NavigationMenuContentImplProps\n  extends Omit<DismissableLayerProps, 'onDismiss'>,\n    NavigationMenuContentImplPrivateProps {}\n\nconst NavigationMenuContentImpl = React.forwardRef<\n  NavigationMenuContentImplElement,\n  NavigationMenuContentImplProps\n>((props: ScopedProps<NavigationMenuContentImplProps>, forwardedRef) => {\n  const {\n    __scopeNavigationMenu,\n    value,\n    triggerRef,\n    focusProxyRef,\n    wasEscapeCloseRef,\n    onRootContentClose,\n    onContentFocusOutside,\n    ...contentProps\n  } = props;\n  const context = useNavigationMenuContext(CONTENT_NAME, __scopeNavigationMenu);\n  const ref = React.useRef<NavigationMenuContentImplElement>(null);\n  const composedRefs = useComposedRefs(ref, forwardedRef);\n  const triggerId = makeTriggerId(context.baseId, value);\n  const contentId = makeContentId(context.baseId, value);\n  const getItems = useCollection(__scopeNavigationMenu);\n  const prevMotionAttributeRef = React.useRef<MotionAttribute | null>(null);\n\n  const { onItemDismiss } = context;\n\n  React.useEffect(() => {\n    const content = ref.current;\n\n    // Bubble dismiss to the root content node and focus its trigger\n    if (context.isRootMenu && content) {\n      const handleClose = () => {\n        onItemDismiss();\n        onRootContentClose();\n        if (content.contains(document.activeElement)) triggerRef.current?.focus();\n      };\n      content.addEventListener(ROOT_CONTENT_DISMISS, handleClose);\n      return () => content.removeEventListener(ROOT_CONTENT_DISMISS, handleClose);\n    }\n  }, [context.isRootMenu, props.value, triggerRef, onItemDismiss, onRootContentClose]);\n\n  const motionAttribute = React.useMemo(() => {\n    const items = getItems();\n    const values = items.map((item) => item.value);\n    if (context.dir === 'rtl') values.reverse();\n    const index = values.indexOf(context.value);\n    const prevIndex = values.indexOf(context.previousValue);\n    const isSelected = value === context.value;\n    const wasSelected = prevIndex === values.indexOf(value);\n\n    // We only want to update selected and the last selected content\n    // this avoids animations being interrupted outside of that range\n    if (!isSelected && !wasSelected) return prevMotionAttributeRef.current;\n\n    const attribute = (() => {\n      // Don't provide a direction on the initial open\n      if (index !== prevIndex) {\n        // If we're moving to this item from another\n        if (isSelected && prevIndex !== -1) return index > prevIndex ? 'from-end' : 'from-start';\n        // If we're leaving this item for another\n        if (wasSelected && index !== -1) return index > prevIndex ? 'to-start' : 'to-end';\n      }\n      // Otherwise we're entering from closed or leaving the list\n      // entirely and should not animate in any direction\n      return null;\n    })();\n\n    prevMotionAttributeRef.current = attribute;\n    return attribute;\n  }, [context.previousValue, context.value, context.dir, getItems, value]);\n\n  return (\n    <FocusGroup asChild>\n      <DismissableLayer\n        id={contentId}\n        aria-labelledby={triggerId}\n        data-motion={motionAttribute}\n        data-orientation={context.orientation}\n        {...contentProps}\n        ref={composedRefs}\n        onDismiss={() => {\n          const rootContentDismissEvent = new Event(ROOT_CONTENT_DISMISS, {\n            bubbles: true,\n            cancelable: true,\n          });\n          ref.current?.dispatchEvent(rootContentDismissEvent);\n        }}\n        onFocusOutside={composeEventHandlers(props.onFocusOutside, (event) => {\n          onContentFocusOutside();\n          const target = event.target as HTMLElement;\n          // Only dismiss content when focus moves outside of the menu\n          if (context.rootNavigationMenu?.contains(target)) event.preventDefault();\n        })}\n        onPointerDownOutside={composeEventHandlers(props.onPointerDownOutside, (event) => {\n          const target = event.target as HTMLElement;\n          const isTrigger = getItems().some((item) => item.ref.current?.contains(target));\n          const isRootViewport = context.isRootMenu && context.viewport?.contains(target);\n          if (isTrigger || isRootViewport || !context.isRootMenu) event.preventDefault();\n        })}\n        onKeyDown={composeEventHandlers(props.onKeyDown, (event) => {\n          const isMetaKey = event.altKey || event.ctrlKey || event.metaKey;\n          const isTabKey = event.key === 'Tab' && !isMetaKey;\n          if (isTabKey) {\n            const candidates = getTabbableCandidates(event.currentTarget);\n            const focusedElement = document.activeElement;\n            const index = candidates.findIndex((candidate) => candidate === focusedElement);\n            const isMovingBackwards = event.shiftKey;\n            const nextCandidates = isMovingBackwards\n              ? candidates.slice(0, index).reverse()\n              : candidates.slice(index + 1, candidates.length);\n\n            if (focusFirst(nextCandidates)) {\n              // prevent browser tab keydown because we've handled focus\n              event.preventDefault();\n            } else {\n              // If we can't focus that means we're at the edges\n              // so focus the proxy and let browser handle\n              // tab/shift+tab keypress on the proxy instead\n              focusProxyRef.current?.focus();\n            }\n          }\n        })}\n        onEscapeKeyDown={composeEventHandlers(props.onEscapeKeyDown, (event) => {\n          // prevent the dropdown from reopening\n          // after the escape key has been pressed\n          wasEscapeCloseRef.current = true;\n        })}\n      />\n    </FocusGroup>\n  );\n});\n\n/* -------------------------------------------------------------------------------------------------\n * NavigationMenuViewport\n * -----------------------------------------------------------------------------------------------*/\n\nconst VIEWPORT_NAME = 'NavigationMenuViewport';\n\ntype NavigationMenuViewportElement = NavigationMenuViewportImplElement;\ninterface NavigationMenuViewportProps\n  extends Omit<NavigationMenuViewportImplProps, 'children' | 'activeContentValue'> {\n  /**\n   * Used to force mounting when more control is needed. Useful when\n   * controlling animation with React animation libraries.\n   */\n  forceMount?: true;\n}\n\nconst NavigationMenuViewport = React.forwardRef<\n  NavigationMenuViewportElement,\n  NavigationMenuViewportProps\n>((props: ScopedProps<NavigationMenuViewportProps>, forwardedRef) => {\n  const { forceMount, ...viewportProps } = props;\n  const context = useNavigationMenuContext(VIEWPORT_NAME, props.__scopeNavigationMenu);\n  const open = Boolean(context.value);\n\n  return (\n    <Presence present={forceMount || open}>\n      <NavigationMenuViewportImpl {...viewportProps} ref={forwardedRef} />\n    </Presence>\n  );\n});\n\nNavigationMenuViewport.displayName = VIEWPORT_NAME;\n\n/* -----------------------------------------------------------------------------------------------*/\n\ntype NavigationMenuViewportImplElement = React.ElementRef<typeof Primitive.div>;\ninterface NavigationMenuViewportImplProps extends PrimitiveDivProps {}\n\nconst NavigationMenuViewportImpl = React.forwardRef<\n  NavigationMenuViewportImplElement,\n  NavigationMenuViewportImplProps\n>((props: ScopedProps<NavigationMenuViewportImplProps>, forwardedRef) => {\n  const { __scopeNavigationMenu, children, ...viewportImplProps } = props;\n  const context = useNavigationMenuContext(VIEWPORT_NAME, __scopeNavigationMenu);\n  const composedRefs = useComposedRefs(forwardedRef, context.onViewportChange);\n  const viewportContentContext = useViewportContentContext(\n    CONTENT_NAME,\n    props.__scopeNavigationMenu\n  );\n  const [size, setSize] = React.useState<{ width: number; height: number } | null>(null);\n  const [content, setContent] = React.useState<NavigationMenuContentElement | null>(null);\n  const viewportWidth = size ? size?.width + 'px' : undefined;\n  const viewportHeight = size ? size?.height + 'px' : undefined;\n  const open = Boolean(context.value);\n  // We persist the last active content value as the viewport may be animating out\n  // and we want the content to remain mounted for the lifecycle of the viewport.\n  const activeContentValue = open ? context.value : context.previousValue;\n\n  /**\n   * Update viewport size to match the active content node.\n   * We prefer offset dimensions over `getBoundingClientRect` as the latter respects CSS transform.\n   * For example, if content animates in from `scale(0.5)` the dimensions would be anything\n   * from `0.5` to `1` of the intended size.\n   */\n  const handleSizeChange = () => {\n    if (content) setSize({ width: content.offsetWidth, height: content.offsetHeight });\n  };\n  useResizeObserver(content, handleSizeChange);\n\n  return (\n    <Primitive.div\n      data-state={getOpenState(open)}\n      data-orientation={context.orientation}\n      {...viewportImplProps}\n      ref={composedRefs}\n      style={{\n        // Prevent interaction when animating out\n        pointerEvents: !open && context.isRootMenu ? 'none' : undefined,\n        ['--radix-navigation-menu-viewport-width' as any]: viewportWidth,\n        ['--radix-navigation-menu-viewport-height' as any]: viewportHeight,\n        ...viewportImplProps.style,\n      }}\n      onPointerEnter={composeEventHandlers(props.onPointerEnter, context.onContentEnter)}\n      onPointerLeave={composeEventHandlers(props.onPointerLeave, whenMouse(context.onContentLeave))}\n    >\n      {Array.from(viewportContentContext.items).map(([value, { ref, forceMount, ...props }]) => {\n        const isActive = activeContentValue === value;\n        return (\n          <Presence key={value} present={forceMount || isActive}>\n            <NavigationMenuContentImpl\n              {...props}\n              ref={composeRefs(ref, (node) => {\n                // We only want to update the stored node when another is available\n                // as we need to smoothly transition between them.\n                if (isActive && node) setContent(node);\n              })}\n            />\n          </Presence>\n        );\n      })}\n    </Primitive.div>\n  );\n});\n\n/* -----------------------------------------------------------------------------------------------*/\n\nconst FOCUS_GROUP_NAME = 'FocusGroup';\n\ntype FocusGroupElement = React.ElementRef<typeof Primitive.div>;\ninterface FocusGroupProps extends PrimitiveDivProps {}\n\nconst FocusGroup = React.forwardRef<FocusGroupElement, FocusGroupProps>(\n  (props: ScopedProps<FocusGroupProps>, forwardedRef) => {\n    const { __scopeNavigationMenu, ...groupProps } = props;\n    const context = useNavigationMenuContext(FOCUS_GROUP_NAME, __scopeNavigationMenu);\n\n    return (\n      <FocusGroupCollection.Provider scope={__scopeNavigationMenu}>\n        <FocusGroupCollection.Slot scope={__scopeNavigationMenu}>\n          <Primitive.div dir={context.dir} {...groupProps} ref={forwardedRef} />\n        </FocusGroupCollection.Slot>\n      </FocusGroupCollection.Provider>\n    );\n  }\n);\n\n/* -----------------------------------------------------------------------------------------------*/\n\nconst ARROW_KEYS = ['ArrowRight', 'ArrowLeft', 'ArrowUp', 'ArrowDown'];\nconst FOCUS_GROUP_ITEM_NAME = 'FocusGroupItem';\n\ntype FocusGroupItemElement = React.ElementRef<typeof Primitive.button>;\ninterface FocusGroupItemProps extends PrimitiveButtonProps {}\n\nconst FocusGroupItem = React.forwardRef<FocusGroupItemElement, FocusGroupItemProps>(\n  (props: ScopedProps<FocusGroupItemProps>, forwardedRef) => {\n    const { __scopeNavigationMenu, ...groupProps } = props;\n    const getItems = useFocusGroupCollection(__scopeNavigationMenu);\n    const context = useNavigationMenuContext(FOCUS_GROUP_ITEM_NAME, __scopeNavigationMenu);\n\n    return (\n      <FocusGroupCollection.ItemSlot scope={__scopeNavigationMenu}>\n        <Primitive.button\n          {...groupProps}\n          ref={forwardedRef}\n          onKeyDown={composeEventHandlers(props.onKeyDown, (event) => {\n            const isFocusNavigationKey = ['Home', 'End', ...ARROW_KEYS].includes(event.key);\n            if (isFocusNavigationKey) {\n              let candidateNodes = getItems().map((item) => item.ref.current!);\n              const prevItemKey = context.dir === 'rtl' ? 'ArrowRight' : 'ArrowLeft';\n              const prevKeys = [prevItemKey, 'ArrowUp', 'End'];\n              if (prevKeys.includes(event.key)) candidateNodes.reverse();\n              if (ARROW_KEYS.includes(event.key)) {\n                const currentIndex = candidateNodes.indexOf(event.currentTarget);\n                candidateNodes = candidateNodes.slice(currentIndex + 1);\n              }\n              /**\n               * Imperative focus during keydown is risky so we prevent React's batching updates\n               * to avoid potential bugs. See: https://github.com/facebook/react/issues/20332\n               */\n              setTimeout(() => focusFirst(candidateNodes));\n\n              // Prevent page scroll while navigating\n              event.preventDefault();\n            }\n          })}\n        />\n      </FocusGroupCollection.ItemSlot>\n    );\n  }\n);\n\n/**\n * Returns a list of potential tabbable candidates.\n *\n * NOTE: This is only a close approximation. For example it doesn't take into account cases like when\n * elements are not visible. This cannot be worked out easily by just reading a property, but rather\n * necessitate runtime knowledge (computed styles, etc). We deal with these cases separately.\n *\n * See: https://developer.mozilla.org/en-US/docs/Web/API/TreeWalker\n * Credit: https://github.com/discord/focus-layers/blob/master/src/util/wrapFocus.tsx#L1\n */\nfunction getTabbableCandidates(container: HTMLElement) {\n  const nodes: HTMLElement[] = [];\n  const walker = document.createTreeWalker(container, NodeFilter.SHOW_ELEMENT, {\n    acceptNode: (node: any) => {\n      const isHiddenInput = node.tagName === 'INPUT' && node.type === 'hidden';\n      if (node.disabled || node.hidden || isHiddenInput) return NodeFilter.FILTER_SKIP;\n      // `.tabIndex` is not the same as the `tabindex` attribute. It works on the\n      // runtime's understanding of tabbability, so this automatically accounts\n      // for any kind of element that could be tabbed to.\n      return node.tabIndex >= 0 ? NodeFilter.FILTER_ACCEPT : NodeFilter.FILTER_SKIP;\n    },\n  });\n  while (walker.nextNode()) nodes.push(walker.currentNode as HTMLElement);\n  // we do not take into account the order of nodes with positive `tabIndex` as it\n  // hinders accessibility to have tab order different from visual order.\n  return nodes;\n}\n\nfunction focusFirst(candidates: HTMLElement[]) {\n  const previouslyFocusedElement = document.activeElement;\n  return candidates.some((candidate) => {\n    // if focus is already where we want to go, we don't want to keep going through the candidates\n    if (candidate === previouslyFocusedElement) return true;\n    candidate.focus();\n    return document.activeElement !== previouslyFocusedElement;\n  });\n}\n\nfunction removeFromTabOrder(candidates: HTMLElement[]) {\n  candidates.forEach((candidate) => {\n    candidate.dataset.tabindex = candidate.getAttribute('tabindex') || '';\n    candidate.setAttribute('tabindex', '-1');\n  });\n  return () => {\n    candidates.forEach((candidate) => {\n      const prevTabIndex = candidate.dataset.tabindex as string;\n      candidate.setAttribute('tabindex', prevTabIndex);\n    });\n  };\n}\n\nfunction useResizeObserver(element: HTMLElement | null, onResize: () => void) {\n  const handleResize = useCallbackRef(onResize);\n  useLayoutEffect(() => {\n    let rAF = 0;\n    if (element) {\n      /**\n       * Resize Observer will throw an often benign error that says `ResizeObserver loop\n       * completed with undelivered notifications`. This means that ResizeObserver was not\n       * able to deliver all observations within a single animation frame, so we use\n       * `requestAnimationFrame` to ensure we don't deliver unnecessary observations.\n       * Further reading: https://github.com/WICG/resize-observer/issues/38\n       */\n      const resizeObserver = new ResizeObserver(() => {\n        cancelAnimationFrame(rAF);\n        rAF = window.requestAnimationFrame(handleResize);\n      });\n      resizeObserver.observe(element);\n      return () => {\n        window.cancelAnimationFrame(rAF);\n        resizeObserver.unobserve(element);\n      };\n    }\n  }, [element, handleResize]);\n}\n\nfunction getOpenState(open: boolean) {\n  return open ? 'open' : 'closed';\n}\n\nfunction makeTriggerId(baseId: string, value: string) {\n  return `${baseId}-trigger-${value}`;\n}\n\nfunction makeContentId(baseId: string, value: string) {\n  return `${baseId}-content-${value}`;\n}\n\nfunction whenMouse<E>(handler: React.PointerEventHandler<E>): React.PointerEventHandler<E> {\n  return (event) => (event.pointerType === 'mouse' ? handler(event) : undefined);\n}\n\n/* -----------------------------------------------------------------------------------------------*/\n\nconst Root = NavigationMenu;\nconst Sub = NavigationMenuSub;\nconst List = NavigationMenuList;\nconst Item = NavigationMenuItem;\nconst Trigger = NavigationMenuTrigger;\nconst Link = NavigationMenuLink;\nconst Indicator = NavigationMenuIndicator;\nconst Content = NavigationMenuContent;\nconst Viewport = NavigationMenuViewport;\n\nexport {\n  createNavigationMenuScope,\n  //\n  NavigationMenu,\n  NavigationMenuSub,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuContent,\n  NavigationMenuViewport,\n  //\n  Root,\n  Sub,\n  List,\n  Item,\n  Trigger,\n  Link,\n  Indicator,\n  Content,\n  Viewport,\n};\nexport type {\n  NavigationMenuProps,\n  NavigationMenuSubProps,\n  NavigationMenuListProps,\n  NavigationMenuItemProps,\n  NavigationMenuTriggerProps,\n  NavigationMenuLinkProps,\n  NavigationMenuIndicatorProps,\n  NavigationMenuContentProps,\n  NavigationMenuViewportProps,\n};\n", "import * as React from \"react\";\nimport { Drawer as DrawerPrimitive } from \"vaul\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n);\nDrawer.displayName = \"Drawer\";\n\nconst DrawerTrigger = DrawerPrimitive.Trigger;\n\nconst DrawerPortal = DrawerPrimitive.Portal;\n\nconst DrawerClose = DrawerPrimitive.Close;\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n));\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName;\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className,\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n));\nDrawerContent.displayName = \"DrawerContent\";\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n);\nDrawerHeader.displayName = \"DrawerHeader\";\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n);\nDrawerFooter.displayName = \"DrawerFooter\";\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className,\n    )}\n    {...props}\n  />\n));\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName;\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n));\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName;\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n};\n", "export {\n  createDialogScope,\n  //\n  Dialog,\n  DialogTrigger,\n  DialogPortal,\n  DialogOverlay,\n  DialogContent,\n  DialogTitle,\n  DialogDescription,\n  DialogClose,\n  //\n  Root,\n  Trigger,\n  Portal,\n  Overlay,\n  Content,\n  Title,\n  Description,\n  Close,\n  //\n  WarningProvider,\n} from './Dialog';\nexport type {\n  DialogProps,\n  DialogTriggerProps,\n  DialogPortalProps,\n  DialogOverlayProps,\n  DialogContentProps,\n  DialogTitleProps,\n  DialogDescriptionProps,\n  DialogCloseProps,\n} from './Dialog';\n", "import * as React from 'react';\nimport { composeEventHandlers } from '@radix-ui/primitive';\nimport { useComposedRefs } from '@radix-ui/react-compose-refs';\nimport { createContext, createContextScope } from '@radix-ui/react-context';\nimport { useId } from '@radix-ui/react-id';\nimport { useControllableState } from '@radix-ui/react-use-controllable-state';\nimport { DismissableLayer } from '@radix-ui/react-dismissable-layer';\nimport { FocusScope } from '@radix-ui/react-focus-scope';\nimport { Portal as PortalPrimitive } from '@radix-ui/react-portal';\nimport { Presence } from '@radix-ui/react-presence';\nimport { Primitive } from '@radix-ui/react-primitive';\nimport { useFocusGuards } from '@radix-ui/react-focus-guards';\nimport { RemoveScroll } from 'react-remove-scroll';\nimport { hideOthers } from 'aria-hidden';\nimport { Slot } from '@radix-ui/react-slot';\n\nimport type * as Radix from '@radix-ui/react-primitive';\nimport type { Scope } from '@radix-ui/react-context';\n\n/* -------------------------------------------------------------------------------------------------\n * Dialog\n * -----------------------------------------------------------------------------------------------*/\n\nconst DIALOG_NAME = 'Dialog';\n\ntype ScopedProps<P> = P & { __scopeDialog?: Scope };\nconst [createDialogContext, createDialogScope] = createContextScope(DIALOG_NAME);\n\ntype DialogContextValue = {\n  triggerRef: React.RefObject<HTMLButtonElement>;\n  contentRef: React.RefObject<DialogContentElement>;\n  contentId: string;\n  titleId: string;\n  descriptionId: string;\n  open: boolean;\n  onOpenChange(open: boolean): void;\n  onOpenToggle(): void;\n  modal: boolean;\n};\n\nconst [DialogProvider, useDialogContext] = createDialogContext<DialogContextValue>(DIALOG_NAME);\n\ninterface DialogProps {\n  children?: React.ReactNode;\n  open?: boolean;\n  defaultOpen?: boolean;\n  onOpenChange?(open: boolean): void;\n  modal?: boolean;\n}\n\nconst Dialog: React.FC<DialogProps> = (props: ScopedProps<DialogProps>) => {\n  const {\n    __scopeDialog,\n    children,\n    open: openProp,\n    defaultOpen,\n    onOpenChange,\n    modal = true,\n  } = props;\n  const triggerRef = React.useRef<HTMLButtonElement>(null);\n  const contentRef = React.useRef<DialogContentElement>(null);\n  const [open = false, setOpen] = useControllableState({\n    prop: openProp,\n    defaultProp: defaultOpen,\n    onChange: onOpenChange,\n  });\n\n  return (\n    <DialogProvider\n      scope={__scopeDialog}\n      triggerRef={triggerRef}\n      contentRef={contentRef}\n      contentId={useId()}\n      titleId={useId()}\n      descriptionId={useId()}\n      open={open}\n      onOpenChange={setOpen}\n      onOpenToggle={React.useCallback(() => setOpen((prevOpen) => !prevOpen), [setOpen])}\n      modal={modal}\n    >\n      {children}\n    </DialogProvider>\n  );\n};\n\nDialog.displayName = DIALOG_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * DialogTrigger\n * -----------------------------------------------------------------------------------------------*/\n\nconst TRIGGER_NAME = 'DialogTrigger';\n\ntype DialogTriggerElement = React.ElementRef<typeof Primitive.button>;\ntype PrimitiveButtonProps = Radix.ComponentPropsWithoutRef<typeof Primitive.button>;\ninterface DialogTriggerProps extends PrimitiveButtonProps {}\n\nconst DialogTrigger = React.forwardRef<DialogTriggerElement, DialogTriggerProps>(\n  (props: ScopedProps<DialogTriggerProps>, forwardedRef) => {\n    const { __scopeDialog, ...triggerProps } = props;\n    const context = useDialogContext(TRIGGER_NAME, __scopeDialog);\n    const composedTriggerRef = useComposedRefs(forwardedRef, context.triggerRef);\n    return (\n      <Primitive.button\n        type=\"button\"\n        aria-haspopup=\"dialog\"\n        aria-expanded={context.open}\n        aria-controls={context.contentId}\n        data-state={getState(context.open)}\n        {...triggerProps}\n        ref={composedTriggerRef}\n        onClick={composeEventHandlers(props.onClick, context.onOpenToggle)}\n      />\n    );\n  }\n);\n\nDialogTrigger.displayName = TRIGGER_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * DialogPortal\n * -----------------------------------------------------------------------------------------------*/\n\nconst PORTAL_NAME = 'DialogPortal';\n\ntype PortalContextValue = { forceMount?: true };\nconst [PortalProvider, usePortalContext] = createDialogContext<PortalContextValue>(PORTAL_NAME, {\n  forceMount: undefined,\n});\n\ntype PortalProps = React.ComponentPropsWithoutRef<typeof PortalPrimitive>;\ninterface DialogPortalProps {\n  children?: React.ReactNode;\n  /**\n   * Specify a container element to portal the content into.\n   */\n  container?: PortalProps['container'];\n  /**\n   * Used to force mounting when more control is needed. Useful when\n   * controlling animation with React animation libraries.\n   */\n  forceMount?: true;\n}\n\nconst DialogPortal: React.FC<DialogPortalProps> = (props: ScopedProps<DialogPortalProps>) => {\n  const { __scopeDialog, forceMount, children, container } = props;\n  const context = useDialogContext(PORTAL_NAME, __scopeDialog);\n  return (\n    <PortalProvider scope={__scopeDialog} forceMount={forceMount}>\n      {React.Children.map(children, (child) => (\n        <Presence present={forceMount || context.open}>\n          <PortalPrimitive asChild container={container}>\n            {child}\n          </PortalPrimitive>\n        </Presence>\n      ))}\n    </PortalProvider>\n  );\n};\n\nDialogPortal.displayName = PORTAL_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * DialogOverlay\n * -----------------------------------------------------------------------------------------------*/\n\nconst OVERLAY_NAME = 'DialogOverlay';\n\ntype DialogOverlayElement = DialogOverlayImplElement;\ninterface DialogOverlayProps extends DialogOverlayImplProps {\n  /**\n   * Used to force mounting when more control is needed. Useful when\n   * controlling animation with React animation libraries.\n   */\n  forceMount?: true;\n}\n\nconst DialogOverlay = React.forwardRef<DialogOverlayElement, DialogOverlayProps>(\n  (props: ScopedProps<DialogOverlayProps>, forwardedRef) => {\n    const portalContext = usePortalContext(OVERLAY_NAME, props.__scopeDialog);\n    const { forceMount = portalContext.forceMount, ...overlayProps } = props;\n    const context = useDialogContext(OVERLAY_NAME, props.__scopeDialog);\n    return context.modal ? (\n      <Presence present={forceMount || context.open}>\n        <DialogOverlayImpl {...overlayProps} ref={forwardedRef} />\n      </Presence>\n    ) : null;\n  }\n);\n\nDialogOverlay.displayName = OVERLAY_NAME;\n\ntype DialogOverlayImplElement = React.ElementRef<typeof Primitive.div>;\ntype PrimitiveDivProps = Radix.ComponentPropsWithoutRef<typeof Primitive.div>;\ninterface DialogOverlayImplProps extends PrimitiveDivProps {}\n\nconst DialogOverlayImpl = React.forwardRef<DialogOverlayImplElement, DialogOverlayImplProps>(\n  (props: ScopedProps<DialogOverlayImplProps>, forwardedRef) => {\n    const { __scopeDialog, ...overlayProps } = props;\n    const context = useDialogContext(OVERLAY_NAME, __scopeDialog);\n    return (\n      // Make sure `Content` is scrollable even when it doesn't live inside `RemoveScroll`\n      // ie. when `Overlay` and `Content` are siblings\n      <RemoveScroll as={Slot} allowPinchZoom shards={[context.contentRef]}>\n        <Primitive.div\n          data-state={getState(context.open)}\n          {...overlayProps}\n          ref={forwardedRef}\n          // We re-enable pointer-events prevented by `Dialog.Content` to allow scrolling the overlay.\n          style={{ pointerEvents: 'auto', ...overlayProps.style }}\n        />\n      </RemoveScroll>\n    );\n  }\n);\n\n/* -------------------------------------------------------------------------------------------------\n * DialogContent\n * -----------------------------------------------------------------------------------------------*/\n\nconst CONTENT_NAME = 'DialogContent';\n\ntype DialogContentElement = DialogContentTypeElement;\ninterface DialogContentProps extends DialogContentTypeProps {\n  /**\n   * Used to force mounting when more control is needed. Useful when\n   * controlling animation with React animation libraries.\n   */\n  forceMount?: true;\n}\n\nconst DialogContent = React.forwardRef<DialogContentElement, DialogContentProps>(\n  (props: ScopedProps<DialogContentProps>, forwardedRef) => {\n    const portalContext = usePortalContext(CONTENT_NAME, props.__scopeDialog);\n    const { forceMount = portalContext.forceMount, ...contentProps } = props;\n    const context = useDialogContext(CONTENT_NAME, props.__scopeDialog);\n    return (\n      <Presence present={forceMount || context.open}>\n        {context.modal ? (\n          <DialogContentModal {...contentProps} ref={forwardedRef} />\n        ) : (\n          <DialogContentNonModal {...contentProps} ref={forwardedRef} />\n        )}\n      </Presence>\n    );\n  }\n);\n\nDialogContent.displayName = CONTENT_NAME;\n\n/* -----------------------------------------------------------------------------------------------*/\n\ntype DialogContentTypeElement = DialogContentImplElement;\ninterface DialogContentTypeProps\n  extends Omit<DialogContentImplProps, 'trapFocus' | 'disableOutsidePointerEvents'> {}\n\nconst DialogContentModal = React.forwardRef<DialogContentTypeElement, DialogContentTypeProps>(\n  (props: ScopedProps<DialogContentTypeProps>, forwardedRef) => {\n    const context = useDialogContext(CONTENT_NAME, props.__scopeDialog);\n    const contentRef = React.useRef<HTMLDivElement>(null);\n    const composedRefs = useComposedRefs(forwardedRef, context.contentRef, contentRef);\n\n    // aria-hide everything except the content (better supported equivalent to setting aria-modal)\n    React.useEffect(() => {\n      const content = contentRef.current;\n      if (content) return hideOthers(content);\n    }, []);\n\n    return (\n      <DialogContentImpl\n        {...props}\n        ref={composedRefs}\n        // we make sure focus isn't trapped once `DialogContent` has been closed\n        // (closed !== unmounted when animating out)\n        trapFocus={context.open}\n        disableOutsidePointerEvents\n        onCloseAutoFocus={composeEventHandlers(props.onCloseAutoFocus, (event) => {\n          event.preventDefault();\n          context.triggerRef.current?.focus();\n        })}\n        onPointerDownOutside={composeEventHandlers(props.onPointerDownOutside, (event) => {\n          const originalEvent = event.detail.originalEvent;\n          const ctrlLeftClick = originalEvent.button === 0 && originalEvent.ctrlKey === true;\n          const isRightClick = originalEvent.button === 2 || ctrlLeftClick;\n\n          // If the event is a right-click, we shouldn't close because\n          // it is effectively as if we right-clicked the `Overlay`.\n          if (isRightClick) event.preventDefault();\n        })}\n        // When focus is trapped, a `focusout` event may still happen.\n        // We make sure we don't trigger our `onDismiss` in such case.\n        onFocusOutside={composeEventHandlers(props.onFocusOutside, (event) =>\n          event.preventDefault()\n        )}\n      />\n    );\n  }\n);\n\n/* -----------------------------------------------------------------------------------------------*/\n\nconst DialogContentNonModal = React.forwardRef<DialogContentTypeElement, DialogContentTypeProps>(\n  (props: ScopedProps<DialogContentTypeProps>, forwardedRef) => {\n    const context = useDialogContext(CONTENT_NAME, props.__scopeDialog);\n    const hasInteractedOutsideRef = React.useRef(false);\n    const hasPointerDownOutsideRef = React.useRef(false);\n\n    return (\n      <DialogContentImpl\n        {...props}\n        ref={forwardedRef}\n        trapFocus={false}\n        disableOutsidePointerEvents={false}\n        onCloseAutoFocus={(event) => {\n          props.onCloseAutoFocus?.(event);\n\n          if (!event.defaultPrevented) {\n            if (!hasInteractedOutsideRef.current) context.triggerRef.current?.focus();\n            // Always prevent auto focus because we either focus manually or want user agent focus\n            event.preventDefault();\n          }\n\n          hasInteractedOutsideRef.current = false;\n          hasPointerDownOutsideRef.current = false;\n        }}\n        onInteractOutside={(event) => {\n          props.onInteractOutside?.(event);\n\n          if (!event.defaultPrevented) {\n            hasInteractedOutsideRef.current = true;\n            if (event.detail.originalEvent.type === 'pointerdown') {\n              hasPointerDownOutsideRef.current = true;\n            }\n          }\n\n          // Prevent dismissing when clicking the trigger.\n          // As the trigger is already setup to close, without doing so would\n          // cause it to close and immediately open.\n          const target = event.target as HTMLElement;\n          const targetIsTrigger = context.triggerRef.current?.contains(target);\n          if (targetIsTrigger) event.preventDefault();\n\n          // On Safari if the trigger is inside a container with tabIndex={0}, when clicked\n          // we will get the pointer down outside event on the trigger, but then a subsequent\n          // focus outside event on the container, we ignore any focus outside event when we've\n          // already had a pointer down outside event.\n          if (event.detail.originalEvent.type === 'focusin' && hasPointerDownOutsideRef.current) {\n            event.preventDefault();\n          }\n        }}\n      />\n    );\n  }\n);\n\n/* -----------------------------------------------------------------------------------------------*/\n\ntype DialogContentImplElement = React.ElementRef<typeof DismissableLayer>;\ntype DismissableLayerProps = Radix.ComponentPropsWithoutRef<typeof DismissableLayer>;\ntype FocusScopeProps = Radix.ComponentPropsWithoutRef<typeof FocusScope>;\ninterface DialogContentImplProps extends Omit<DismissableLayerProps, 'onDismiss'> {\n  /**\n   * When `true`, focus cannot escape the `Content` via keyboard,\n   * pointer, or a programmatic focus.\n   * @defaultValue false\n   */\n  trapFocus?: FocusScopeProps['trapped'];\n\n  /**\n   * Event handler called when auto-focusing on open.\n   * Can be prevented.\n   */\n  onOpenAutoFocus?: FocusScopeProps['onMountAutoFocus'];\n\n  /**\n   * Event handler called when auto-focusing on close.\n   * Can be prevented.\n   */\n  onCloseAutoFocus?: FocusScopeProps['onUnmountAutoFocus'];\n}\n\nconst DialogContentImpl = React.forwardRef<DialogContentImplElement, DialogContentImplProps>(\n  (props: ScopedProps<DialogContentImplProps>, forwardedRef) => {\n    const { __scopeDialog, trapFocus, onOpenAutoFocus, onCloseAutoFocus, ...contentProps } = props;\n    const context = useDialogContext(CONTENT_NAME, __scopeDialog);\n    const contentRef = React.useRef<HTMLDivElement>(null);\n    const composedRefs = useComposedRefs(forwardedRef, contentRef);\n\n    // Make sure the whole tree has focus guards as our `Dialog` will be\n    // the last element in the DOM (beacuse of the `Portal`)\n    useFocusGuards();\n\n    return (\n      <>\n        <FocusScope\n          asChild\n          loop\n          trapped={trapFocus}\n          onMountAutoFocus={onOpenAutoFocus}\n          onUnmountAutoFocus={onCloseAutoFocus}\n        >\n          <DismissableLayer\n            role=\"dialog\"\n            id={context.contentId}\n            aria-describedby={context.descriptionId}\n            aria-labelledby={context.titleId}\n            data-state={getState(context.open)}\n            {...contentProps}\n            ref={composedRefs}\n            onDismiss={() => context.onOpenChange(false)}\n          />\n        </FocusScope>\n        {process.env.NODE_ENV !== 'production' && (\n          <>\n            <TitleWarning titleId={context.titleId} />\n            <DescriptionWarning contentRef={contentRef} descriptionId={context.descriptionId} />\n          </>\n        )}\n      </>\n    );\n  }\n);\n\n/* -------------------------------------------------------------------------------------------------\n * DialogTitle\n * -----------------------------------------------------------------------------------------------*/\n\nconst TITLE_NAME = 'DialogTitle';\n\ntype DialogTitleElement = React.ElementRef<typeof Primitive.h2>;\ntype PrimitiveHeading2Props = Radix.ComponentPropsWithoutRef<typeof Primitive.h2>;\ninterface DialogTitleProps extends PrimitiveHeading2Props {}\n\nconst DialogTitle = React.forwardRef<DialogTitleElement, DialogTitleProps>(\n  (props: ScopedProps<DialogTitleProps>, forwardedRef) => {\n    const { __scopeDialog, ...titleProps } = props;\n    const context = useDialogContext(TITLE_NAME, __scopeDialog);\n    return <Primitive.h2 id={context.titleId} {...titleProps} ref={forwardedRef} />;\n  }\n);\n\nDialogTitle.displayName = TITLE_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * DialogDescription\n * -----------------------------------------------------------------------------------------------*/\n\nconst DESCRIPTION_NAME = 'DialogDescription';\n\ntype DialogDescriptionElement = React.ElementRef<typeof Primitive.p>;\ntype PrimitiveParagraphProps = Radix.ComponentPropsWithoutRef<typeof Primitive.p>;\ninterface DialogDescriptionProps extends PrimitiveParagraphProps {}\n\nconst DialogDescription = React.forwardRef<DialogDescriptionElement, DialogDescriptionProps>(\n  (props: ScopedProps<DialogDescriptionProps>, forwardedRef) => {\n    const { __scopeDialog, ...descriptionProps } = props;\n    const context = useDialogContext(DESCRIPTION_NAME, __scopeDialog);\n    return <Primitive.p id={context.descriptionId} {...descriptionProps} ref={forwardedRef} />;\n  }\n);\n\nDialogDescription.displayName = DESCRIPTION_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * DialogClose\n * -----------------------------------------------------------------------------------------------*/\n\nconst CLOSE_NAME = 'DialogClose';\n\ntype DialogCloseElement = React.ElementRef<typeof Primitive.button>;\ninterface DialogCloseProps extends PrimitiveButtonProps {}\n\nconst DialogClose = React.forwardRef<DialogCloseElement, DialogCloseProps>(\n  (props: ScopedProps<DialogCloseProps>, forwardedRef) => {\n    const { __scopeDialog, ...closeProps } = props;\n    const context = useDialogContext(CLOSE_NAME, __scopeDialog);\n    return (\n      <Primitive.button\n        type=\"button\"\n        {...closeProps}\n        ref={forwardedRef}\n        onClick={composeEventHandlers(props.onClick, () => context.onOpenChange(false))}\n      />\n    );\n  }\n);\n\nDialogClose.displayName = CLOSE_NAME;\n\n/* -----------------------------------------------------------------------------------------------*/\n\nfunction getState(open: boolean) {\n  return open ? 'open' : 'closed';\n}\n\nconst TITLE_WARNING_NAME = 'DialogTitleWarning';\n\nconst [WarningProvider, useWarningContext] = createContext(TITLE_WARNING_NAME, {\n  contentName: CONTENT_NAME,\n  titleName: TITLE_NAME,\n  docsSlug: 'dialog',\n});\n\ntype TitleWarningProps = { titleId?: string };\n\nconst TitleWarning: React.FC<TitleWarningProps> = ({ titleId }) => {\n  const titleWarningContext = useWarningContext(TITLE_WARNING_NAME);\n\n  const MESSAGE = `\\`${titleWarningContext.contentName}\\` requires a \\`${titleWarningContext.titleName}\\` for the component to be accessible for screen reader users.\n\nIf you want to hide the \\`${titleWarningContext.titleName}\\`, you can wrap it with our VisuallyHidden component.\n\nFor more information, see https://radix-ui.com/primitives/docs/components/${titleWarningContext.docsSlug}`;\n\n  React.useEffect(() => {\n    if (titleId) {\n      const hasTitle = document.getElementById(titleId);\n      if (!hasTitle) throw new Error(MESSAGE);\n    }\n  }, [MESSAGE, titleId]);\n\n  return null;\n};\n\nconst DESCRIPTION_WARNING_NAME = 'DialogDescriptionWarning';\n\ntype DescriptionWarningProps = {\n  contentRef: React.RefObject<DialogContentElement>;\n  descriptionId?: string;\n};\n\nconst DescriptionWarning: React.FC<DescriptionWarningProps> = ({ contentRef, descriptionId }) => {\n  const descriptionWarningContext = useWarningContext(DESCRIPTION_WARNING_NAME);\n  const MESSAGE = `Warning: Missing \\`Description\\` or \\`aria-describedby={undefined}\\` for {${descriptionWarningContext.contentName}}.`;\n\n  React.useEffect(() => {\n    const describedById = contentRef.current?.getAttribute('aria-describedby');\n    // if we have an id and the user hasn't set aria-describedby={undefined}\n    if (descriptionId && describedById) {\n      const hasDescription = document.getElementById(descriptionId);\n      if (!hasDescription) console.warn(MESSAGE);\n    }\n  }, [MESSAGE, contentRef, descriptionId]);\n\n  return null;\n};\n\nconst Root = Dialog;\nconst Trigger = DialogTrigger;\nconst Portal = DialogPortal;\nconst Overlay = DialogOverlay;\nconst Content = DialogContent;\nconst Title = DialogTitle;\nconst Description = DialogDescription;\nconst Close = DialogClose;\n\nexport {\n  createDialogScope,\n  //\n  Dialog,\n  DialogTrigger,\n  DialogPortal,\n  DialogOverlay,\n  DialogContent,\n  DialogTitle,\n  DialogDescription,\n  DialogClose,\n  //\n  Root,\n  Trigger,\n  Portal,\n  Overlay,\n  Content,\n  Title,\n  Description,\n  Close,\n  //\n  WarningProvider,\n};\nexport type {\n  DialogProps,\n  DialogTriggerProps,\n  DialogPortalProps,\n  DialogOverlayProps,\n  DialogContentProps,\n  DialogTitleProps,\n  DialogDescriptionProps,\n  DialogCloseProps,\n};\n", "'use client';\n\nimport * as DialogPrimitive from '@radix-ui/react-dialog';\nimport React from 'react';\nimport { DrawerContext, useDrawerContext } from './context';\nimport './style.css';\nimport { usePreventScroll, isInput, isIOS } from './use-prevent-scroll';\nimport { useComposedRefs } from './use-composed-refs';\nimport { usePositionFixed } from './use-position-fixed';\nimport { useSnapPoints } from './use-snap-points';\nimport { set, reset, getTranslate, dampenValue, isVertical } from './helpers';\nimport { TRANSITIONS, VELOCITY_THRESHOLD } from './constants';\n\nconst CLOSE_THRESHOLD = 0.25;\n\nconst SCROLL_LOCK_TIMEOUT = 100;\n\nconst BORDER_RADIUS = 8;\n\nconst NESTED_DISPLACEMENT = 16;\n\nconst WINDOW_TOP_OFFSET = 26;\n\nconst DRAG_CLASS = 'vaul-dragging';\n\ninterface WithFadeFromProps {\n  snapPoints: (number | string)[];\n  fadeFromIndex: number;\n}\n\ninterface WithoutFadeFromProps {\n  snapPoints?: (number | string)[];\n  fadeFromIndex?: never;\n}\n\ntype DialogProps = {\n  activeSnapPoint?: number | string | null;\n  setActiveSnapPoint?: (snapPoint: number | string | null) => void;\n  children?: React.ReactNode;\n  open?: boolean;\n  closeThreshold?: number;\n  onOpenChange?: (open: boolean) => void;\n  shouldScaleBackground?: boolean;\n  scrollLockTimeout?: number;\n  fixed?: boolean;\n  dismissible?: boolean;\n  onDrag?: (event: React.PointerEvent<HTMLDivElement>, percentageDragged: number) => void;\n  onRelease?: (event: React.PointerEvent<HTMLDivElement>, open: boolean) => void;\n  modal?: boolean;\n  nested?: boolean;\n  onClose?: () => void;\n  direction?: 'top' | 'bottom' | 'left' | 'right';\n  preventScrollRestoration?: boolean;\n} & (WithFadeFromProps | WithoutFadeFromProps);\n\nfunction Root({\n  open: openProp,\n  onOpenChange,\n  children,\n  shouldScaleBackground,\n  onDrag: onDragProp,\n  onRelease: onReleaseProp,\n  snapPoints,\n  nested = false,\n  closeThreshold = CLOSE_THRESHOLD,\n  scrollLockTimeout = SCROLL_LOCK_TIMEOUT,\n  dismissible = true,\n  fadeFromIndex = snapPoints && snapPoints.length - 1,\n  activeSnapPoint: activeSnapPointProp,\n  setActiveSnapPoint: setActiveSnapPointProp,\n  fixed,\n  modal = true,\n  onClose,\n  direction = 'bottom',\n  preventScrollRestoration = true,\n}: DialogProps) {\n  const [isOpen = false, setIsOpen] = React.useState<boolean>(false);\n  const [hasBeenOpened, setHasBeenOpened] = React.useState<boolean>(false);\n  // Not visible = translateY(100%)\n  const [visible, setVisible] = React.useState<boolean>(false);\n  const [mounted, setMounted] = React.useState<boolean>(false);\n  const [isDragging, setIsDragging] = React.useState<boolean>(false);\n  const [justReleased, setJustReleased] = React.useState<boolean>(false);\n  const overlayRef = React.useRef<HTMLDivElement>(null);\n  const openTime = React.useRef<Date | null>(null);\n  const dragStartTime = React.useRef<Date | null>(null);\n  const dragEndTime = React.useRef<Date | null>(null);\n  const lastTimeDragPrevented = React.useRef<Date | null>(null);\n  const isAllowedToDrag = React.useRef<boolean>(false);\n  const nestedOpenChangeTimer = React.useRef<NodeJS.Timeout | null>(null);\n  const pointerStart = React.useRef(0);\n  const keyboardIsOpen = React.useRef(false);\n  const previousDiffFromInitial = React.useRef(0);\n  const drawerRef = React.useRef<HTMLDivElement>(null);\n  const drawerHeightRef = React.useRef(drawerRef.current?.getBoundingClientRect().height || 0);\n  const initialDrawerHeight = React.useRef(0);\n\n  const onSnapPointChange = React.useCallback((activeSnapPointIndex: number) => {\n    // Change openTime ref when we reach the last snap point to prevent dragging for 500ms incase it's scrollable.\n    if (snapPoints && activeSnapPointIndex === snapPointsOffset.length - 1) openTime.current = new Date();\n  }, []);\n\n  const {\n    activeSnapPoint,\n    activeSnapPointIndex,\n    setActiveSnapPoint,\n    onRelease: onReleaseSnapPoints,\n    snapPointsOffset,\n    onDrag: onDragSnapPoints,\n    shouldFade,\n    getPercentageDragged: getSnapPointsPercentageDragged,\n  } = useSnapPoints({\n    snapPoints,\n    activeSnapPointProp,\n    setActiveSnapPointProp,\n    drawerRef,\n    fadeFromIndex,\n    overlayRef,\n    onSnapPointChange,\n    direction,\n  });\n\n  usePreventScroll({\n    isDisabled: !isOpen || isDragging || !modal || justReleased || !hasBeenOpened,\n  });\n\n  const { restorePositionSetting } = usePositionFixed({\n    isOpen,\n    modal,\n    nested,\n    hasBeenOpened,\n    preventScrollRestoration,\n  });\n\n  function getScale() {\n    return (window.innerWidth - WINDOW_TOP_OFFSET) / window.innerWidth;\n  }\n\n  function onPress(event: React.PointerEvent<HTMLDivElement>) {\n    if (!dismissible && !snapPoints) return;\n    if (drawerRef.current && !drawerRef.current.contains(event.target as Node)) return;\n    drawerHeightRef.current = drawerRef.current?.getBoundingClientRect().height || 0;\n    setIsDragging(true);\n    dragStartTime.current = new Date();\n\n    // iOS doesn't trigger mouseUp after scrolling so we need to listen to touched in order to disallow dragging\n    if (isIOS()) {\n      window.addEventListener('touchend', () => (isAllowedToDrag.current = false), { once: true });\n    }\n    // Ensure we maintain correct pointer capture even when going outside of the drawer\n    (event.target as HTMLElement).setPointerCapture(event.pointerId);\n\n    pointerStart.current = isVertical(direction) ? event.screenY : event.screenX;\n  }\n\n  function shouldDrag(el: EventTarget, isDraggingInDirection: boolean) {\n    let element = el as HTMLElement;\n    const highlightedText = window.getSelection()?.toString();\n    const swipeAmount = drawerRef.current ? getTranslate(drawerRef.current, direction) : null;\n    const date = new Date();\n\n    if (element.hasAttribute('data-vaul-no-drag')) {\n      return false;\n    }\n\n    if (direction === 'right' || direction === 'left') {\n      return true;\n    }\n\n    // Allow scrolling when animating\n    if (openTime.current && date.getTime() - openTime.current.getTime() < 500) {\n      return false;\n    }\n\n    if (swipeAmount !== null) {\n      if (direction === 'bottom' ? swipeAmount > 0 : swipeAmount < 0) {\n        return true;\n      }\n    }\n\n    // Don't drag if there's highlighted text\n    if (highlightedText && highlightedText.length > 0) {\n      return false;\n    }\n\n    // Disallow dragging if drawer was scrolled within `scrollLockTimeout`\n    if (\n      lastTimeDragPrevented.current &&\n      date.getTime() - lastTimeDragPrevented.current.getTime() < scrollLockTimeout &&\n      swipeAmount === 0\n    ) {\n      lastTimeDragPrevented.current = date;\n      return false;\n    }\n\n    if (isDraggingInDirection) {\n      lastTimeDragPrevented.current = date;\n\n      // We are dragging down so we should allow scrolling\n      return false;\n    }\n\n    // Keep climbing up the DOM tree as long as there's a parent\n    while (element) {\n      // Check if the element is scrollable\n      if (element.scrollHeight > element.clientHeight) {\n        if (element.scrollTop !== 0) {\n          lastTimeDragPrevented.current = new Date();\n\n          // The element is scrollable and not scrolled to the top, so don't drag\n          return false;\n        }\n\n        if (element.getAttribute('role') === 'dialog') {\n          return true;\n        }\n      }\n\n      // Move up to the parent element\n      element = element.parentNode as HTMLElement;\n    }\n\n    // No scrollable parents not scrolled to the top found, so drag\n    return true;\n  }\n\n  function onDrag(event: React.PointerEvent<HTMLDivElement>) {\n    if (!drawerRef.current) {\n      return;\n    }\n    // We need to know how much of the drawer has been dragged in percentages so that we can transform background accordingly\n    if (isDragging) {\n      const directionMultiplier = direction === 'bottom' || direction === 'right' ? 1 : -1;\n      const draggedDistance =\n        (pointerStart.current - (isVertical(direction) ? event.screenY : event.screenX)) * directionMultiplier;\n      const isDraggingInDirection = draggedDistance > 0;\n\n      // Disallow dragging down to close when first snap point is the active one and dismissible prop is set to false.\n      if (snapPoints && activeSnapPointIndex === 0 && !dismissible) return;\n\n      if (!isAllowedToDrag.current && !shouldDrag(event.target, isDraggingInDirection)) return;\n      drawerRef.current.classList.add(DRAG_CLASS);\n      // If shouldDrag gave true once after pressing down on the drawer, we set isAllowedToDrag to true and it will remain true until we let go, there's no reason to disable dragging mid way, ever, and that's the solution to it\n      isAllowedToDrag.current = true;\n      set(drawerRef.current, {\n        transition: 'none',\n      });\n\n      set(overlayRef.current, {\n        transition: 'none',\n      });\n\n      if (snapPoints) {\n        onDragSnapPoints({ draggedDistance });\n      }\n\n      // Run this only if snapPoints are not defined or if we are at the last snap point (highest one)\n      if (isDraggingInDirection && !snapPoints) {\n        const dampenedDraggedDistance = dampenValue(draggedDistance);\n\n        const translateValue = Math.min(dampenedDraggedDistance * -1, 0) * directionMultiplier;\n        set(drawerRef.current, {\n          transform: isVertical(direction)\n            ? `translate3d(0, ${translateValue}px, 0)`\n            : `translate3d(${translateValue}px, 0, 0)`,\n        });\n        return;\n      }\n\n      // We need to capture last time when drag with scroll was triggered and have a timeout between\n      const absDraggedDistance = Math.abs(draggedDistance);\n      const wrapper = document.querySelector('[vaul-drawer-wrapper]');\n\n      let percentageDragged = absDraggedDistance / drawerHeightRef.current;\n      const snapPointPercentageDragged = getSnapPointsPercentageDragged(absDraggedDistance, isDraggingInDirection);\n\n      if (snapPointPercentageDragged !== null) {\n        percentageDragged = snapPointPercentageDragged;\n      }\n\n      const opacityValue = 1 - percentageDragged;\n\n      if (shouldFade || (fadeFromIndex && activeSnapPointIndex === fadeFromIndex - 1)) {\n        onDragProp?.(event, percentageDragged);\n\n        set(\n          overlayRef.current,\n          {\n            opacity: `${opacityValue}`,\n            transition: 'none',\n          },\n          true,\n        );\n      }\n\n      if (wrapper && overlayRef.current && shouldScaleBackground) {\n        // Calculate percentageDragged as a fraction (0 to 1)\n        const scaleValue = Math.min(getScale() + percentageDragged * (1 - getScale()), 1);\n        const borderRadiusValue = 8 - percentageDragged * 8;\n\n        const translateValue = Math.max(0, 14 - percentageDragged * 14);\n\n        set(\n          wrapper,\n          {\n            borderRadius: `${borderRadiusValue}px`,\n            transform: isVertical(direction)\n              ? `scale(${scaleValue}) translate3d(0, ${translateValue}px, 0)`\n              : `scale(${scaleValue}) translate3d(${translateValue}px, 0, 0)`,\n            transition: 'none',\n          },\n          true,\n        );\n      }\n\n      if (!snapPoints) {\n        const translateValue = absDraggedDistance * directionMultiplier;\n\n        set(drawerRef.current, {\n          transform: isVertical(direction)\n            ? `translate3d(0, ${translateValue}px, 0)`\n            : `translate3d(${translateValue}px, 0, 0)`,\n        });\n      }\n    }\n  }\n\n  React.useEffect(() => {\n    return () => {\n      scaleBackground(false);\n      restorePositionSetting();\n    };\n  }, []);\n\n  React.useEffect(() => {\n    function onVisualViewportChange() {\n      if (!drawerRef.current) return;\n\n      const focusedElement = document.activeElement as HTMLElement;\n      if (isInput(focusedElement) || keyboardIsOpen.current) {\n        const visualViewportHeight = window.visualViewport?.height || 0;\n        // This is the height of the keyboard\n        let diffFromInitial = window.innerHeight - visualViewportHeight;\n        const drawerHeight = drawerRef.current.getBoundingClientRect().height || 0;\n        if (!initialDrawerHeight.current) {\n          initialDrawerHeight.current = drawerHeight;\n        }\n        const offsetFromTop = drawerRef.current.getBoundingClientRect().top;\n\n        // visualViewport height may change due to some subtle changes to the keyboard. Checking if the height changed by 60 or more will make sure that they keyboard really changed its open state.\n        if (Math.abs(previousDiffFromInitial.current - diffFromInitial) > 60) {\n          keyboardIsOpen.current = !keyboardIsOpen.current;\n        }\n\n        if (snapPoints && snapPoints.length > 0 && snapPointsOffset && activeSnapPointIndex) {\n          const activeSnapPointHeight = snapPointsOffset[activeSnapPointIndex] || 0;\n          diffFromInitial += activeSnapPointHeight;\n        }\n\n        previousDiffFromInitial.current = diffFromInitial;\n        // We don't have to change the height if the input is in view, when we are here we are in the opened keyboard state so we can correctly check if the input is in view\n        if (drawerHeight > visualViewportHeight || keyboardIsOpen.current) {\n          const height = drawerRef.current.getBoundingClientRect().height;\n          let newDrawerHeight = height;\n\n          if (height > visualViewportHeight) {\n            newDrawerHeight = visualViewportHeight - WINDOW_TOP_OFFSET;\n          }\n          // When fixed, don't move the drawer upwards if there's space, but rather only change it's height so it's fully scrollable when the keyboard is open\n          if (fixed) {\n            drawerRef.current.style.height = `${height - Math.max(diffFromInitial, 0)}px`;\n          } else {\n            drawerRef.current.style.height = `${Math.max(newDrawerHeight, visualViewportHeight - offsetFromTop)}px`;\n          }\n        } else {\n          drawerRef.current.style.height = `${initialDrawerHeight.current}px`;\n        }\n\n        if (snapPoints && snapPoints.length > 0 && !keyboardIsOpen.current) {\n          drawerRef.current.style.bottom = `0px`;\n        } else {\n          // Negative bottom value would never make sense\n          drawerRef.current.style.bottom = `${Math.max(diffFromInitial, 0)}px`;\n        }\n      }\n    }\n\n    window.visualViewport?.addEventListener('resize', onVisualViewportChange);\n    return () => window.visualViewport?.removeEventListener('resize', onVisualViewportChange);\n  }, [activeSnapPointIndex, snapPoints, snapPointsOffset]);\n\n  function closeDrawer() {\n    if (!drawerRef.current) return;\n\n    onClose?.();\n    set(drawerRef.current, {\n      transform: isVertical(direction)\n        ? `translate3d(0, ${direction === 'bottom' ? '100%' : '-100%'}, 0)`\n        : `translate3d(${direction === 'right' ? '100%' : '-100%'}, 0, 0)`,\n      transition: `transform ${TRANSITIONS.DURATION}s cubic-bezier(${TRANSITIONS.EASE.join(',')})`,\n    });\n\n    set(overlayRef.current, {\n      opacity: '0',\n      transition: `opacity ${TRANSITIONS.DURATION}s cubic-bezier(${TRANSITIONS.EASE.join(',')})`,\n    });\n\n    scaleBackground(false);\n\n    setTimeout(() => {\n      setVisible(false);\n      setIsOpen(false);\n    }, 300);\n\n    setTimeout(() => {\n      // reset(document.documentElement, 'scrollBehavior');\n      if (snapPoints) {\n        setActiveSnapPoint(snapPoints[0]);\n      }\n    }, TRANSITIONS.DURATION * 1000); // seconds to ms\n  }\n\n  React.useEffect(() => {\n    if (!isOpen && shouldScaleBackground) {\n      // Can't use `onAnimationEnd` as the component will be invisible by then\n      const id = setTimeout(() => {\n        reset(document.body);\n      }, 200);\n\n      return () => clearTimeout(id);\n    }\n  }, [isOpen, shouldScaleBackground]);\n\n  // This can be done much better\n  React.useEffect(() => {\n    if (openProp) {\n      setIsOpen(true);\n      setHasBeenOpened(true);\n    } else {\n      closeDrawer();\n    }\n  }, [openProp]);\n\n  // This can be done much better\n  React.useEffect(() => {\n    if (mounted) {\n      onOpenChange?.(isOpen);\n    }\n  }, [isOpen]);\n\n  React.useEffect(() => {\n    setMounted(true);\n  }, []);\n\n  function resetDrawer() {\n    if (!drawerRef.current) return;\n    const wrapper = document.querySelector('[vaul-drawer-wrapper]');\n    const currentSwipeAmount = getTranslate(drawerRef.current, direction);\n\n    set(drawerRef.current, {\n      transform: 'translate3d(0, 0, 0)',\n      transition: `transform ${TRANSITIONS.DURATION}s cubic-bezier(${TRANSITIONS.EASE.join(',')})`,\n    });\n\n    set(overlayRef.current, {\n      transition: `opacity ${TRANSITIONS.DURATION}s cubic-bezier(${TRANSITIONS.EASE.join(',')})`,\n      opacity: '1',\n    });\n\n    // Don't reset background if swiped upwards\n    if (shouldScaleBackground && currentSwipeAmount && currentSwipeAmount > 0 && isOpen) {\n      set(\n        wrapper,\n        {\n          borderRadius: `${BORDER_RADIUS}px`,\n          overflow: 'hidden',\n          ...(isVertical(direction)\n            ? {\n                transform: `scale(${getScale()}) translate3d(0, calc(env(safe-area-inset-top) + 14px), 0)`,\n                transformOrigin: 'top',\n              }\n            : {\n                transform: `scale(${getScale()}) translate3d(calc(env(safe-area-inset-top) + 14px), 0, 0)`,\n                transformOrigin: 'left',\n              }),\n          transitionProperty: 'transform, border-radius',\n          transitionDuration: `${TRANSITIONS.DURATION}s`,\n          transitionTimingFunction: `cubic-bezier(${TRANSITIONS.EASE.join(',')})`,\n        },\n        true,\n      );\n    }\n  }\n\n  function onRelease(event: React.PointerEvent<HTMLDivElement>) {\n    if (!isDragging || !drawerRef.current) return;\n\n    drawerRef.current.classList.remove(DRAG_CLASS);\n    isAllowedToDrag.current = false;\n    setIsDragging(false);\n    dragEndTime.current = new Date();\n    const swipeAmount = getTranslate(drawerRef.current, direction);\n\n    if (!shouldDrag(event.target, false) || !swipeAmount || Number.isNaN(swipeAmount)) return;\n\n    if (dragStartTime.current === null) return;\n\n    const timeTaken = dragEndTime.current.getTime() - dragStartTime.current.getTime();\n    const distMoved = pointerStart.current - (isVertical(direction) ? event.screenY : event.screenX);\n    const velocity = Math.abs(distMoved) / timeTaken;\n\n    if (velocity > 0.05) {\n      // `justReleased` is needed to prevent the drawer from focusing on an input when the drag ends, as it's not the intent most of the time.\n      setJustReleased(true);\n\n      setTimeout(() => {\n        setJustReleased(false);\n      }, 200);\n    }\n\n    if (snapPoints) {\n      const directionMultiplier = direction === 'bottom' || direction === 'right' ? 1 : -1;\n      onReleaseSnapPoints({\n        draggedDistance: distMoved * directionMultiplier,\n        closeDrawer,\n        velocity,\n        dismissible,\n      });\n      onReleaseProp?.(event, true);\n      return;\n    }\n\n    // Moved upwards, don't do anything\n    if (direction === 'bottom' || direction === 'right' ? distMoved > 0 : distMoved < 0) {\n      resetDrawer();\n      onReleaseProp?.(event, true);\n      return;\n    }\n\n    if (velocity > VELOCITY_THRESHOLD) {\n      closeDrawer();\n      onReleaseProp?.(event, false);\n      return;\n    }\n\n    const visibleDrawerHeight = Math.min(drawerRef.current.getBoundingClientRect().height ?? 0, window.innerHeight);\n\n    if (swipeAmount >= visibleDrawerHeight * closeThreshold) {\n      closeDrawer();\n      onReleaseProp?.(event, false);\n      return;\n    }\n\n    onReleaseProp?.(event, true);\n    resetDrawer();\n  }\n\n  React.useEffect(() => {\n    // Trigger enter animation without using CSS animation\n    if (isOpen) {\n      set(document.documentElement, {\n        scrollBehavior: 'auto',\n      });\n\n      openTime.current = new Date();\n      scaleBackground(true);\n    }\n  }, [isOpen]);\n\n  React.useEffect(() => {\n    if (drawerRef.current && visible) {\n      // Find all scrollable elements inside our drawer and assign a class to it so that we can disable overflow when dragging to prevent pointermove not being captured\n      const children = drawerRef?.current?.querySelectorAll('*');\n      children?.forEach((child: Element) => {\n        const htmlChild = child as HTMLElement;\n        if (htmlChild.scrollHeight > htmlChild.clientHeight || htmlChild.scrollWidth > htmlChild.clientWidth) {\n          htmlChild.classList.add('vaul-scrollable');\n        }\n      });\n    }\n  }, [visible]);\n\n  function scaleBackground(open: boolean) {\n    const wrapper = document.querySelector('[vaul-drawer-wrapper]');\n\n    if (!wrapper || !shouldScaleBackground) return;\n\n    if (open) {\n      // setting original styles initially\n      set(document.body, {\n        background: document.body.style.backgroundColor || document.body.style.background,\n      });\n      // setting body styles, with cache ignored, so that we can get correct original styles in reset\n      set(\n        document.body,\n        {\n          background: 'black',\n        },\n        true,\n      );\n\n      set(wrapper, {\n        borderRadius: `${BORDER_RADIUS}px`,\n        overflow: 'hidden',\n        ...(isVertical(direction)\n          ? {\n              transform: `scale(${getScale()}) translate3d(0, calc(env(safe-area-inset-top) + 14px), 0)`,\n              transformOrigin: 'top',\n            }\n          : {\n              transform: `scale(${getScale()}) translate3d(calc(env(safe-area-inset-top) + 14px), 0, 0)`,\n              transformOrigin: 'left',\n            }),\n        transitionProperty: 'transform, border-radius',\n        transitionDuration: `${TRANSITIONS.DURATION}s`,\n        transitionTimingFunction: `cubic-bezier(${TRANSITIONS.EASE.join(',')})`,\n      });\n    } else {\n      // Exit\n      reset(wrapper, 'overflow');\n      reset(wrapper, 'transform');\n      reset(wrapper, 'borderRadius');\n      set(wrapper, {\n        transitionProperty: 'transform, border-radius',\n        transitionDuration: `${TRANSITIONS.DURATION}s`,\n        transitionTimingFunction: `cubic-bezier(${TRANSITIONS.EASE.join(',')})`,\n      });\n    }\n  }\n\n  function onNestedOpenChange(o: boolean) {\n    const scale = o ? (window.innerWidth - NESTED_DISPLACEMENT) / window.innerWidth : 1;\n    const y = o ? -NESTED_DISPLACEMENT : 0;\n\n    if (nestedOpenChangeTimer.current) {\n      window.clearTimeout(nestedOpenChangeTimer.current);\n    }\n\n    set(drawerRef.current, {\n      transition: `transform ${TRANSITIONS.DURATION}s cubic-bezier(${TRANSITIONS.EASE.join(',')})`,\n      transform: `scale(${scale}) translate3d(0, ${y}px, 0)`,\n    });\n\n    if (!o && drawerRef.current) {\n      nestedOpenChangeTimer.current = setTimeout(() => {\n        const translateValue = getTranslate(drawerRef.current as HTMLElement, direction);\n        set(drawerRef.current, {\n          transition: 'none',\n          transform: isVertical(direction)\n            ? `translate3d(0, ${translateValue}px, 0)`\n            : `translate3d(${translateValue}px, 0, 0)`,\n        });\n      }, 500);\n    }\n  }\n\n  function onNestedDrag(event: React.PointerEvent<HTMLDivElement>, percentageDragged: number) {\n    if (percentageDragged < 0) return;\n\n    const initialDim = isVertical(direction) ? window.innerHeight : window.innerWidth;\n    const initialScale = (initialDim - NESTED_DISPLACEMENT) / initialDim;\n    const newScale = initialScale + percentageDragged * (1 - initialScale);\n    const newTranslate = -NESTED_DISPLACEMENT + percentageDragged * NESTED_DISPLACEMENT;\n\n    set(drawerRef.current, {\n      transform: isVertical(direction)\n        ? `scale(${newScale}) translate3d(0, ${newTranslate}px, 0)`\n        : `scale(${newScale}) translate3d(${newTranslate}px, 0, 0)`,\n      transition: 'none',\n    });\n  }\n\n  function onNestedRelease(event: React.PointerEvent<HTMLDivElement>, o: boolean) {\n    const dim = isVertical(direction) ? window.innerHeight : window.innerWidth;\n    const scale = o ? (dim - NESTED_DISPLACEMENT) / dim : 1;\n    const translate = o ? -NESTED_DISPLACEMENT : 0;\n\n    if (o) {\n      set(drawerRef.current, {\n        transition: `transform ${TRANSITIONS.DURATION}s cubic-bezier(${TRANSITIONS.EASE.join(',')})`,\n        transform: isVertical(direction)\n          ? `scale(${scale}) translate3d(0, ${translate}px, 0)`\n          : `scale(${scale}) translate3d(${translate}px, 0, 0)`,\n      });\n    }\n  }\n\n  return (\n    <DialogPrimitive.Root\n      modal={modal}\n      onOpenChange={(o: boolean) => {\n        if (openProp !== undefined) {\n          onOpenChange?.(o);\n          return;\n        }\n\n        if (!o) {\n          closeDrawer();\n        } else {\n          setHasBeenOpened(true);\n          setIsOpen(o);\n        }\n      }}\n      open={isOpen}\n    >\n      <DrawerContext.Provider\n        value={{\n          visible,\n          activeSnapPoint,\n          snapPoints,\n          setActiveSnapPoint,\n          drawerRef,\n          overlayRef,\n          scaleBackground,\n          onOpenChange,\n          onPress,\n          setVisible,\n          onRelease,\n          onDrag,\n          dismissible,\n          isOpen,\n          shouldFade,\n          closeDrawer,\n          onNestedDrag,\n          onNestedOpenChange,\n          onNestedRelease,\n          keyboardIsOpen,\n          openProp,\n          modal,\n          snapPointsOffset,\n          direction,\n        }}\n      >\n        {children}\n      </DrawerContext.Provider>\n    </DialogPrimitive.Root>\n  );\n}\n\nconst Overlay = React.forwardRef<HTMLDivElement, React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>>(\n  function ({ children, ...rest }, ref) {\n    const { overlayRef, snapPoints, onRelease, shouldFade, isOpen, visible } = useDrawerContext();\n    const composedRef = useComposedRefs(ref, overlayRef);\n    const hasSnapPoints = snapPoints && snapPoints.length > 0;\n\n    return (\n      <DialogPrimitive.Overlay\n        onMouseUp={onRelease}\n        ref={composedRef}\n        vaul-drawer-visible={visible ? 'true' : 'false'}\n        vaul-overlay=\"\"\n        vaul-snap-points={isOpen && hasSnapPoints ? 'true' : 'false'}\n        vaul-snap-points-overlay={isOpen && shouldFade ? 'true' : 'false'}\n        {...rest}\n      />\n    );\n  },\n);\n\nOverlay.displayName = 'Drawer.Overlay';\n\ntype ContentProps = React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content> & {\n  onAnimationEnd?: (open: boolean) => void;\n};\n\nconst Content = React.forwardRef<HTMLDivElement, ContentProps>(function (\n  { onOpenAutoFocus, onPointerDownOutside, onAnimationEnd, style, ...rest },\n  ref,\n) {\n  const {\n    drawerRef,\n    onPress,\n    onRelease,\n    onDrag,\n    dismissible,\n    keyboardIsOpen,\n    snapPointsOffset,\n    visible,\n    closeDrawer,\n    modal,\n    openProp,\n    onOpenChange,\n    setVisible,\n    direction,\n  } = useDrawerContext();\n  const composedRef = useComposedRefs(ref, drawerRef);\n\n  React.useEffect(() => {\n    // Trigger enter animation without using CSS animation\n    setVisible(true);\n  }, []);\n\n  return (\n    <DialogPrimitive.Content\n      onOpenAutoFocus={(e) => {\n        if (onOpenAutoFocus) {\n          onOpenAutoFocus(e);\n        } else {\n          e.preventDefault();\n          drawerRef.current?.focus();\n        }\n      }}\n      onPointerDown={onPress}\n      onPointerDownOutside={(e) => {\n        onPointerDownOutside?.(e);\n        if (!modal || e.defaultPrevented) {\n          e.preventDefault();\n          return;\n        }\n        if (keyboardIsOpen.current) {\n          keyboardIsOpen.current = false;\n        }\n        e.preventDefault();\n        onOpenChange?.(false);\n        if (!dismissible || openProp !== undefined) {\n          return;\n        }\n\n        closeDrawer();\n      }}\n      onPointerMove={onDrag}\n      onPointerUp={onRelease}\n      ref={composedRef}\n      style={\n        snapPointsOffset && snapPointsOffset.length > 0\n          ? ({\n              '--snap-point-height': `${snapPointsOffset[0]!}px`,\n              ...style,\n            } as React.CSSProperties)\n          : style\n      }\n      {...rest}\n      vaul-drawer=\"\"\n      vaul-drawer-direction={direction}\n      vaul-drawer-visible={visible ? 'true' : 'false'}\n    />\n  );\n});\n\nContent.displayName = 'Drawer.Content';\n\nfunction NestedRoot({ onDrag, onOpenChange, ...rest }: DialogProps) {\n  const { onNestedDrag, onNestedOpenChange, onNestedRelease } = useDrawerContext();\n\n  if (!onNestedDrag) {\n    throw new Error('Drawer.NestedRoot must be placed in another drawer');\n  }\n\n  return (\n    <Root\n      nested\n      onClose={() => {\n        onNestedOpenChange(false);\n      }}\n      onDrag={(e, p) => {\n        onNestedDrag(e, p);\n        onDrag?.(e, p);\n      }}\n      onOpenChange={(o) => {\n        if (o) {\n          onNestedOpenChange(o);\n        }\n        onOpenChange?.(o);\n      }}\n      onRelease={onNestedRelease}\n      {...rest}\n    />\n  );\n}\n\nexport const Drawer = {\n  Root,\n  NestedRoot,\n  Content,\n  Overlay,\n  Trigger: DialogPrimitive.Trigger,\n  Portal: DialogPrimitive.Portal,\n  Close: DialogPrimitive.Close,\n  Title: DialogPrimitive.Title,\n  Description: DialogPrimitive.Description,\n};\n", "import React from 'react';\nimport { DrawerDirection } from './types';\n\ninterface DrawerContextValue {\n  drawerRef: React.RefObject<HTMLDivElement>;\n  overlayRef: React.RefObject<HTMLDivElement>;\n  scaleBackground: (open: boolean) => void;\n  onPress: (event: React.PointerEvent<HTMLDivElement>) => void;\n  onRelease: (event: React.PointerEvent<HTMLDivElement>) => void;\n  onDrag: (event: React.PointerEvent<HTMLDivElement>) => void;\n  onNestedDrag: (event: React.PointerEvent<HTMLDivElement>, percentageDragged: number) => void;\n  onNestedOpenChange: (o: boolean) => void;\n  onNestedRelease: (event: React.PointerEvent<HTMLDivElement>, open: boolean) => void;\n  dismissible: boolean;\n  isOpen: boolean;\n  keyboardIsOpen: React.MutableRefObject<boolean>;\n  snapPointsOffset: number[] | null;\n  snapPoints?: (number | string)[] | null;\n  modal: boolean;\n  shouldFade: boolean;\n  activeSnapPoint?: number | string | null;\n  setActiveSnapPoint: (o: number | string | null) => void;\n  visible: boolean;\n  closeDrawer: () => void;\n  setVisible: (o: boolean) => void;\n  openProp?: boolean;\n  onOpenChange?: (o: boolean) => void;\n  direction?: DrawerDirection;\n}\n\nexport const DrawerContext = React.createContext<DrawerContextValue>({\n  drawerRef: { current: null },\n  overlayRef: { current: null },\n  scaleBackground: () => {},\n  onPress: () => {},\n  onRelease: () => {},\n  onDrag: () => {},\n  onNestedDrag: () => {},\n  onNestedOpenChange: () => {},\n  onNestedRelease: () => {},\n  openProp: undefined,\n  dismissible: false,\n  isOpen: false,\n  keyboardIsOpen: { current: false },\n  snapPointsOffset: null,\n  snapPoints: null,\n  modal: false,\n  shouldFade: false,\n  activeSnapPoint: null,\n  onOpenChange: () => {},\n  setActiveSnapPoint: () => {},\n  visible: false,\n  closeDrawer: () => {},\n  setVisible: () => {},\n  direction: 'bottom',\n});\n\nexport const useDrawerContext = () => React.useContext(DrawerContext);\n", "\n          export default function styleInject(css, { insertAt } = {}) {\n            if (!css || typeof document === 'undefined') return\n          \n            const head = document.head || document.getElementsByTagName('head')[0]\n            const style = document.createElement('style')\n            style.type = 'text/css'\n          \n            if (insertAt === 'top') {\n              if (head.firstChild) {\n                head.insertBefore(style, head.firstChild)\n              } else {\n                head.appendChild(style)\n              }\n            } else {\n              head.appendChild(style)\n            }\n          \n            if (style.styleSheet) {\n              style.styleSheet.cssText = css\n            } else {\n              style.appendChild(document.createTextNode(css))\n            }\n          }\n          ", "import styleInject from '#style-inject';styleInject(\"[vaul-drawer]{touch-action:none;transition:transform .5s cubic-bezier(.32,.72,0,1)}[vaul-drawer][vaul-drawer-direction=bottom]{transform:translate3d(0,100%,0)}[vaul-drawer][vaul-drawer-direction=top]{transform:translate3d(0,-100%,0)}[vaul-drawer][vaul-drawer-direction=left]{transform:translate3d(-100%,0,0)}[vaul-drawer][vaul-drawer-direction=right]{transform:translate3d(100%,0,0)}.vaul-dragging .vaul-scrollable [vault-drawer-direction=top],.vaul-dragging .vaul-scrollable [vault-drawer-direction=bottom]{overflow-y:hidden!important}.vaul-dragging .vaul-scrollable [vault-drawer-direction=left],.vaul-dragging .vaul-scrollable [vault-drawer-direction=right]{overflow-x:hidden!important}[vaul-drawer][vaul-drawer-visible=true][vaul-drawer-direction=top],[vaul-drawer][vaul-drawer-visible=true][vaul-drawer-direction=bottom]{transform:translate3d(0,var(--snap-point-height, 0),0)}[vaul-drawer][vaul-drawer-visible=true][vaul-drawer-direction=left],[vaul-drawer][vaul-drawer-visible=true][vaul-drawer-direction=right]{transform:translate3d(var(--snap-point-height, 0),0,0)}[vaul-overlay]{opacity:0;transition:opacity .5s cubic-bezier(.32,.72,0,1)}[vaul-overlay][vaul-drawer-visible=true]{opacity:1}[vaul-drawer]:after{content:\\\"\\\";position:absolute;background:inherit;background-color:inherit}[vaul-drawer][vaul-drawer-direction=top]:after{top:initial;bottom:100%;left:0;right:0;height:200%}[vaul-drawer][vaul-drawer-direction=bottom]:after{top:100%;bottom:initial;left:0;right:0;height:200%}[vaul-drawer][vaul-drawer-direction=left]:after{left:initial;right:100%;top:0;bottom:0;width:200%}[vaul-drawer][vaul-drawer-direction=right]:after{left:100%;right:initial;top:0;bottom:0;width:200%}[vaul-overlay][vaul-snap-points=true]:not([vaul-snap-points-overlay=\\\"true\\\"]):not([data-state=\\\"closed\\\"]){opacity:0}[vaul-overlay][vaul-snap-points-overlay=true]:not([vaul-drawer-visible=\\\"false\\\"]){opacity:1}@keyframes fake-animation{}@media (hover: hover) and (pointer: fine){[vaul-drawer]{user-select:none}}\\n\")", "// This code comes from https://github.com/adobe/react-spectrum/blob/main/packages/%40react-aria/overlays/src/usePreventScroll.ts\n\nimport { useEffect, useLayoutEffect } from 'react';\n\nexport const useIsomorphicLayoutEffect = typeof window !== 'undefined' ? useLayoutEffect : useEffect;\n\ninterface PreventScrollOptions {\n  /** Whether the scroll lock is disabled. */\n  isDisabled?: boolean;\n  focusCallback?: () => void;\n}\n\nfunction chain(...callbacks: any[]): (...args: any[]) => void {\n  return (...args: any[]) => {\n    for (let callback of callbacks) {\n      if (typeof callback === 'function') {\n        callback(...args);\n      }\n    }\n  };\n}\n\nfunction isMac(): boolean | undefined {\n  return testPlatform(/^Mac/);\n}\n\nfunction isIPhone(): boolean | undefined {\n  return testPlatform(/^iPhone/);\n}\n\nexport function isSafari(): boolean | undefined {\n  return /^((?!chrome|android).)*safari/i.test(navigator.userAgent);\n}\n\nfunction isIPad(): boolean | undefined {\n  return (\n    testPlatform(/^iPad/) ||\n    // iPadOS 13 lies and says it's a Mac, but we can distinguish by detecting touch support.\n    (isMac() && navigator.maxTouchPoints > 1)\n  );\n}\n\nexport function isIOS(): boolean | undefined {\n  return isIPhone() || isIPad();\n}\n\nfunction testPlatform(re: RegExp): boolean | undefined {\n  return typeof window !== 'undefined' && window.navigator != null ? re.test(window.navigator.platform) : undefined;\n}\n\n// @ts-ignore\nconst visualViewport = typeof document !== 'undefined' && window.visualViewport;\n\nexport function isScrollable(node: Element): boolean {\n  let style = window.getComputedStyle(node);\n  return /(auto|scroll)/.test(style.overflow + style.overflowX + style.overflowY);\n}\n\nexport function getScrollParent(node: Element): Element {\n  if (isScrollable(node)) {\n    node = node.parentElement as HTMLElement;\n  }\n\n  while (node && !isScrollable(node)) {\n    node = node.parentElement as HTMLElement;\n  }\n\n  return node || document.scrollingElement || document.documentElement;\n}\n\n// HTML input types that do not cause the software keyboard to appear.\nconst nonTextInputTypes = new Set([\n  'checkbox',\n  'radio',\n  'range',\n  'color',\n  'file',\n  'image',\n  'button',\n  'submit',\n  'reset',\n]);\n\n// The number of active usePreventScroll calls. Used to determine whether to revert back to the original page style/scroll position\nlet preventScrollCount = 0;\nlet restore: () => void;\n\n/**\n * Prevents scrolling on the document body on mount, and\n * restores it on unmount. Also ensures that content does not\n * shift due to the scrollbars disappearing.\n */\nexport function usePreventScroll(options: PreventScrollOptions = {}) {\n  let { isDisabled } = options;\n\n  useIsomorphicLayoutEffect(() => {\n    if (isDisabled) {\n      return;\n    }\n\n    preventScrollCount++;\n    if (preventScrollCount === 1) {\n      if (isIOS()) {\n        restore = preventScrollMobileSafari();\n      } else {\n        restore = preventScrollStandard();\n      }\n    }\n\n    return () => {\n      preventScrollCount--;\n      if (preventScrollCount === 0) {\n        restore();\n      }\n    };\n  }, [isDisabled]);\n}\n\n// For most browsers, all we need to do is set `overflow: hidden` on the root element, and\n// add some padding to prevent the page from shifting when the scrollbar is hidden.\nfunction preventScrollStandard() {\n  return chain(\n    setStyle(document.documentElement, 'paddingRight', `${window.innerWidth - document.documentElement.clientWidth}px`),\n    // setStyle(document.documentElement, 'overflow', 'hidden'),\n  );\n}\n\n// Mobile Safari is a whole different beast. Even with overflow: hidden,\n// it still scrolls the page in many situations:\n//\n// 1. When the bottom toolbar and address bar are collapsed, page scrolling is always allowed.\n// 2. When the keyboard is visible, the viewport does not resize. Instead, the keyboard covers part of\n//    it, so it becomes scrollable.\n// 3. When tapping on an input, the page always scrolls so that the input is centered in the visual viewport.\n//    This may cause even fixed position elements to scroll off the screen.\n// 4. When using the next/previous buttons in the keyboard to navigate between inputs, the whole page always\n//    scrolls, even if the input is inside a nested scrollable element that could be scrolled instead.\n//\n// In order to work around these cases, and prevent scrolling without jankiness, we do a few things:\n//\n// 1. Prevent default on `touchmove` events that are not in a scrollable element. This prevents touch scrolling\n//    on the window.\n// 2. Prevent default on `touchmove` events inside a scrollable element when the scroll position is at the\n//    top or bottom. This avoids the whole page scrolling instead, but does prevent overscrolling.\n// 3. Prevent default on `touchend` events on input elements and handle focusing the element ourselves.\n// 4. When focusing an input, apply a transform to trick Safari into thinking the input is at the top\n//    of the page, which prevents it from scrolling the page. After the input is focused, scroll the element\n//    into view ourselves, without scrolling the whole page.\n// 5. Offset the body by the scroll position using a negative margin and scroll to the top. This should appear the\n//    same visually, but makes the actual scroll position always zero. This is required to make all of the\n//    above work or Safari will still try to scroll the page when focusing an input.\n// 6. As a last resort, handle window scroll events, and scroll back to the top. This can happen when attempting\n//    to navigate to an input with the next/previous buttons that's outside a modal.\nfunction preventScrollMobileSafari() {\n  let scrollable: Element;\n  let lastY = 0;\n  let onTouchStart = (e: TouchEvent) => {\n    // Store the nearest scrollable parent element from the element that the user touched.\n    scrollable = getScrollParent(e.target as Element);\n    if (scrollable === document.documentElement && scrollable === document.body) {\n      return;\n    }\n\n    lastY = e.changedTouches[0].pageY;\n  };\n\n  let onTouchMove = (e: TouchEvent) => {\n    // Prevent scrolling the window.\n    if (!scrollable || scrollable === document.documentElement || scrollable === document.body) {\n      e.preventDefault();\n      return;\n    }\n\n    // Prevent scrolling up when at the top and scrolling down when at the bottom\n    // of a nested scrollable area, otherwise mobile Safari will start scrolling\n    // the window instead. Unfortunately, this disables bounce scrolling when at\n    // the top but it's the best we can do.\n    let y = e.changedTouches[0].pageY;\n    let scrollTop = scrollable.scrollTop;\n    let bottom = scrollable.scrollHeight - scrollable.clientHeight;\n\n    if (bottom === 0) {\n      return;\n    }\n\n    if ((scrollTop <= 0 && y > lastY) || (scrollTop >= bottom && y < lastY)) {\n      e.preventDefault();\n    }\n\n    lastY = y;\n  };\n\n  let onTouchEnd = (e: TouchEvent) => {\n    let target = e.target as HTMLElement;\n\n    // Apply this change if we're not already focused on the target element\n    if (isInput(target) && target !== document.activeElement) {\n      e.preventDefault();\n\n      // Apply a transform to trick Safari into thinking the input is at the top of the page\n      // so it doesn't try to scroll it into view. When tapping on an input, this needs to\n      // be done before the \"focus\" event, so we have to focus the element ourselves.\n      target.style.transform = 'translateY(-2000px)';\n      target.focus();\n      requestAnimationFrame(() => {\n        target.style.transform = '';\n      });\n    }\n  };\n\n  let onFocus = (e: FocusEvent) => {\n    let target = e.target as HTMLElement;\n    if (isInput(target)) {\n      // Transform also needs to be applied in the focus event in cases where focus moves\n      // other than tapping on an input directly, e.g. the next/previous buttons in the\n      // software keyboard. In these cases, it seems applying the transform in the focus event\n      // is good enough, whereas when tapping an input, it must be done before the focus event. 🤷‍♂️\n      target.style.transform = 'translateY(-2000px)';\n      requestAnimationFrame(() => {\n        target.style.transform = '';\n\n        // This will have prevented the browser from scrolling the focused element into view,\n        // so we need to do this ourselves in a way that doesn't cause the whole page to scroll.\n        if (visualViewport) {\n          if (visualViewport.height < window.innerHeight) {\n            // If the keyboard is already visible, do this after one additional frame\n            // to wait for the transform to be removed.\n            requestAnimationFrame(() => {\n              scrollIntoView(target);\n            });\n          } else {\n            // Otherwise, wait for the visual viewport to resize before scrolling so we can\n            // measure the correct position to scroll to.\n            visualViewport.addEventListener('resize', () => scrollIntoView(target), { once: true });\n          }\n        }\n      });\n    }\n  };\n\n  let onWindowScroll = () => {\n    // Last resort. If the window scrolled, scroll it back to the top.\n    // It should always be at the top because the body will have a negative margin (see below).\n    window.scrollTo(0, 0);\n  };\n\n  // Record the original scroll position so we can restore it.\n  // Then apply a negative margin to the body to offset it by the scroll position. This will\n  // enable us to scroll the window to the top, which is required for the rest of this to work.\n  let scrollX = window.pageXOffset;\n  let scrollY = window.pageYOffset;\n\n  let restoreStyles = chain(\n    setStyle(document.documentElement, 'paddingRight', `${window.innerWidth - document.documentElement.clientWidth}px`),\n    // setStyle(document.documentElement, 'overflow', 'hidden'),\n    // setStyle(document.body, 'marginTop', `-${scrollY}px`),\n  );\n\n  // Scroll to the top. The negative margin on the body will make this appear the same.\n  window.scrollTo(0, 0);\n\n  let removeEvents = chain(\n    addEvent(document, 'touchstart', onTouchStart, { passive: false, capture: true }),\n    addEvent(document, 'touchmove', onTouchMove, { passive: false, capture: true }),\n    addEvent(document, 'touchend', onTouchEnd, { passive: false, capture: true }),\n    addEvent(document, 'focus', onFocus, true),\n    addEvent(window, 'scroll', onWindowScroll),\n  );\n\n  return () => {\n    // Restore styles and scroll the page back to where it was.\n    restoreStyles();\n    removeEvents();\n    window.scrollTo(scrollX, scrollY);\n  };\n}\n\n// Sets a CSS property on an element, and returns a function to revert it to the previous value.\nfunction setStyle(element: HTMLElement, style: string, value: string) {\n  let cur = element.style[style];\n  element.style[style] = value;\n\n  return () => {\n    element.style[style] = cur;\n  };\n}\n\n// Adds an event listener to an element, and returns a function to remove it.\nfunction addEvent<K extends keyof GlobalEventHandlersEventMap>(\n  target: EventTarget,\n  event: K,\n  handler: (this: Document, ev: GlobalEventHandlersEventMap[K]) => any,\n  options?: boolean | AddEventListenerOptions,\n) {\n  // @ts-ignore\n  target.addEventListener(event, handler, options);\n\n  return () => {\n    // @ts-ignore\n    target.removeEventListener(event, handler, options);\n  };\n}\n\nfunction scrollIntoView(target: Element) {\n  let root = document.scrollingElement || document.documentElement;\n  while (target && target !== root) {\n    // Find the parent scrollable element and adjust the scroll position if the target is not already in view.\n    let scrollable = getScrollParent(target);\n    if (scrollable !== document.documentElement && scrollable !== document.body && scrollable !== target) {\n      let scrollableTop = scrollable.getBoundingClientRect().top;\n      let targetTop = target.getBoundingClientRect().top;\n      let targetBottom = target.getBoundingClientRect().bottom;\n      const keyboardHeight = scrollable.getBoundingClientRect().bottom;\n\n      if (targetBottom > keyboardHeight) {\n        scrollable.scrollTop += targetTop - scrollableTop;\n      }\n    }\n\n    // @ts-ignore\n    target = scrollable.parentElement;\n  }\n}\n\nexport function isInput(target: Element) {\n  return (\n    (target instanceof HTMLInputElement && !nonTextInputTypes.has(target.type)) ||\n    target instanceof HTMLTextAreaElement ||\n    (target instanceof HTMLElement && target.isContentEditable)\n  );\n}\n", "// This code comes from https://github.com/radix-ui/primitives/tree/main/packages/react/compose-refs\n\nimport * as React from 'react';\n\ntype PossibleRef<T> = React.Ref<T> | undefined;\n\n/**\n * Set a given ref to a given value\n * This utility takes care of different types of refs: callback refs and RefObject(s)\n */\nfunction setRef<T>(ref: PossibleRef<T>, value: T) {\n  if (typeof ref === 'function') {\n    ref(value);\n  } else if (ref !== null && ref !== undefined) {\n    (ref as React.MutableRefObject<T>).current = value;\n  }\n}\n\n/**\n * A utility to compose multiple refs together\n * Accepts callback refs and RefObject(s)\n */\nfunction composeRefs<T>(...refs: PossibleRef<T>[]) {\n  return (node: T) => refs.forEach((ref) => setRef(ref, node));\n}\n\n/**\n * A custom hook that composes multiple refs\n * Accepts callback refs and RefObject(s)\n */\nfunction useComposedRefs<T>(...refs: PossibleRef<T>[]) {\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  return React.useCallback(composeRefs(...refs), refs);\n}\n\nexport { composeRefs, useComposedRefs };\n", "import React from 'react';\n\nlet previousBodyPosition: Record<string, string> | null = null;\n\nexport function usePositionFixed({\n  isOpen,\n  modal,\n  nested,\n  hasBeenOpened,\n  preventScrollRestoration,\n}: {\n  isOpen: boolean;\n  modal: boolean;\n  nested: boolean;\n  hasBeenOpened: boolean;\n  preventScrollRestoration: boolean;\n}) {\n  const [activeUrl, setActiveUrl] = React.useState(typeof window !== 'undefined' ? window.location.href : '');\n  const scrollPos = React.useRef(0);\n\n  const setPositionFixed = React.useCallback(() => {\n    // If previousBodyPosition is already set, don't set it again.\n    if (previousBodyPosition === null && isOpen) {\n      previousBodyPosition = {\n        position: document.body.style.position,\n        top: document.body.style.top,\n        left: document.body.style.left,\n        height: document.body.style.height,\n      };\n\n      // Update the dom inside an animation frame\n      const { scrollX, innerHeight } = window;\n\n      document.body.style.setProperty('position', 'fixed', 'important');\n      document.body.style.top = `${-scrollPos.current}px`;\n      document.body.style.left = `${-scrollX}px`;\n      document.body.style.right = '0px';\n      document.body.style.height = 'auto';\n\n      setTimeout(\n        () =>\n          requestAnimationFrame(() => {\n            // Attempt to check if the bottom bar appeared due to the position change\n            const bottomBarHeight = innerHeight - window.innerHeight;\n            if (bottomBarHeight && scrollPos.current >= innerHeight) {\n              // Move the content further up so that the bottom bar doesn't hide it\n              document.body.style.top = `${-(scrollPos.current + bottomBarHeight)}px`;\n            }\n          }),\n        300,\n      );\n    }\n  }, [isOpen]);\n\n  const restorePositionSetting = React.useCallback(() => {\n    if (previousBodyPosition !== null) {\n      // Convert the position from \"px\" to Int\n      const y = -parseInt(document.body.style.top, 10);\n      const x = -parseInt(document.body.style.left, 10);\n\n      // Restore styles\n      document.body.style.position = previousBodyPosition.position;\n      document.body.style.top = previousBodyPosition.top;\n      document.body.style.left = previousBodyPosition.left;\n      document.body.style.height = previousBodyPosition.height;\n      document.body.style.right = 'unset';\n\n      requestAnimationFrame(() => {\n        if (preventScrollRestoration && activeUrl !== window.location.href) {\n          setActiveUrl(window.location.href);\n          return;\n        }\n\n        window.scrollTo(x, y);\n      });\n\n      previousBodyPosition = null;\n    }\n  }, [activeUrl]);\n\n  React.useEffect(() => {\n    function onScroll() {\n      scrollPos.current = window.scrollY;\n    }\n\n    onScroll();\n\n    window.addEventListener('scroll', onScroll);\n\n    return () => {\n      window.removeEventListener('scroll', onScroll);\n    };\n  }, []);\n\n  React.useEffect(() => {\n    if (nested || !hasBeenOpened) return;\n    // This is needed to force Safari toolbar to show **before** the drawer starts animating to prevent a gnarly shift from happening\n    if (isOpen) {\n      setPositionFixed();\n\n      if (!modal) {\n        setTimeout(() => {\n          restorePositionSetting();\n        }, 500);\n      }\n    } else {\n      restorePositionSetting();\n    }\n  }, [isOpen, hasBeenOpened, activeUrl, modal, nested, setPositionFixed, restorePositionSetting]);\n\n  return { restorePositionSetting };\n}\n", "import React from 'react';\nimport { set, isVertical } from './helpers';\nimport { TRANSITIONS, VELOCITY_THRESHOLD } from './constants';\nimport { useControllableState } from './use-controllable-state';\nimport { DrawerDirection } from './types';\n\nexport function useSnapPoints({\n  activeSnapPointProp,\n  setActiveSnapPointProp,\n  snapPoints,\n  drawerRef,\n  overlayRef,\n  fadeFromIndex,\n  onSnapPointChange,\n  direction = 'bottom',\n}: {\n  activeSnapPointProp?: number | string | null;\n  setActiveSnapPointProp?(snapPoint: number | null | string): void;\n  snapPoints?: (number | string)[];\n  fadeFromIndex?: number;\n  drawerRef: React.RefObject<HTMLDivElement>;\n  overlayRef: React.RefObject<HTMLDivElement>;\n  onSnapPointChange(activeSnapPointIndex: number): void;\n  direction?: DrawerDirection;\n}) {\n  const [activeSnapPoint, setActiveSnapPoint] = useControllableState<string | number | null>({\n    prop: activeSnapPointProp,\n    defaultProp: snapPoints?.[0],\n    onChange: setActiveSnapPointProp,\n  });\n\n  const isLastSnapPoint = React.useMemo(\n    () => activeSnapPoint === snapPoints?.[snapPoints.length - 1] || null,\n    [snapPoints, activeSnapPoint],\n  );\n\n  const shouldFade =\n    (snapPoints &&\n      snapPoints.length > 0 &&\n      (fadeFromIndex || fadeFromIndex === 0) &&\n      !Number.isNaN(fadeFromIndex) &&\n      snapPoints[fadeFromIndex] === activeSnapPoint) ||\n    !snapPoints;\n\n  const activeSnapPointIndex = React.useMemo(\n    () => snapPoints?.findIndex((snapPoint) => snapPoint === activeSnapPoint),\n    [snapPoints, activeSnapPoint],\n  );\n\n  const snapPointsOffset = React.useMemo(\n    () =>\n      snapPoints?.map((snapPoint) => {\n        const hasWindow = typeof window !== 'undefined';\n        const isPx = typeof snapPoint === 'string';\n        let snapPointAsNumber = 0;\n\n        if (isPx) {\n          snapPointAsNumber = parseInt(snapPoint, 10);\n        }\n\n        if (isVertical(direction)) {\n          const height = isPx ? snapPointAsNumber : hasWindow ? snapPoint * window.innerHeight : 0;\n\n          if (hasWindow) {\n            return direction === 'bottom' ? window.innerHeight - height : -window.innerHeight + height;\n          }\n\n          return height;\n        }\n        const width = isPx ? snapPointAsNumber : hasWindow ? snapPoint * window.innerWidth : 0;\n\n        if (hasWindow) {\n          return direction === 'right' ? window.innerWidth - width : -window.innerWidth + width;\n        }\n\n        return width;\n      }) ?? [],\n    [snapPoints],\n  );\n\n  const activeSnapPointOffset = React.useMemo(\n    () => (activeSnapPointIndex !== null ? snapPointsOffset?.[activeSnapPointIndex] : null),\n    [snapPointsOffset, activeSnapPointIndex],\n  );\n\n  const snapToPoint = React.useCallback(\n    (dimension: number) => {\n      const newSnapPointIndex = snapPointsOffset?.findIndex((snapPointDim) => snapPointDim === dimension) ?? null;\n      onSnapPointChange(newSnapPointIndex);\n      set(drawerRef.current, {\n        transition: `transform ${TRANSITIONS.DURATION}s cubic-bezier(${TRANSITIONS.EASE.join(',')})`,\n        transform: isVertical(direction) ? `translate3d(0, ${dimension}px, 0)` : `translate3d(${dimension}px, 0, 0)`,\n      });\n\n      if (\n        snapPointsOffset &&\n        newSnapPointIndex !== snapPointsOffset.length - 1 &&\n        newSnapPointIndex !== fadeFromIndex\n      ) {\n        set(overlayRef.current, {\n          transition: `opacity ${TRANSITIONS.DURATION}s cubic-bezier(${TRANSITIONS.EASE.join(',')})`,\n          opacity: '0',\n        });\n      } else {\n        set(overlayRef.current, {\n          transition: `opacity ${TRANSITIONS.DURATION}s cubic-bezier(${TRANSITIONS.EASE.join(',')})`,\n          opacity: '1',\n        });\n      }\n\n      setActiveSnapPoint(newSnapPointIndex !== null ? snapPoints?.[newSnapPointIndex] : null);\n    },\n    [drawerRef.current, snapPoints, snapPointsOffset, fadeFromIndex, overlayRef, setActiveSnapPoint],\n  );\n\n  React.useEffect(() => {\n    if (activeSnapPointProp) {\n      const newIndex = snapPoints?.findIndex((snapPoint) => snapPoint === activeSnapPointProp) ?? -1;\n      if (snapPointsOffset && newIndex !== -1 && typeof snapPointsOffset[newIndex] === 'number') {\n        snapToPoint(snapPointsOffset[newIndex] as number);\n      }\n    }\n  }, [activeSnapPointProp, snapPoints, snapPointsOffset, snapToPoint]);\n\n  function onRelease({\n    draggedDistance,\n    closeDrawer,\n    velocity,\n    dismissible,\n  }: {\n    draggedDistance: number;\n    closeDrawer: () => void;\n    velocity: number;\n    dismissible: boolean;\n  }) {\n    if (fadeFromIndex === undefined) return;\n\n    const currentPosition =\n      direction === 'bottom' || direction === 'right'\n        ? (activeSnapPointOffset ?? 0) - draggedDistance\n        : (activeSnapPointOffset ?? 0) + draggedDistance;\n    const isOverlaySnapPoint = activeSnapPointIndex === fadeFromIndex - 1;\n    const isFirst = activeSnapPointIndex === 0;\n    const hasDraggedUp = draggedDistance > 0;\n\n    if (isOverlaySnapPoint) {\n      set(overlayRef.current, {\n        transition: `opacity ${TRANSITIONS.DURATION}s cubic-bezier(${TRANSITIONS.EASE.join(',')})`,\n      });\n    }\n\n    if (velocity > 2 && !hasDraggedUp) {\n      if (dismissible) closeDrawer();\n      else snapToPoint(snapPointsOffset[0]); // snap to initial point\n      return;\n    }\n\n    if (velocity > 2 && hasDraggedUp && snapPointsOffset && snapPoints) {\n      snapToPoint(snapPointsOffset[snapPoints.length - 1] as number);\n      return;\n    }\n\n    // Find the closest snap point to the current position\n    const closestSnapPoint = snapPointsOffset?.reduce((prev, curr) => {\n      if (typeof prev !== 'number' || typeof curr !== 'number') return prev;\n\n      return Math.abs(curr - currentPosition) < Math.abs(prev - currentPosition) ? curr : prev;\n    });\n\n    const dim = isVertical(direction) ? window.innerHeight : window.innerWidth;\n    if (velocity > VELOCITY_THRESHOLD && Math.abs(draggedDistance) < dim * 0.4) {\n      const dragDirection = hasDraggedUp ? 1 : -1; // 1 = up, -1 = down\n\n      // Don't do anything if we swipe upwards while being on the last snap point\n      if (dragDirection > 0 && isLastSnapPoint) {\n        snapToPoint(snapPointsOffset[snapPoints.length - 1]);\n        return;\n      }\n\n      if (isFirst && dragDirection < 0 && dismissible) {\n        closeDrawer();\n      }\n\n      if (activeSnapPointIndex === null) return;\n\n      snapToPoint(snapPointsOffset[activeSnapPointIndex + dragDirection]);\n      return;\n    }\n\n    snapToPoint(closestSnapPoint);\n  }\n\n  function onDrag({ draggedDistance }: { draggedDistance: number }) {\n    if (activeSnapPointOffset === null) return;\n    const newValue =\n      direction === 'bottom' || direction === 'right'\n        ? activeSnapPointOffset - draggedDistance\n        : activeSnapPointOffset + draggedDistance;\n\n    // Don't do anything if we exceed the last(biggest) snap point\n    if ((direction === 'bottom' || direction === 'right') && newValue < snapPointsOffset[snapPointsOffset.length - 1]) {\n      return;\n    }\n    if ((direction === 'top' || direction === 'left') && newValue > snapPointsOffset[snapPointsOffset.length - 1]) {\n      return;\n    }\n\n    set(drawerRef.current, {\n      transform: isVertical(direction) ? `translate3d(0, ${newValue}px, 0)` : `translate3d(${newValue}px, 0, 0)`,\n    });\n  }\n\n  function getPercentageDragged(absDraggedDistance: number, isDraggingDown: boolean) {\n    if (!snapPoints || typeof activeSnapPointIndex !== 'number' || !snapPointsOffset || fadeFromIndex === undefined)\n      return null;\n\n    // If this is true we are dragging to a snap point that is supposed to have an overlay\n    const isOverlaySnapPoint = activeSnapPointIndex === fadeFromIndex - 1;\n    const isOverlaySnapPointOrHigher = activeSnapPointIndex >= fadeFromIndex;\n\n    if (isOverlaySnapPointOrHigher && isDraggingDown) {\n      return 0;\n    }\n\n    // Don't animate, but still use this one if we are dragging away from the overlaySnapPoint\n    if (isOverlaySnapPoint && !isDraggingDown) return 1;\n    if (!shouldFade && !isOverlaySnapPoint) return null;\n\n    // Either fadeFrom index or the one before\n    const targetSnapPointIndex = isOverlaySnapPoint ? activeSnapPointIndex + 1 : activeSnapPointIndex - 1;\n\n    // Get the distance from overlaySnapPoint to the one before or vice-versa to calculate the opacity percentage accordingly\n    const snapPointDistance = isOverlaySnapPoint\n      ? snapPointsOffset[targetSnapPointIndex] - snapPointsOffset[targetSnapPointIndex - 1]\n      : snapPointsOffset[targetSnapPointIndex + 1] - snapPointsOffset[targetSnapPointIndex];\n\n    const percentageDragged = absDraggedDistance / Math.abs(snapPointDistance);\n\n    if (isOverlaySnapPoint) {\n      return 1 - percentageDragged;\n    } else {\n      return percentageDragged;\n    }\n  }\n\n  return {\n    isLastSnapPoint,\n    activeSnapPoint,\n    shouldFade,\n    getPercentageDragged,\n    setActiveSnapPoint,\n    activeSnapPointIndex,\n    onRelease,\n    onDrag,\n    snapPointsOffset,\n  };\n}\n", "import { DrawerDirection } from './types';\n\ninterface Style {\n  [key: string]: string;\n}\n\nconst cache = new WeakMap();\n\nexport function isInView(el: HTMLElement): boolean {\n  const rect = el.getBoundingClientRect();\n\n  if (!window.visualViewport) return false;\n\n  return (\n    rect.top >= 0 &&\n    rect.left >= 0 &&\n    // Need + 40 for safari detection\n    rect.bottom <= window.visualViewport.height - 40 &&\n    rect.right <= window.visualViewport.width\n  );\n}\n\nexport function set(el?: Element | HTMLElement | null, styles?: Style, ignoreCache = false) {\n  if (!el || !(el instanceof HTMLElement) || !styles) return;\n  let originalStyles: Style = {};\n\n  Object.entries(styles).forEach(([key, value]: [string, string]) => {\n    if (key.startsWith('--')) {\n      el.style.setProperty(key, value);\n      return;\n    }\n\n    originalStyles[key] = (el.style as any)[key];\n    (el.style as any)[key] = value;\n  });\n\n  if (ignoreCache) return;\n\n  cache.set(el, originalStyles);\n}\n\nexport function reset(el: Element | HTMLElement | null, prop?: string) {\n  if (!el || !(el instanceof HTMLElement)) return;\n  let originalStyles = cache.get(el);\n\n  if (!originalStyles) {\n    return;\n  }\n\n  if (prop) {\n    (el.style as any)[prop] = originalStyles[prop];\n  } else {\n    Object.entries(originalStyles).forEach(([key, value]) => {\n      (el.style as any)[key] = value;\n    });\n  }\n}\n\nexport const isVertical = (direction: DrawerDirection) => {\n  switch (direction) {\n    case 'top':\n    case 'bottom':\n      return true;\n    case 'left':\n    case 'right':\n      return false;\n    default:\n      return direction satisfies never;\n  }\n};\n\nexport function getTranslate(element: HTMLElement, direction: DrawerDirection): number | null {\n  const style = window.getComputedStyle(element);\n  const transform =\n    // @ts-ignore\n    style.transform || style.webkitTransform || style.mozTransform;\n  let mat = transform.match(/^matrix3d\\((.+)\\)$/);\n  if (mat) {\n    // https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function/matrix3d\n    return parseFloat(mat[1].split(', ')[isVertical(direction) ? 13 : 12]);\n  }\n  // https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function/matrix\n  mat = transform.match(/^matrix\\((.+)\\)$/);\n  return mat ? parseFloat(mat[1].split(', ')[isVertical(direction) ? 5 : 4]) : null;\n}\n\nexport function dampenValue(v: number) {\n  return 8 * (Math.log(v + 1) - 2);\n}\n", "export const TRANSITIONS = {\n  DURATION: 0.5,\n  EASE: [0.32, 0.72, 0, 1],\n};\n\nexport const VELOCITY_THRESHOLD = 0.4;\n", "// This code comes from https://github.com/radix-ui/primitives/blob/main/packages/react/use-controllable-state/src/useControllableState.tsx\n\nimport React from 'react';\n\ntype UseControllableStateParams<T> = {\n  prop?: T | undefined;\n  defaultProp?: T | undefined;\n  onChange?: (state: T) => void;\n};\n\ntype SetStateFn<T> = (prevState?: T) => T;\n\nfunction useCallbackRef<T extends (...args: any[]) => any>(callback: T | undefined): T {\n  const callbackRef = React.useRef(callback);\n\n  React.useEffect(() => {\n    callbackRef.current = callback;\n  });\n\n  // https://github.com/facebook/react/issues/19240\n  return React.useMemo(() => ((...args) => callbackRef.current?.(...args)) as T, []);\n}\n\nfunction useUncontrolledState<T>({ defaultProp, onChange }: Omit<UseControllableStateParams<T>, 'prop'>) {\n  const uncontrolledState = React.useState<T | undefined>(defaultProp);\n  const [value] = uncontrolledState;\n  const prevValueRef = React.useRef(value);\n  const handleChange = useCallbackRef(onChange);\n\n  React.useEffect(() => {\n    if (prevValueRef.current !== value) {\n      handleChange(value as T);\n      prevValueRef.current = value;\n    }\n  }, [value, prevValueRef, handleChange]);\n\n  return uncontrolledState;\n}\nexport function useControllableState<T>({ prop, defaultProp, onChange = () => {} }: UseControllableStateParams<T>) {\n  const [uncontrolledProp, setUncontrolledProp] = useUncontrolledState({ defaultProp, onChange });\n  const isControlled = prop !== undefined;\n  const value = isControlled ? prop : uncontrolledProp;\n  const handleChange = useCallbackRef(onChange);\n\n  const setValue: React.Dispatch<React.SetStateAction<T | undefined>> = React.useCallback(\n    (nextValue) => {\n      if (isControlled) {\n        const setter = nextValue as SetStateFn<T>;\n        const value = typeof nextValue === 'function' ? setter(prop) : nextValue;\n        if (value !== prop) handleChange(value as T);\n      } else {\n        setUncontrolledProp(nextValue);\n      }\n    },\n    [isControlled, prop, setUncontrolledProp, handleChange],\n  );\n\n  return [value, setValue] as const;\n}\n", "// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app/root.tsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nvar _s = $RefreshSig$();\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app/root.tsx\");\n}\n// REMIX HMR END\n\nimport { cssBundleHref } from \"@remix-run/css-bundle\";\nimport { Link, Links, LiveReload, Meta, Outlet, Scripts, ScrollRestoration, useMatches } from \"@remix-run/react\";\nimport stylesheet from \"~/globals.css\";\nimport { Navbar } from \"./components/Navbar\";\nimport { Text } from \"@/design/components/text\";\nimport { cn } from \"@/lib/utils\";\nexport const links = () => [{\n  rel: \"stylesheet\",\n  href: stylesheet\n}, ...(cssBundleHref ? [{\n  rel: \"stylesheet\",\n  href: cssBundleHref\n}] : [])];\nexport default function App() {\n  _s();\n  const matches = useMatches();\n  const isHomePage = !!matches.find(m => m.id === \"routes/_index\");\n  return <html lang=\"en\">\n      <head>\n        <meta charSet=\"utf-8\" />\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n        <Meta />\n        <Links />\n      </head>\n      <body>\n        <TitleBar />\n        <div className=\"bg-gray-100\">\n          <Navbar />\n        </div>\n        <div className={cn(\"mx-auto flex flex-col gap-4 p-4 md:p-8\", isHomePage ? \"max-w-5xl\" : \"max-w-lg\")}>\n\n          <Outlet />\n        </div>\n        <ScrollRestoration />\n        <Scripts />\n        <LiveReload />\n      </body>\n    </html>;\n}\n_s(App, \"9HQn1rkLPttBP+QSK6GDQicXTV4=\", false, function () {\n  return [useMatches];\n});\n_c = App;\nfunction TitleBar() {\n  return <div className=\"text-white bg-purple-950 text-center text-4xl py-4\">\n      <Text as=\"span\" variant=\"headlineS\">\n        <Link to=\"/\">\n          <span className=\"text-white\">Learn Oneida</span>\n        </Link>\n      </Text>\n    </div>;\n}\n_c2 = TitleBar;\nvar _c, _c2;\n$RefreshReg$(_c, \"App\");\n$RefreshReg$(_c2, \"TitleBar\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;"],
  "mappings": "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",
  "names": ["React", "NAVIGATION_MENU_NAME", "Collection", "useCollection", "createCollectionScope", "createCollection", "FocusGroupCollection", "useFocusGroupCollection", "createFocusGroupCollectionScope", "createNavigationMenuContext", "createNavigationMenuScope", "createContextScope", "NavigationMenuProviderImpl", "useNavigationMenuContext", "ViewportContentProvider", "useViewportContentContext", "NavigationMenu", "React", "props", "forwardedRef", "value", "valueProp", "NavigationMenuProps", "navigationMenu", "setNavigationMenu", "composedRef", "useComposedRefs", "node", "direction", "useDirection", "dir", "openTimerRef", "closeTimerRef", "skipDelayTimerRef", "isOpenDelayed", "setIsOpenDelayed", "setValue", "useControllableState", "prop", "onChange", "isOpen", "hasSkipDelayDuration", "skipDelayDuration", "window", "clearTimeout", "current", "setTimeout", "onValueChange", "defaultProp", "defaultValue", "startCloseTimer", "handleOpen", "itemValue", "handleDelayedOpen", "isOpenItem", "delayDuration", "$yHMN2$createElement", "__scopeNavigationMenu", "prevValue", "orientation", "NavigationMenuProvider", "props", "onContentLeave", "viewport", "setViewport", "React", "viewportContent", "setViewportContent", "Map", "indicatorTrack", "setIndicatorTrack", "$yHMN2$createElement", "usePrevious", "value", "useId", "useCallbackRef", "onTriggerEnter", "onTriggerLeave", "onContentEnter", "onItemSelect", "onItemDismiss", "contentValue", "contentData", "prevContent", "set", "has", "delete", "children", "LIST_NAME", "NavigationMenuList", "forwardedRef", "listProps", "context", "useNavigationMenuContext", "__scopeNavigationMenu", "list", "orientation", "position", "onIndicatorTrackChange", "isRootMenu", "ITEM_NAME", "NavigationMenuItemContextProvider", "useNavigationMenuItemContext", "createNavigationMenuContext", "NavigationMenuItem", "React", "props", "forwardedRef", "value", "valueProp", "itemProps", "autoValue", "useId", "contentRef", "triggerRef", "focusProxyRef", "restoreContentTabOrderRef", "wasEscapeCloseRef", "handleContentEntry", "side", "current", "candidates", "getTabbableCandidates", "length", "focusFirst", "reverse", "handleContentExit", "removeFromTabOrder", "$yHMN2$createElement", "__scopeNavigationMenu", "TRIGGER_NAME", "NavigationMenuTrigger", "React", "props", "forwardedRef", "triggerProps", "context", "useNavigationMenuContext", "__scopeNavigationMenu", "itemContext", "useNavigationMenuItemContext", "ref", "composedRefs", "useComposedRefs", "triggerRef", "triggerId", "makeTriggerId", "baseId", "value", "contentId", "makeContentId", "hasPointerMoveOpenedRef", "wasClickCloseRef", "open", "$yHMN2$createElement", "$yHMN2$Fragment", "disabled", "undefined", "getOpenState", "composeEventHandlers", "onPointerEnter", "current", "wasEscapeCloseRef", "onPointerMove", "whenMouse", "onTriggerEnter", "onPointerLeave", "onTriggerLeave", "onClick", "onItemSelect", "onKeyDown", "event", "verticalEntryKey", "dir", "entryKey", "horizontal", "vertical", "orientation", "key", "onEntryKeyDown", "preventDefault", "focusProxyRef", "content", "contentRef", "prevFocusedElement", "relatedTarget", "wasTriggerFocused", "wasFocusFromContent", "contains", "onFocusProxyEnter", "viewport", "LINK_SELECT", "NavigationMenuLink", "React", "props", "forwardedRef", "linkProps", "$yHMN2$createElement", "active", "undefined", "composeEventHandlers", "onClick", "event", "target", "linkSelectEvent", "CustomEvent", "bubbles", "cancelable", "addEventListener", "onSelect", "once", "dispatchDiscreteCustomEvent", "defaultPrevented", "metaKey", "rootContentDismissEvent", "ROOT_CONTENT_DISMISS", "checkForDefaultPrevented", "INDICATOR_NAME", "NavigationMenuIndicator", "React", "props", "forwardedRef", "indicatorProps", "context", "useNavigationMenuContext", "__scopeNavigationMenu", "isVisible", "Boolean", "value", "indicatorTrack", "ReactDOM", "createPortal", "$yHMN2$createElement", "forceMount", "NavigationMenuIndicatorImpl", "React", "props", "forwardedRef", "indicatorProps", "context", "useNavigationMenuContext", "INDICATOR_NAME", "__scopeNavigationMenu", "getItems", "useCollection", "activeTrigger", "setActiveTrigger", "position", "setPosition", "isHorizontal", "orientation", "isVisible", "Boolean", "value", "items", "triggerNode", "find", "item", "ref", "current", "handlePositionChange", "size", "offsetWidth", "offsetHeight", "offset", "offsetLeft", "offsetTop", "useResizeObserver", "indicatorTrack", "$yHMN2$createElement", "left", "width", "transform", "top", "height", "style", "CONTENT_NAME", "NavigationMenuContent", "contentProps", "itemContext", "useNavigationMenuItemContext", "composedRefs", "useComposedRefs", "contentRef", "open", "commonProps", "triggerRef", "focusProxyRef", "wasEscapeCloseRef", "onContentFocusOutside", "onRootContentClose", "viewport", "forceMount", "getOpenState", "composeEventHandlers", "onPointerEnter", "onContentEnter", "onPointerLeave", "whenMouse", "onContentLeave", "pointerEvents", "isRootMenu", "undefined", "ViewportContentMounter", "React", "props", "forwardedRef", "context", "useNavigationMenuContext", "CONTENT_NAME", "__scopeNavigationMenu", "onViewportContentRemove", "useLayoutEffect", "onViewportContentChange", "value", "ref", "ROOT_CONTENT_DISMISS", "NavigationMenuContentImpl", "contentProps", "composedRefs", "useComposedRefs", "triggerId", "makeTriggerId", "baseId", "contentId", "makeContentId", "getItems", "useCollection", "prevMotionAttributeRef", "onItemDismiss", "content", "current", "isRootMenu", "handleClose", "onRootContentClose", "contains", "document", "activeElement", "triggerRef", "focus", "addEventListener", "removeEventListener", "motionAttribute", "items", "values", "map", "item", "dir", "reverse", "index", "indexOf", "prevIndex", "previousValue", "isSelected", "wasSelected", "attribute", "$yHMN2$createElement", "orientation", "rootContentDismissEvent", "Event", "bubbles", "cancelable", "dispatchEvent", "composeEventHandlers", "onFocusOutside", "event", "onContentFocusOutside", "target", "rootNavigationMenu", "preventDefault", "onPointerDownOutside", "isTrigger", "some", "isRootViewport", "viewport", "onKeyDown", "isMetaKey", "altKey", "ctrlKey", "metaKey", "isTabKey", "key", "candidates", "getTabbableCandidates", "currentTarget", "focusedElement", "findIndex", "candidate", "isMovingBackwards", "shiftKey", "nextCandidates", "slice", "length", "focusFirst", "focusProxyRef", "onEscapeKeyDown", "wasEscapeCloseRef", "VIEWPORT_NAME", "NavigationMenuViewport", "viewportProps", "open", "Boolean", "forceMount", "NavigationMenuViewportImpl", "React", "props", "forwardedRef", "viewportImplProps", "context", "useNavigationMenuContext", "VIEWPORT_NAME", "__scopeNavigationMenu", "composedRefs", "useComposedRefs", "onViewportChange", "viewportContentContext", "useViewportContentContext", "CONTENT_NAME", "size", "setSize", "content", "setContent", "viewportWidth", "width", "undefined", "viewportHeight", "height", "open", "Boolean", "value", "activeContentValue", "previousValue", "handleSizeChange", "offsetWidth", "offsetHeight", "useResizeObserver", "$yHMN2$createElement", "getOpenState", "orientation", "pointerEvents", "isRootMenu", "style", "composeEventHandlers", "onPointerEnter", "onContentEnter", "onPointerLeave", "whenMouse", "onContentLeave", "Array", "from", "items", "map", "isActive", "forceMount", "composeRefs", "ref", "node", "FOCUS_GROUP_NAME", "FocusGroup", "groupProps", "dir", "ARROW_KEYS", "FOCUS_GROUP_ITEM_NAME", "FocusGroupItem", "getItems", "useFocusGroupCollection", "onKeyDown", "event", "isFocusNavigationKey", "includes", "key", "candidateNodes", "item", "current", "prevItemKey", "prevKeys", "reverse", "currentIndex", "indexOf", "currentTarget", "slice", "setTimeout", "focusFirst", "preventDefault", "getTabbableCandidates", "container", "nodes", "walker", "document", "createTreeWalker", "NodeFilter", "SHOW_ELEMENT", "acceptNode", "isHiddenInput", "tagName", "type", "disabled", "hidden", "FILTER_SKIP", "tabIndex", "FILTER_ACCEPT", "nextNode", "push", "currentNode", "candidates", "previouslyFocusedElement", "activeElement", "some", "candidate", "focus", "removeFromTabOrder", "forEach", "dataset", "tabindex", "getAttribute", "setAttribute", "prevTabIndex", "element", "onResize", "handleResize", "useCallbackRef", "useLayoutEffect", "rAF", "resizeObserver", "ResizeObserver", "cancelAnimationFrame", "window", "requestAnimationFrame", "observe", "unobserve", "makeTriggerId", "baseId", "makeContentId", "handler", "pointerType", "Root", "NavigationMenu", "List", "NavigationMenuList", "Item", "NavigationMenuItem", "Trigger", "NavigationMenuTrigger", "Link", "NavigationMenuLink", "Indicator", "NavigationMenuIndicator", "Content", "NavigationMenuContent", "Viewport", "NavigationMenuViewport", "React", "DIALOG_NAME", "createDialogContext", "createDialogScope", "createContextScope", "DialogProvider", "useDialogContext", "Dialog", "props", "open", "openProp", "modal", "triggerRef", "React", "contentRef", "setOpen", "useControllableState", "prop", "defaultProp", "defaultOpen", "onChange", "onOpenChange", "$67UHm$createElement", "__scopeDialog", "useId", "prevOpen", "children", "TRIGGER_NAME", "DialogTrigger", "React", "props", "forwardedRef", "triggerProps", "context", "useDialogContext", "__scopeDialog", "composedTriggerRef", "useComposedRefs", "triggerRef", "$67UHm$createElement", "open", "contentId", "getState", "composeEventHandlers", "onClick", "onOpenToggle", "PORTAL_NAME", "PortalProvider", "usePortalContext", "createDialogContext", "forceMount", "undefined", "DialogPortal", "props", "container", "context", "useDialogContext", "__scopeDialog", "$67UHm$createElement", "React", "map", "children", "child", "open", "OVERLAY_NAME", "DialogOverlay", "React", "props", "forwardedRef", "portalContext", "usePortalContext", "__scopeDialog", "forceMount", "overlayProps", "context", "useDialogContext", "modal", "$67UHm$createElement", "open", "DialogOverlayImpl", "React", "props", "forwardedRef", "overlayProps", "context", "useDialogContext", "OVERLAY_NAME", "__scopeDialog", "$67UHm$createElement", "Slot", "contentRef", "getState", "open", "pointerEvents", "style", "CONTENT_NAME", "DialogContent", "portalContext", "usePortalContext", "forceMount", "contentProps", "modal", "DialogContentModal", "React", "props", "forwardedRef", "context", "useDialogContext", "CONTENT_NAME", "__scopeDialog", "contentRef", "composedRefs", "useComposedRefs", "content", "current", "hideOthers", "$67UHm$createElement", "open", "composeEventHandlers", "onCloseAutoFocus", "event", "preventDefault", "triggerRef", "focus", "onPointerDownOutside", "originalEvent", "detail", "ctrlLeftClick", "button", "ctrlKey", "isRightClick", "onFocusOutside", "DialogContentNonModal", "hasInteractedOutsideRef", "hasPointerDownOutsideRef", "defaultPrevented", "onInteractOutside", "type", "target", "targetIsTrigger", "contains", "DialogContentImpl", "contentProps", "useFocusGuards", "$67UHm$Fragment", "trapFocus", "onOpenAutoFocus", "contentId", "descriptionId", "titleId", "getState", "onOpenChange", "process", "TITLE_NAME", "DialogTitle", "titleProps", "DESCRIPTION_NAME", "DialogDescription", "React", "props", "forwardedRef", "descriptionProps", "context", "useDialogContext", "__scopeDialog", "$67UHm$createElement", "descriptionId", "CLOSE_NAME", "DialogClose", "React", "props", "forwardedRef", "closeProps", "context", "useDialogContext", "__scopeDialog", "$67UHm$createElement", "composeEventHandlers", "onClick", "onOpenChange", "getState", "open", "TITLE_WARNING_NAME", "WarningProvider", "useWarningContext", "createContext", "contentName", "CONTENT_NAME", "titleName", "TITLE_NAME", "docsSlug", "Root", "Dialog", "Trigger", "DialogTrigger", "Portal", "DialogPortal", "Overlay", "DialogOverlay", "Content", "DialogContent", "Title", "DialogTitle", "Description", "DialogDescription", "Close", "DialogClose", "import_react", "previousBodyPosition", "DrawerContext", "React", "Ve", "useDrawerContext", "css", "style", "head", "useIsomorphicLayoutEffect", "bt", "chain", "args", "callback", "testPlatform", "isIPhone", "isScrollable", "node", "nonTextInputTypes", "preventScrollCount", "restore", "preventScrollStandard", "scrollable", "lastY", "e", "getScrollParent", "bottom", "scrollTop", "y", "isInput", "onFocus", "target", "visualViewport", "scrollIntoView", "scrollX", "removeEvents", "addEvent", "onTouchEnd", "value", "options", "handler", "scrollableTop", "targetBottom", "ref", "composeRefs", "usePositionFixed", "scrollPos", "K", "bottomBarHeight", "innerHeight", "restorePositionSetting", "preventScrollRestoration", "activeUrl", "onScroll", "nested", "setPositionFixed", "hasBeenOpened", "el", "styles", "key", "cache", "reset", "originalStyles", "element", "transform", "mat", "isVertical", "v", "useCallbackRef", "_a", "useUncontrolledState", "uncontrolledState", "prevValueRef", "handleChange", "useControllableState", "defaultProp", "onChange", "uncontrolledProp", "nextValue", "isControlled", "setUncontrolledProp", "setValue", "useSnapPoints", "setActiveSnapPointProp", "snapPoints", "drawerRef", "direction", "activeSnapPointProp", "isLastSnapPoint", "activeSnapPoint", "B", "shouldFade", "fadeFromIndex", "snapPoint", "hasWindow", "snapPointAsNumber", "height", "isPx", "width", "snapPointsOffset", "activeSnapPointIndex", "dimension", "newSnapPointIndex", "snapPointDim", "onSnapPointChange", "TRANSITIONS", "set", "G", "overlayRef", "snapToPoint", "velocity", "activeSnapPointOffset", "isOverlaySnapPoint", "closeDrawer", "closestSnapPoint", "curr", "prev", "dim", "VELOCITY_THRESHOLD", "draggedDistance", "hasDraggedUp", "dragDirection", "isFirst", "onDrag", "newValue", "isDraggingDown", "snapPointDistance", "targetSnapPointIndex", "percentageDragged", "getPercentageDragged", "setActiveSnapPoint", "SCROLL_LOCK_TIMEOUT", "BORDER_RADIUS", "NESTED_DISPLACEMENT", "WINDOW_TOP_OFFSET", "onOpenChange", "closeThreshold", "CLOSE_THRESHOLD", "fixed", "modal", "onClose", "setIsOpen", "isDragging", "setIsDragging", "setJustReleased", "dragEndTime", "lastTimeDragPrevented", "isAllowedToDrag", "nestedOpenChangeTimer", "previousDiffFromInitial", "initialDrawerHeight", "openTime", "onReleaseSnapPoints", "usePreventScroll", "isOpen", "getScale", "isIOS", "shouldDrag", "getTranslate", "date", "swipeAmount", "highlightedText", "m", "scrollLockTimeout", "isDraggingInDirection", "event", "directionMultiplier", "pointerStart", "dismissible", "DRAG_CLASS", "translateValue", "absDraggedDistance", "wrapper", "drawerHeightRef", "snapPointPercentageDragged", "getSnapPointsPercentageDragged", "opacityValue", "onDragProp", "scaleValue", "borderRadiusValue", "scaleBackground", "keyboardIsOpen", "visualViewportHeight", "drawerHeight", "activeSnapPointHeight", "diffFromInitial", "newDrawerHeight", "offsetFromTop", "onVisualViewportChange", "mounted", "setMounted", "currentSwipeAmount", "onRelease", "dragStartTime", "timeTaken", "resetDrawer", "onReleaseProp", "visibleDrawerHeight", "children", "htmlChild", "open", "shouldScaleBackground", "onNestedOpenChange", "scale", "initialDim", "newTranslate", "newScale", "o", "translate", "setHasBeenOpened", "visible", "openProp", "useComposedRefs", "hasSnapPoints", "onOpenAutoFocus", "onPointerDownOutside", "onPress", "Content", "NestedRoot", "Root", "onNestedDrag", "p", "onNestedRelease", "rest", "Drawer", "import_jsx_dev_runtime", "import_jsx_dev_runtime", "import_jsx_dev_runtime", "_s", "m", "_c", "_c2"]
}
